'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var smoothscroll = _interopDefault(require('smoothscroll-polyfill'));
var axios = _interopDefault(require('axios'));
var ReactMarkdown = _interopDefault(require('react-markdown'));
var reactTransitionGroup = require('react-transition-group');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

// Define browser's specific globals that won't be available during gatsby-build (a Node process)
var browser = {
  window: {
    location: {
      pathname: "/"
    }
  },
  document: {}
};

if (typeof window !== "undefined") {
  browser.window = window;
}

if (typeof document !== "undefined") {
  browser.document = document;
}

if (typeof Element !== "undefined") {
  browser.Element = Element;
}

var StringUtils = function StringUtils() {
  classCallCheck(this, StringUtils);
};

defineProperty(StringUtils, "formatMax", function () {
  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (string.length <= maxLength) {
    return string;
  }

  return "".concat(string.substring(0, maxLength), "...");
});

/* eslint-disable import/prefer-default-export */
var composeClassName = function composeClassName(classes) {
  var theClasses = classes.filter(function (className) {
    return !!className;
  });
  return theClasses.join(" ").trim();
};

/* eslint-disable import/prefer-default-export */
var camelize = function camelize(str) {
  return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
    return index == 0 ? word.toLowerCase() : word.toUpperCase();
  }).replace(/\s+/g, "");
};

/* eslint-disable import/prefer-export-default */

var index = /*#__PURE__*/Object.freeze({
	browser: browser,
	composeClassName: composeClassName,
	StringUtils: StringUtils,
	camelize: camelize
});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".BaseLink {\n  background-color: transparent;\n  text-decoration: underline;\n  border: none;\n  padding: 0;\n  color: #19294f;\n  cursor: pointer; }\n  .BaseLink.linkStyled {\n    font-size: 12px;\n    line-height: 16px;\n    font-family: soleil;\n    text-decoration: none; }\n    @media screen and (min-width: 1024px) {\n      .BaseLink.linkStyled {\n        font-size: 16px;\n        line-height: 24px; } }\n  .BaseLink:not(.disabled):hover {\n    text-decoration: underline; }\n  .BaseLink:not(.disabled):active, .BaseLink:not(.disabled).active {\n    color: #167cba; }\n  .BaseLink.disabled {\n    color: #e9edf1;\n    cursor: not-allowed; }\n  .BaseLink.whiteText {\n    color: #ffffff; }\n";
styleInject(css);

var BaseLink =
/*#__PURE__*/
function (_PureComponent) {
  inherits(BaseLink, _PureComponent);

  function BaseLink() {
    classCallCheck(this, BaseLink);

    return possibleConstructorReturn(this, getPrototypeOf(BaseLink).apply(this, arguments));
  }

  createClass(BaseLink, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          active = _this$props.active,
          blank = _this$props.blank,
          className = _this$props.className,
          children = _this$props.children,
          href = _this$props.href,
          external = _this$props.external,
          internalLinkComponent = _this$props.internalLinkComponent,
          onClickHandler = _this$props.onClickHandler,
          tabIndex = _this$props.tabIndex,
          title = _this$props.title,
          unstyled = _this$props.unstyled,
          whiteText = _this$props.whiteText,
          a11yProps = _this$props.a11yProps;
      var composedClassName = composeClassName(["BaseLink", active ? "active" : "", className, whiteText ? "whiteText" : "", unstyled ? "" : "linkStyled"]);

      if (blank) {
        return React__default.createElement("button", _extends_1({}, a11yProps, {
          type: "button",
          title: title,
          className: composedClassName
        }, tabIndex ? {
          tabIndex: tabIndex
        } : {}, {
          onClick: onClickHandler
        }), children);
      }

      if (!external) {
        // You can't render a lowercase react class like this.
        var LinkComponent = internalLinkComponent;
        return React__default.createElement(LinkComponent, _extends_1({
          title: title,
          className: composedClassName,
          to: href
        }, tabIndex ? {
          tabIndex: tabIndex
        } : {}), children);
      }

      return React__default.createElement("a", _extends_1({
        title: title,
        className: composedClassName,
        href: href
      }, tabIndex ? {
        tabIndex: tabIndex
      } : {}), children);
    }
  }]);

  return BaseLink;
}(React.PureComponent);

defineProperty(BaseLink, "propTypes", {
  className: PropTypes.string,

  /** The link destination - a relative path for internal links, or absolute for external links */
  href: PropTypes.string,

  /** Whether or not the link's destination is on a separate site */
  external: PropTypes.bool,

  /** The component used as the internal link handler when `internal` is true */
  internalLinkComponent: PropTypes.any,

  /** The title attribute of the anchor tag */
  title: PropTypes.string,

  /** If true, the link will always appear as active */
  active: PropTypes.bool,

  /** If true, the link will have no destination and can have an onClickHandler */
  blank: PropTypes.bool,

  /** The onClick function for a blank link */
  onClickHandler: PropTypes.func,
  tabIndex: PropTypes.string,
  whiteText: PropTypes.bool,
  unstyled: PropTypes.bool
});

defineProperty(BaseLink, "defaultProps", {
  active: false,
  blank: false,
  href: "",
  external: false,
  internalLinkComponent: null,
  title: "",
  onClickHandler: null,
  unstyled: false,
  whiteText: false
});

var css$1 = ".BodyText {\n  font-family: MercuryTextG1;\n  margin-top: 0;\n  margin-bottom: 0;\n  white-space: pre-line; }\n  .BodyText.Centered {\n    text-align: center; }\n  .BodyText.L {\n    font-size: 20px;\n    font-weight: normal;\n    line-height: 32px; }\n    .BodyText.L p {\n      margin-block-start: 32px;\n      margin-block-end: 32px; }\n  .BodyText.M {\n    font-size: 16px;\n    font-weight: normal;\n    line-height: 24px; }\n    .BodyText.M p {\n      margin-block-start: 24px;\n      margin-block-end: 24px; }\n  .BodyText.S {\n    font-size: 12px;\n    font-weight: 600;\n    line-height: 16px; }\n    .BodyText.S p {\n      margin-block-start: 16px;\n      margin-block-end: 16px; }\n  @media screen and (min-width: 1024px) {\n    .BodyText.L {\n      font-size: 24px;\n      font-weight: normal;\n      line-height: 32px; }\n      .BodyText.L p {\n        margin-block-start: 32px;\n        margin-block-end: 32px; }\n    .BodyText.M {\n      font-size: 20px;\n      font-weight: normal;\n      line-height: 24px; }\n      .BodyText.M p {\n        margin-block-start: 24px;\n        margin-block-end: 24px; }\n    .BodyText.S {\n      font-size: 16px;\n      font-weight: normal;\n      line-height: 24px; }\n      .BodyText.S p {\n        margin-block-start: 24px;\n        margin-block-end: 24px; } }\n";
styleInject(css$1);

var BodyText =
/*#__PURE__*/
function (_PureComponent) {
  inherits(BodyText, _PureComponent);

  function BodyText() {
    classCallCheck(this, BodyText);

    return possibleConstructorReturn(this, getPrototypeOf(BodyText).apply(this, arguments));
  }

  createClass(BodyText, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          size = _this$props.size,
          children = _this$props.children,
          className = _this$props.className,
          whiteText = _this$props.whiteText,
          centered = _this$props.centered;
      var composedClassName = composeClassName(["BodyText ".concat(size), className, whiteText ? "whiteText" : "", centered ? "Centered" : ""]);
      return React__default.createElement("p", {
        className: composedClassName
      }, children);
    }
  }]);

  return BodyText;
}(React.PureComponent);

defineProperty(BodyText, "propTypes", {
  /** The selection for the size of the body text */
  size: PropTypes.oneOf(["L", "M", "S"]),

  /** Color of the text, defaults to brand navy. */
  whiteText: PropTypes.bool,
  centered: PropTypes.bool
});

defineProperty(BodyText, "defaultProps", {
  size: "M",
  whiteText: false,
  centered: false
});

var css$2 = "/* Defining atom specific variables */\n.ButtonContainer .Button {\n  height: 48px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n  color: #19294f;\n  font-weight: normal;\n  font-size: 14px;\n  line-height: 16px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  overflow: hidden;\n  /* Theme base styles */\n  /* Default states definition */ }\n  .ButtonContainer .Button.L {\n    height: 48px;\n    padding: 0 16px 0 16px; }\n  .ButtonContainer .Button.M {\n    height: 48px;\n    padding: 0 16px 0 16px; }\n  .ButtonContainer .Button.S {\n    height: 48px;\n    padding: 0 16px 0 16px; }\n  .ButtonContainer .Button.Primary {\n    background-color: #19294f;\n    color: #ffffff; }\n    .ButtonContainer .Button.Primary:hover:not(:disabled) {\n      border-color: #19294f; }\n  .ButtonContainer .Button.Secondary {\n    background-color: #ffde30; }\n    .ButtonContainer .Button.Secondary:hover:not(:disabled) {\n      border-color: #ffde30; }\n  .ButtonContainer .Button.Tertiary {\n    background-color: #f4f6f9; }\n    .ButtonContainer .Button.Tertiary:hover:not(:disabled) {\n      border-color: #f4f6f9; }\n  .ButtonContainer .Button:focus {\n    border-color: #00aeef; }\n  .ButtonContainer .Button:hover:not(:disabled) {\n    background-color: #ffffff;\n    color: #19294f;\n    text-decoration: underline;\n    cursor: pointer; }\n  .ButtonContainer .Button:active {\n    /* aka Pressed */\n    background-color: #ffffff;\n    border-color: #00aeef;\n    color: #19294f; }\n  .ButtonContainer .Button:disabled {\n    background-color: #e9edf1;\n    border-color: #e9edf1;\n    color: #516173;\n    cursor: not-allowed;\n    text-decoration: none; }\n";
styleInject(css$2);

var Button =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Button, _PureComponent);

  function Button() {
    classCallCheck(this, Button);

    return possibleConstructorReturn(this, getPrototypeOf(Button).apply(this, arguments));
  }

  createClass(Button, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          ariaLabel = _this$props.ariaLabel,
          buttonRef = _this$props.buttonRef,
          className = _this$props.className,
          children = _this$props.children,
          hidden = _this$props.hidden,
          disabled = _this$props.disabled,
          onClickHandler = _this$props.onClickHandler,
          size = _this$props.size,
          tabIndex = _this$props.tabIndex,
          theme = _this$props.theme,
          type = _this$props.type,
          a11yProps = _this$props.a11yProps;
      var composedClassName = composeClassName(["Button", theme, size, className]);
      return React__default.createElement("div", {
        className: "ButtonContainer"
      }, React__default.createElement("button", _extends_1({}, hidden ? {
        style: {
          display: "none"
        }
      } : {}, {
        "aria-label": ariaLabel,
        autoFocus: autoFocus,
        className: composedClassName,
        disabled: disabled,
        onClick: onClickHandler,
        ref: buttonRef,
        tabIndex: tabIndex,
        type: type
      }, a11yProps), children));
    }
  }]);

  return Button;
}(React.PureComponent);

defineProperty(Button, "propTypes", {
  /** The selection for the theme of the button */
  theme: PropTypes.oneOf(["Primary", "Secondary", "Tertiary"]),

  /** The selection for the size of the button */
  size: PropTypes.oneOf(["L", "M", "S"]),

  /** The selection for the HTML type of the button */
  type: PropTypes.oneOf(["button", "reset", "submit"]),
  className: PropTypes.string,
  onClickHandler: PropTypes.func,

  /** Optional attribute for keyboard Accessibility to fix tabindex issues */
  autoFocus: PropTypes.bool,
  ariaLabel: PropTypes.string,
  disabled: PropTypes.bool,

  /** If hidden, the button will have display:none. Used in ButtonSalesforceChat to give Salesforce control over when the button appears. */
  hidden: PropTypes.bool,

  /** Optional attribute for keyboard Accessibility */
  tabIndex: PropTypes.string,

  /** Allow parent component to access to the button DOM for action like `focus` */
  buttonRef: PropTypes.shape({
    current: PropTypes.instanceOf(browser.Element)
  }),
  a11yProps: PropTypes.object
});

defineProperty(Button, "defaultProps", {
  autoFocus: false,
  buttonRef: React__default.createRef(),
  className: "",
  disabled: false,
  hidden: false,
  size: "M",
  theme: "Primary",
  type: "button",
  onClickHandler: function onClickHandler() {}
});

var Col =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Col, _PureComponent);

  function Col() {
    classCallCheck(this, Col);

    return possibleConstructorReturn(this, getPrototypeOf(Col).apply(this, arguments));
  }

  createClass(Col, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          xs = _this$props.xs,
          sm = _this$props.sm,
          md = _this$props.md,
          lg = _this$props.lg,
          xl = _this$props.xl;
      var cols = {
        xs: xs,
        sm: sm,
        md: md,
        lg: lg,
        xl: xl
      };
      var classes = [];
      Object.keys(cols).forEach(function (col) {
        if (!cols[col]) return;
        var _cols$col = cols[col],
            span = _cols$col.span,
            offset = _cols$col.offset;
        /* eslint-disable */

        if (span) classes.push("col-".concat(col, "-").concat(span));
        if (offset || offset === 0) classes.push("col-".concat(col, "-offset-").concat(offset));
      });
      var composedClassName = composeClassName([className].concat(classes));
      return React__default.createElement("div", {
        className: composedClassName
      }, children);
    }
  }]);

  return Col;
}(React.PureComponent);

defineProperty(Col, "propTypes", {
  children: PropTypes.node.isRequired,

  /** The column sizing. Same as bootstrap but with different sizings.
   * xs is required, since it's mobile first. */
  xs: PropTypes.shape({
    span: PropTypes.number.isRequired,
    offset: PropTypes.number
  }).isRequired,
  sm: PropTypes.shape({
    span: PropTypes.number.isRequired,
    offset: PropTypes.number
  }),
  md: PropTypes.shape({
    span: PropTypes.number.isRequired,
    offset: PropTypes.number
  }),
  lg: PropTypes.shape({
    span: PropTypes.number.isRequired,
    offset: PropTypes.number
  }),
  xl: PropTypes.shape({
    span: PropTypes.number.isRequired,
    offset: PropTypes.number
  }),
  className: PropTypes.string
});

var Container =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Container, _PureComponent);

  function Container() {
    classCallCheck(this, Container);

    return possibleConstructorReturn(this, getPrototypeOf(Container).apply(this, arguments));
  }

  createClass(Container, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          fluid = _this$props.fluid,
          style = _this$props.style;
      var containerClassName = fluid ? "container-fluid" : "container";
      return React__default.createElement("div", {
        className: composeClassName([containerClassName, className]),
        style: style
      }, children);
    }
  }]);

  return Container;
}(React.PureComponent);

defineProperty(Container, "propTypes", {
  /** True if fluid, false if not. */
  fluid: PropTypes.bool,
  className: PropTypes.string,
  style: PropTypes.object,

  /** Children are rendered into the container */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
});

defineProperty(Container, "defaultProps", {
  fluid: false,
  className: ""
});

var css$3 = ".DisplayText {\n  text-align: left;\n  margin: 0;\n  display: block; }\n  .DisplayText.L {\n    font-size: 20px;\n    line-height: 24px; }\n  .DisplayText.M {\n    font-size: 16px;\n    line-height: 24px; }\n  .DisplayText.S {\n    font-size: 12px;\n    line-height: 16px; }\n  @media screen and (min-width: 1024px) {\n    .DisplayText.L {\n      font-size: 24px;\n      line-height: 32px; }\n    .DisplayText.M {\n      font-size: 20px;\n      line-height: 24px; }\n    .DisplayText.S {\n      font-size: 16px;\n      line-height: 24px; } }\n  .DisplayText.Centered {\n    text-align: center; }\n";
styleInject(css$3);

var DisplayText =
/*#__PURE__*/
function (_PureComponent) {
  inherits(DisplayText, _PureComponent);

  function DisplayText() {
    classCallCheck(this, DisplayText);

    return possibleConstructorReturn(this, getPrototypeOf(DisplayText).apply(this, arguments));
  }

  createClass(DisplayText, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          size = _this$props.size,
          centered = _this$props.centered,
          className = _this$props.className,
          whiteText = _this$props.whiteText;
      var composedClassName = composeClassName(["DisplayText".concat(centered ? " Centered" : ""), size, className, whiteText ? "whiteText" : ""]);

      switch (size) {
        case "L":
          return React__default.createElement("h6", {
            className: composedClassName
          }, children);

        case "M":
        case "S":
          return React__default.createElement("span", {
            className: composedClassName
          }, children);

        default:
          return null;
      }
    }
  }]);

  return DisplayText;
}(React.PureComponent);

defineProperty(DisplayText, "propTypes", {
  /** CSS class to be added along with default classes */
  className: PropTypes.string,

  /** The selection for the size of the text */
  size: PropTypes.oneOf(["L", "M", "S"]).isRequired,

  /** If true, the text is centered; otherwise it is left-aligned */
  centered: PropTypes.bool,

  /** Color of the text, defaults to brand navy. */
  whiteText: PropTypes.bool
});

defineProperty(DisplayText, "defaultProps", {
  centered: false,
  className: "",
  whiteText: false
});

var css$4 = ".Divider {\n  border-top: 1px solid #f4f6f9;\n  width: 100%;\n  max-width: 1152px; }\n\na .Divider {\n  color: #f4f6f9; }\n";
styleInject(css$4);

var Divider =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Divider, _PureComponent);

  function Divider() {
    classCallCheck(this, Divider);

    return possibleConstructorReturn(this, getPrototypeOf(Divider).apply(this, arguments));
  }

  createClass(Divider, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          title = _this$props.title;
      var composedClassName = composeClassName(["Divider", className]);
      return React__default.createElement("hr", _extends_1({
        className: composedClassName
      }, title ? {
        title: title
      } : {}));
    }
  }]);

  return Divider;
}(React.PureComponent);

defineProperty(Divider, "propTypes", {
  className: PropTypes.string,

  /** HTML title tag to allow accessible titles */
  title: PropTypes.string
});

defineProperty(Divider, "defaultProps", {
  className: ""
});

var css$5 = ".Heading {\n  font-weight: bold;\n  text-align: left; }\n  .Heading.Centered {\n    text-align: center; }\n    .Heading.Centered.Underlined > div {\n      margin-left: auto;\n      margin-right: auto; }\n  .Heading h1, .Heading h2, .Heading h3, .Heading h4, .Heading h5 {\n    margin-top: 0;\n    margin-bottom: 0; }\n  .Heading .XL {\n    font-size: 36px;\n    line-height: 40px; }\n  .Heading .L {\n    font-size: 32px;\n    line-height: 40px; }\n  .Heading .M {\n    font-size: 28px;\n    line-height: 32px; }\n  .Heading .S {\n    font-size: 24px;\n    line-height: 32px; }\n  @media screen and (min-width: 1024px) {\n    .Heading .XL {\n      font-size: 72px;\n      line-height: 88px; }\n    .Heading .L {\n      font-size: 56px;\n      line-height: 64px; }\n    .Heading .M {\n      font-size: 36px;\n      line-height: 48px; }\n    .Heading .S {\n      font-size: 28px;\n      line-height: 32px; } }\n  .Heading.Underlined > div {\n    display: block;\n    width: 56px;\n    height: 8px;\n    margin-top: 16px;\n    margin-bottom: 0px; }\n";
styleInject(css$5);

var Heading =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Heading, _PureComponent);

  function Heading() {
    classCallCheck(this, Heading);

    return possibleConstructorReturn(this, getPrototypeOf(Heading).apply(this, arguments));
  }

  createClass(Heading, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          size = _this$props.size,
          centered = _this$props.centered,
          underlined = _this$props.underlined,
          underlineColor = _this$props.underlineColor,
          children = _this$props.children,
          className = _this$props.className,
          whiteText = _this$props.whiteText;
      var headingBody = null;

      switch (size) {
        case "XL":
          headingBody = React__default.createElement("h1", {
            className: "XL"
          }, children);
          break;

        case "L":
          headingBody = React__default.createElement("h2", {
            className: "L"
          }, children);
          break;

        case "M":
          headingBody = React__default.createElement("h3", {
            className: "M"
          }, children);
          break;

        case "S":
          headingBody = React__default.createElement("h4", {
            className: "S"
          }, children);
          break;

        default:
          headingBody = null;
      }

      var underline = underlined ? React__default.createElement("div", {
        style: {
          backgroundColor: underlineColor
        }
      }) : null;
      var classNameList = [className, "Heading"];

      if (centered) {
        classNameList.push("Centered");
      }

      if (underlined) {
        classNameList.push("Underlined");
      }

      if (whiteText) classNameList.push("whiteText");
      var composedClassName = composeClassName(classNameList);
      return React__default.createElement("div", {
        className: composedClassName
      }, headingBody, underline);
    }
  }]);

  return Heading;
}(React.PureComponent);

defineProperty(Heading, "propTypes", {
  /** CSS class to be added along with default classes */
  className: PropTypes.string,

  /** The selection for the size of the heading */
  size: PropTypes.oneOf(["XL", "L", "M", "S"]).isRequired,

  /** If true, the heading is centered; otherwise it is left-aligned */
  centered: PropTypes.bool,

  /** If true, an underline appears below the heading */
  underlined: PropTypes.bool,

  /** The RGB color of the underline if it exists */
  underlineColor: PropTypes.string,

  /** Color of the text, defaults to brand navy. */
  whiteText: PropTypes.bool
});

defineProperty(Heading, "defaultProps", {
  className: "",
  centered: false,
  underlined: false,
  underlineColor: "#1d2530",
  whiteText: false
});

var css$6 = ".Icon.L .IconSize {\n  width: 64px; }\n\n.Icon.M .IconSize {\n  width: 32px; }\n\n.Icon.S .IconSize {\n  width: 16px; }\n\n.Icon.DefaultWhite .ColoredBase {\n  fill: #ffffff; }\n  .Icon.DefaultWhite .ColoredBase:hover {\n    fill: #19294f;\n    cursor: pointer; }\n\n.Icon.DefaultGrey .ColoredBase {\n  fill: #a8aab7; }\n  .Icon.DefaultGrey .ColoredBase:hover {\n    fill: #19294f;\n    cursor: pointer; }\n";
styleInject(css$6);

var IconPaths = {
  add: React__default.createElement("path", {
    id: "a-add",
    d: "M6.495 14.488l-.002-4.972-4.981-.002A1.51 1.51 0 1 1 1.51 6.49h4.982l-.002-4.98a1.51 1.51 0 1 1 3.022 0l.003 4.982 4.972.002a1.51 1.51 0 1 1 .001 3.022H9.516l.001 4.972A1.509 1.509 0 0 1 8.007 16a1.513 1.513 0 0 1-1.512-1.512z"
  }),
  avatar: React__default.createElement("path", {
    id: "a-avatar",
    d: "M14 12c0-1.08-1.151-2.018-2.862-2.546A3.98 3.98 0 0 1 8 11a3.98 3.98 0 0 1-3.138-1.546C3.151 9.982 2 10.92 2 12v2h12v-2zm-4-8a2 2 0 1 0-4 0v3a2 2 0 1 0 4 0V4zm5 12H1a1 1 0 0 1-1-1v-3c0-1.864 1.648-3.472 4.068-4.331A3.88 3.88 0 0 1 4 7V4a4 4 0 0 1 8 0v3c0 .229-.03.451-.068.669C14.352 8.528 16 10.136 16 12v3a1 1 0 0 1-1 1z"
  }),
  calendar: React__default.createElement("path", {
    id: "a-calendar",
    d: "M4 9h2V7H4v2zm0 3h2v-2H4v2zm3-3h2V7H7v2zm0 3h2v-2H7v2zm3-3h2V7h-2v2zm0 3h2v-2h-2v2zm4-6a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V6zm0 10H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2v1a1 1 0 0 0 2 0V0h4v1a1 1 0 0 0 2 0V0h2a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2z"
  }),
  caretLeft: React__default.createElement("path", {
    id: "a-caretLeft",
    d: "M13 0L3 8l10 8z"
  }),
  caretRight: React__default.createElement("path", {
    id: "a-caretRight",
    d: "M3 0l10 8-10 8z"
  }),
  checkmark: React__default.createElement("path", {
    id: "a-checkmark",
    d: "M12.724 5.692L7 11.71a.91.91 0 0 1-1.333 0L3.276 9.197a1.03 1.03 0 0 1 0-1.403.911.911 0 0 1 1.333 0l1.724 1.813 5.057-5.316a.91.91 0 0 1 1.334 0 1.026 1.026 0 0 1 0 1.401"
  }),
  checkmarkSolid: React__default.createElement("path", {
    id: "a-checkmarkSolid",
    d: "M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm-.56 11.01l4.07-4.07a.999.999 0 1 0-1.414-1.415L6.732 8.89l-.829-.829A1 1 0 0 0 4.49 9.475l1.536 1.535a.999.999 0 0 0 1.414 0z"
  }),
  chevronDown: React__default.createElement("path", {
    id: "a-chevronDown",
    d: "M8 5.673L12.875.798a.801.801 0 0 1 1.123.012l.222.222c.314.314.31.826.013 1.124L8.556 7.833a.776.776 0 0 1-.608.221.773.773 0 0 1-.504-.221L1.767 2.156a.801.801 0 0 1 .013-1.124L2.002.81A.803.803 0 0 1 3.125.798L8 5.673z"
  }),
  chevronLeft: React__default.createElement("path", {
    id: "a-chevronLeft",
    d: "M6.384 7.456l4.875 4.876a.801.801 0 0 1-.013 1.123l-.222.222a.803.803 0 0 1-1.123.012L4.224 8.012a.776.776 0 0 1-.222-.608.773.773 0 0 1 .222-.503L9.9 1.224a.801.801 0 0 1 1.123.012l.222.222c.314.314.31.826.013 1.123L6.384 7.456z"
  }),
  chevronRight: React__default.createElement("path", {
    id: "a-chevronRight",
    d: "M9.357 7.315L4.482 2.44a.801.801 0 0 1 .013-1.124l.221-.221a.803.803 0 0 1 1.124-.013l5.677 5.677a.776.776 0 0 1 .222.608.773.773 0 0 1-.222.503L5.84 13.548a.801.801 0 0 1-1.124-.013l-.221-.222a.803.803 0 0 1-.013-1.123l4.875-4.875z"
  }),
  chevronUp: React__default.createElement("path", {
    id: "a-chevronUp",
    d: "M7.74 6.098l-4.874 4.876a.801.801 0 0 1-1.124-.013l-.221-.222a.803.803 0 0 1-.013-1.123l5.677-5.677a.776.776 0 0 1 .608-.222c.186.01.367.086.503.222l5.678 5.677a.801.801 0 0 1-.013 1.123l-.222.222a.803.803 0 0 1-1.123.013L7.74 6.098z"
  }),
  close: React__default.createElement("path", {
    id: "a-close",
    d: "M12.616 15.411l-4.611-4.609-4.62 4.617a1.98 1.98 0 0 1-2.804 0 1.978 1.978 0 0 1 0-2.802L5.201 8 .58 3.383a1.978 1.978 0 0 1 0-2.802 1.98 1.98 0 0 1 2.803 0l4.621 4.617 4.61-4.609A1.98 1.98 0 1 1 15.42 3.39l-4.611 4.611 4.61 4.609a1.978 1.978 0 0 1 0 2.801 1.984 1.984 0 0 1-2.802 0z"
  }),
  closeSolid: React__default.createElement("path", {
    id: "a-closeSolid",
    d: "M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm9.315 2.718a.993.993 0 0 0 1.403-1.403L9.41 8.007l1.308-1.309a.993.993 0 0 0-1.403-1.403L8.007 6.603 6.694 5.291a.991.991 0 1 0-1.403 1.403l1.312 1.312-1.312 1.313a.991.991 0 1 0 1.403 1.403L8.007 9.41l1.308 1.308z"
  }),
  dollar: React__default.createElement("path", {
    id: "a-dollar",
    d: "M7.154 16v-1.67c-1.73-.159-3.22-.934-4.154-2.226l2.007-1.828c.676.894 1.75 1.55 3.002 1.55.934 0 1.828-.278 1.828-1.073 0-.755-.715-.954-1.331-1.133l-2.207-.577c-1.709-.457-2.802-1.53-2.802-3.398 0-2.028 1.45-3.538 3.657-3.916V0H9.46v1.73c1.45.198 2.663.774 3.319 1.848L10.79 5.386c-.596-.815-1.63-1.192-2.564-1.192-.874 0-1.57.358-1.57 1.093 0 .616.577.815 1.252.994l2.087.576c1.869.497 3.12 1.51 3.12 3.459 0 2.226-1.629 3.537-3.656 3.915V16H7.154z"
  }),
  download: React__default.createElement("path", {
    id: "a-download",
    d: "M7.61 11.424L4.3 8.114a.552.552 0 1 1 .78-.78l2.368 2.369V.552a.552.552 0 0 1 1.104 0v9.15l2.368-2.368a.552.552 0 1 1 .78.78l-3.31 3.31a.565.565 0 0 1-.084.07l-.043.022c-.017.01-.034.02-.052.028-.018.007-.037.012-.056.017-.016.005-.03.011-.047.014a.551.551 0 0 1-.216 0c-.016-.003-.031-.009-.047-.014-.019-.005-.038-.01-.056-.017-.018-.008-.035-.018-.052-.028-.015-.007-.03-.014-.043-.023a.565.565 0 0 1-.084-.069zm7.838-1.045c.305 0 .552.247.552.552v3.862H0v-3.862a.552.552 0 0 1 1.103 0v2.759h13.794V10.93c0-.305.247-.552.551-.552z"
  }),
  email: React__default.createElement("path", {
    id: "a-email",
    d: "M8.012 9.02L9 10l-1 1-1-1 .01-.01-.986-.977-1.499 1.483-1.027-.989 1.515-1.495-1.495-1.48.99-1.028 3.506 3.513-.002.002zm2.99-1l1.465 1.484-1.026.985L10 9.033l-.96.97-1.029-.99 3.514-3.506.989.988-1.511 1.525zM1.995 2h12.012C15.106 2 16 2.9 16 4.009v7.982A2.003 2.003 0 0 1 14.006 14H1.994C.894 14 0 13.1 0 11.991V4.01C0 2.902.893 2 1.994 2zm1.008 2C2.45 4 2 4.453 2 4.997v6.006c0 .55.456.997 1.002.997h9.996c.553 0 1.002-.453 1.002-.997V4.997c0-.55-.456-.997-1.002-.997H3.002z"
  }),
  global: React__default.createElement("path", {
    id: "a-global",
    d: "M3.012 7.885C3.503 7.83 4.52 7.755 5 8c.831.423 1.734 1.448 1.734 1.448L4.74 11.763A4.956 4.956 0 0 0 8 13a5 5 0 0 0 5-5c0-.473-.086-.922-.209-1.355-.407.475-1.232 1.084-1.232 1.084-.7-.078-.36.788-.36.788.295 1.916-.721 2.152-.721 2.152C9.093 12.092 8 9 8 9c-.256-1.721-.404-2.272-.404-2.272-1.773-1.108-.026-1.512.35-1.576h.011c.09-.013.068-.014-.011 0-.502.069-.406-.236-.71-.788-.307-.557-.682.094-.721 0-.038-.093-.215 1.02-.72 1.182-.505.162-.36-1.182-.36-1.182-.975 1.493-1.294 1.112-1.396.621a4.97 4.97 0 0 0-1.027 2.9M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14"
  }),
  hamburger: React__default.createElement("path", {
    id: "a-hamburger",
    d: "M0 16h16V0H0v16zm3-5h10v1.103H3V11zm0-3.5h10v1.103H3V7.5zM3 4h10v1.103H3V4z"
  }),
  infoSolid: React__default.createElement("path", {
    id: "a-infoSolid",
    d: "M9.619 12.006H6.38c-.213 0-.385-.201-.385-.448s.172-.448.385-.448L7 11V8l-.62-.116c-.213 0-.385-.201-.385-.448s.172-.448.385-.448h2.514c.077 0 .102-.032.113-.058C9.004 6.945 9 6.959 9 7v4l.619.11c.213 0 .386.201.386.448s-.173.448-.386.448zM7 4h.98c.007 0 .013-.004.02-.004.007 0 .013.004.02.004H9v.94c.001.022.012.04.012.061 0 .022-.011.04-.012.061V6h-.967c-.012.001-.022.007-.033.007-.012 0-.022-.006-.033-.007H7v-.939c-.002-.021-.013-.038-.013-.06 0-.021.011-.039.013-.06V4zm1-4a8 8 0 0 0-8 8 8 8 0 1 0 16 0 8 8 0 0 0-8-8z"
  }),
  locationPin: React__default.createElement("path", {
    id: "a-locationPin",
    d: "M7.346 15.243S2 9.313 2 6a6 6 0 1 1 12 0c0 3.314-5.346 9.243-5.346 9.243-.365.427-.947.418-1.308 0zM8 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm0-2a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"
  }),
  search: React__default.createElement("path", {
    id: "a-search",
    d: "M9.222 3.033a4.376 4.376 0 1 0-6.19 6.19 4.376 4.376 0 1 0 6.19-6.19m4.552 10.741a.877.877 0 0 1-1.239 0L9.78 11.017c-2.4 1.794-5.804 1.624-7.984-.557a6.126 6.126 0 0 1 0-8.665 6.126 6.126 0 0 1 8.665 0c2.181 2.18 2.351 5.584.557 7.984l2.757 2.757a.876.876 0 0 1 0 1.238"
  }),
  socialFacebook: React__default.createElement("path", {
    id: "a-socialFacebook",
    d: "M9 16V8h3V6H9V4c.193-.78.413-1.343 2-1h1V0c-.25.074-1.112 0-2 0-2.205 0-3.633 1.329-4 4v2H4v2h2v8h3z"
  }),
  socialInstagram: React__default.createElement("path", {
    id: "a-socialInstagram",
    d: "M15.58 2.757c.197.507.333 1.088.37 1.942.044.853.05 1.125.05 3.301s-.012 2.448-.05 3.301c-.037.847-.173 1.435-.37 1.942a3.91 3.91 0 0 1-.922 1.415 3.91 3.91 0 0 1-1.415.922c-.507.197-1.088.333-1.942.37-.853.044-1.125.05-3.301.05s-2.448-.012-3.301-.05c-.847-.037-1.435-.173-1.942-.37a3.91 3.91 0 0 1-1.415-.922 3.91 3.91 0 0 1-.922-1.415C.223 12.736.087 12.155.05 11.3.005 10.448 0 10.176 0 8s.012-2.448.05-3.301c.037-.847.173-1.435.37-1.942a3.91 3.91 0 0 1 .922-1.415A3.91 3.91 0 0 1 2.757.42C3.264.223 3.845.087 4.7.05 5.552.005 5.824 0 8 0s2.448.012 3.301.05c.847.037 1.435.173 1.942.37.525.204.97.476 1.415.922.446.445.718.89.922 1.415zm-1.625 8.198C13.989 10.186 14 9.949 14 8c0-1.95-.011-2.18-.045-2.955-.034-.712-.153-1.096-.254-1.356a2.289 2.289 0 0 0-.548-.842 2.264 2.264 0 0 0-.842-.548c-.255-.101-.644-.22-1.356-.254C10.186 2.005 9.949 2 8 2c-1.95 0-2.18.011-2.955.045-.712.034-1.096.153-1.356.254a2.289 2.289 0 0 0-.842.548 2.264 2.264 0 0 0-.548.842c-.101.255-.22.644-.254 1.356C2.005 5.814 2 6.051 2 8c0 1.95.011 2.18.045 2.955.034.712.153 1.096.254 1.356.136.344.294.587.548.842.255.254.503.418.842.548.255.101.644.22 1.356.254.769.04 1 .045 2.955.045s2.18-.011 2.955-.045c.712-.034 1.096-.153 1.356-.254.344-.136.587-.294.842-.548.254-.255.418-.503.548-.842.101-.255.22-.644.254-1.356zM12 5a1 1 0 1 1 0-2 1 1 0 0 1 0 2zM8 4c2.208 0 4 1.792 4 4s-1.792 4-4 4-4-1.792-4-4 1.792-4 4-4zm0 6c1.102 0 2-.898 2-2a2 2 0 1 0-2 2z"
  }),
  socialLinkedin: React__default.createElement("path", {
    id: "a-socialLinkedin",
    d: "M1.227 5.649H4.13V15H1.227V5.649zM2.684 1a1.687 1.687 0 0 1 0 3.373A1.684 1.684 0 0 1 1 2.686C1 1.756 1.75 1 2.684 1zm3.27 4.649h2.78v1.28h.038c.388-.734 1.333-1.507 2.747-1.507C14.455 5.422 15 7.357 15 9.876V15h-2.898v-4.546c0-1.086-.016-2.481-1.506-2.481-1.511 0-1.738 1.184-1.738 2.4V15H5.96V5.649h-.005z"
  }),
  socialPinterest: React__default.createElement("path", {
    id: "a-socialPinterest",
    d: "M8.234 0C3.51 0 1 2.81 1 5.874c0 1.42.855 3.193 2.224 3.755.207.087.32.05.368-.13.04-.135.22-.79.307-1.099.027-.099.013-.185-.074-.278-.454-.488-.815-1.377-.815-2.211 0-2.137 1.83-4.212 4.943-4.212 2.692 0 4.576 1.624 4.576 3.946 0 2.625-1.497 4.441-3.44 4.441-1.076 0-1.877-.784-1.623-1.754.307-1.155.908-2.396.908-3.23 0-.747-.454-1.365-1.383-1.365-1.095 0-1.983 1.007-1.983 2.36 0 .858.327 1.438.327 1.438L4.052 12.36c-.34 1.285.047 3.367.08 3.546.02.099.14.13.208.05.107-.13 1.416-1.866 1.783-3.12l.681-2.31c.361.605 1.403 1.112 2.512 1.112 3.3 0 5.684-2.693 5.684-6.035C14.987 2.397 12.034 0 8.234 0"
  }),
  socialTwitter: React__default.createElement("path", {
    id: "a-socialTwitter",
    d: "M16 3.42a6.945 6.945 0 0 1-1.885.477c.677-.375 1.198-.968 1.443-1.675-.634.346-1.336.6-2.084.734A3.415 3.415 0 0 0 11.077 2C9.264 2 7.795 3.356 7.795 5.03c0 .236.028.468.084.69-2.728-.127-5.146-1.333-6.766-3.166A2.844 2.844 0 0 0 .67 4.077c0 1.052.58 1.979 1.46 2.522A3.483 3.483 0 0 1 .643 6.22v.038c0 1.468 1.13 2.693 2.632 2.971a3.564 3.564 0 0 1-1.482.052c.418 1.203 1.63 2.079 3.066 2.104a6.941 6.941 0 0 1-4.076 1.297c-.265 0-.526-.014-.783-.042A9.871 9.871 0 0 0 5.032 14c6.037 0 9.34-4.616 9.34-8.62 0-.13-.004-.261-.01-.392A6.4 6.4 0 0 0 16 3.42z"
  }),
  socialVimeo: React__default.createElement("path", {
    id: "a-socialVimeo",
    d: "M15.992 4.234c-.07 1.577-1.157 3.735-3.263 6.473C10.554 13.569 8.711 15 7.206 15c-.932 0-1.725-.873-2.368-2.613-.429-1.6-.863-3.193-1.291-4.792-.477-1.74-.991-2.613-1.543-2.613-.118 0-.541.255-1.254.764L0 4.765c.788-.7 1.57-1.404 2.336-2.109 1.055-.921 1.843-1.404 2.373-1.453 1.243-.119 2.01.743 2.299 2.586.31 1.99.525 3.226.648 3.708.359 1.648.755 2.478 1.184 2.478.332 0 .836-.537 1.51-1.605.67-1.068 1.03-1.887 1.077-2.445.097-.921-.262-1.388-1.076-1.388-.386 0-.777.087-1.184.266.787-2.608 2.287-3.87 4.505-3.8 1.64.038 2.416 1.117 2.32 3.23z"
  }),
  subtract: React__default.createElement("rect", {
    id: "a-subtract",
    width: "12",
    height: "2",
    x: "2",
    y: "7",
    rx: "1"
  })
};

var Icon =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Icon, _PureComponent);

  function Icon() {
    classCallCheck(this, Icon);

    return possibleConstructorReturn(this, getPrototypeOf(Icon).apply(this, arguments));
  }

  createClass(Icon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          size = _this$props.size,
          defaultColor = _this$props.defaultColor,
          className = _this$props.className,
          title = _this$props.title,
          role = _this$props.role;
      var composedClassName = composeClassName(["Icon ".concat(icon, " ").concat(size, " ").concat(defaultColor), title, role, className]);
      var path = Icon.IconPath[icon];
      var maskId = "icon-".concat(icon);
      var maskLinkId = "#a-".concat(icon);
      var maskUrlRef = "url(#icon-".concat(icon, ")");
      var iconLabel = "".concat(icon, "-label");
      return React__default.createElement("span", {
        className: composedClassName
      }, React__default.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        className: "IconSize",
        viewBox: "0 0 16 16",
        role: role,
        "aria-labelledby": iconLabel
      }, React__default.createElement("title", {
        id: iconLabel
      }, title || "".concat(icon, " icon")), React__default.createElement("defs", null, path), React__default.createElement("g", {
        fill: "none",
        fillRule: "evenodd"
      }, React__default.createElement("mask", {
        id: maskId,
        fill: "#fff"
      }, React__default.createElement("use", {
        xlinkHref: maskLinkId
      })), React__default.createElement("g", {
        mask: maskUrlRef
      }, React__default.createElement("path", {
        className: "ColoredBase",
        d: "M0 0h16v16H0z"
      })))));
    }
  }]);

  return Icon;
}(React.PureComponent);

defineProperty(Icon, "IconPath", IconPaths);

defineProperty(Icon, "propTypes", {
  className: PropTypes.string,

  /** The selection for the displayed icon */
  icon: PropTypes.oneOf(Object.keys(Icon.IconPath)).isRequired,

  /** The selection for the size of the icon */
  size: PropTypes.oneOf(["S", "M", "L"]).isRequired,

  /** The selection for the default color of the icon */
  defaultColor: PropTypes.oneOf(["DefaultGrey", "DefaultWhite"]),

  /** The description of the icon, defaults to the name of the icon */
  title: PropTypes.string,

  /** The role of the icon, defaults to the role of an image */
  role: PropTypes.string
});

defineProperty(Icon, "defaultProps", {
  className: "",
  size: "M",
  defaultColor: "DefaultGrey",
  title: "",
  role: "img"
});

var css$7 = ".IframeContainer iframe {\n  width: 100%;\n  min-height: 100px;\n  /* TODO: decide on default height */\n  overflow: hidden;\n  border: none;\n  margin: 0;\n  padding: 0; }\n";
styleInject(css$7);

var Iframe =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Iframe, _PureComponent);

  function Iframe() {
    classCallCheck(this, Iframe);

    return possibleConstructorReturn(this, getPrototypeOf(Iframe).apply(this, arguments));
  }

  createClass(Iframe, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          height = _this$props.height,
          sourceUrl = _this$props.sourceUrl,
          title = _this$props.title;
      var composedClassName = composeClassName(["Iframe", className]);
      return React__default.createElement("div", {
        className: "IframeContainer"
      }, React__default.createElement("iframe", {
        height: height,
        className: composedClassName,
        title: title,
        src: sourceUrl,
        scrolling: "no"
      }));
    }
  }]);

  return Iframe;
}(React.PureComponent);

defineProperty(Iframe, "propTypes", {
  className: PropTypes.string,
  height: PropTypes.string,
  sourceUrl: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired
});

defineProperty(Iframe, "defaultProps", {
  className: "",
  height: ""
});

var css$8 = ".Image {\n  width: 100%;\n  height: 100%; }\n  .Image img {\n    object-fit: cover;\n    width: 100%;\n    height: 100%; }\n  .Image.Circular {\n    border-radius: 50%;\n    position: relative;\n    overflow: hidden;\n    padding-bottom: 100%; }\n    .Image.Circular img {\n      position: absolute; }\n";
styleInject(css$8);

var Image =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Image, _PureComponent);

  function Image() {
    classCallCheck(this, Image);

    return possibleConstructorReturn(this, getPrototypeOf(Image).apply(this, arguments));
  }

  createClass(Image, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          altText = _this$props.altText,
          className = _this$props.className,
          circular = _this$props.circular,
          longdesc = _this$props.longdesc,
          mobileSource = _this$props.mobileSource,
          source = _this$props.source; // If we don't care about it updating on resize, we don't need any state

      var isMobile = browser.window.innerWidth < 768;
      var composedClassName = composeClassName(["Image", className, circular ? "Circular" : ""]);

      if (isMobile) {
        return React__default.createElement("div", {
          className: composedClassName
        }, React__default.createElement("img", _extends_1({
          src: mobileSource || source,
          alt: altText
        }, longdesc ? {
          longdesc: longdesc
        } : {})));
      }

      return React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement("img", _extends_1({
        src: source,
        alt: altText
      }, longdesc ? {
        longdesc: longdesc
      } : {})));
    }
  }]);

  return Image;
}(React.PureComponent);

defineProperty(Image, "propTypes", {
  className: PropTypes.string,

  /** The source file for the main image */
  source: PropTypes.string.isRequired,

  /** The source file for the mobile image */
  mobileSource: PropTypes.string,

  /** The essential information conveyed by an image the purposes of the image */
  altText: PropTypes.string.isRequired,

  /** A long description is used for each img element
   *  that does not have Alt text conveying the same information as the image. */
  longdesc: PropTypes.string,

  /** If true, the image is in a circular container */
  circular: PropTypes.bool
});

defineProperty(Image, "defaultProps", {
  circular: false,
  className: ""
});

var css$9 = ".ImageBackground {\n  width: 100%;\n  height: 100%;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; }\n";
styleInject(css$9);

var ImageBackground =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ImageBackground, _PureComponent);

  function ImageBackground() {
    classCallCheck(this, ImageBackground);

    return possibleConstructorReturn(this, getPrototypeOf(ImageBackground).apply(this, arguments));
  }

  createClass(ImageBackground, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          mobileSource = _this$props.mobileSource,
          source = _this$props.source;
      var isMobile = browser.window.innerWidth < 768;
      var imageSource = isMobile && mobileSource ? mobileSource : source;
      var composedClassName = composeClassName(["ImageBackground", className]);
      return React__default.createElement("div", {
        className: composedClassName,
        style: {
          backgroundImage: "url(".concat(imageSource, ")")
        }
      }, children);
    }
  }]);

  return ImageBackground;
}(React.PureComponent);

defineProperty(ImageBackground, "propTypes", {
  /** The source file for the main image */
  source: PropTypes.string.isRequired,

  /** The source file for the mobile image */
  mobileSource: PropTypes.string,
  className: PropTypes.string
});

defineProperty(ImageBackground, "defaultProps", {
  circular: false,
  className: ""
});

var css$a = ".Label {\n  width: 100%; }\n  .Label span {\n    display: block;\n    font-family: soleil;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: 12px;\n    line-height: 16px; }\n";
styleInject(css$a);

var Label =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Label, _PureComponent);

  function Label() {
    classCallCheck(this, Label);

    return possibleConstructorReturn(this, getPrototypeOf(Label).apply(this, arguments));
  }

  createClass(Label, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          htmlFor = _this$props.htmlFor,
          children = _this$props.children,
          label = _this$props.label,
          whiteText = _this$props.whiteText;
      var composedClassName = composeClassName(["Label", className]);
      var spanClassName = composeClassName(["LabelSpan", whiteText ? "whiteText" : ""]);
      return React__default.createElement("label", {
        htmlFor: htmlFor,
        className: composedClassName
      }, React__default.createElement("span", {
        className: spanClassName
      }, label), children);
    }
  }]);

  return Label;
}(React.PureComponent);

defineProperty(Label, "propTypes", {
  className: PropTypes.string,

  /** Indicates to which element ID this label referred */
  htmlFor: PropTypes.string.isRequired,

  /** Text to be rendered */
  label: PropTypes.string,
  whiteText: PropTypes.bool
});

defineProperty(Label, "defaultProps", {
  className: "",
  label: null,
  whiteText: false
});

var css$b = ".ModalWrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed !important;\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 9999; }\n";
styleInject(css$b);

var ModalWrapper =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ModalWrapper, _PureComponent);

  function ModalWrapper() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, ModalWrapper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ModalWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(_this), "_handleOnKeyDown", function (event) {
      // close on Escape
      if (event.keyCode === 27) {
        var closeHandler = _this.props.closeHandler;
        closeHandler();
      }
    });

    return _this;
  }

  createClass(ModalWrapper, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ariaLabel = _this$props.ariaLabel,
          ariaDescribedBy = _this$props.ariaDescribedBy,
          children = _this$props.children,
          className = _this$props.className,
          open = _this$props.open;
      var composedClassName = composeClassName(["ModalWrapper", className]);

      if (!open) {
        return null;
      }

      return React__default.createElement("div", {
        className: composedClassName,
        tabIndex: "-1",
        "aria-modal": "true",
        "aria-label": ariaLabel,
        "aria-describedby": ariaDescribedBy,
        role: "dialog",
        onKeyDown: this._handleOnKeyDown
      }, React__default.createElement("div", {
        className: composeClassName(["Modal"])
      }, children));
    }
  }]);

  return ModalWrapper;
}(React.PureComponent);

defineProperty(ModalWrapper, "propTypes", {
  closeHandler: PropTypes.func.isRequired,
  ariaLabel: PropTypes.string,
  ariaDescribedBy: PropTypes.string,
  className: PropTypes.string,
  open: PropTypes.bool
});

defineProperty(ModalWrapper, "defaultProps", {
  ariaLabel: "modal",
  open: false
});

var css$c = ".VideoPlayerContainer {\n  width: 100%;\n  padding-top: 56.25%;\n  /* 16:9 Aspect Ratio */\n  position: relative; }\n  .VideoPlayerContainer .VideoPlayer {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    height: 100%; }\n";
styleInject(css$c);

var VideoPlayer =
/*#__PURE__*/
function (_PureComponent) {
  inherits(VideoPlayer, _PureComponent);

  function VideoPlayer() {
    classCallCheck(this, VideoPlayer);

    return possibleConstructorReturn(this, getPrototypeOf(VideoPlayer).apply(this, arguments));
  }

  createClass(VideoPlayer, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          allowFullScreen = _this$props.allowFullScreen,
          autoplay = _this$props.autoplay,
          className = _this$props.className,
          source = _this$props.source,
          title = _this$props.title,
          videoId = _this$props.videoId;
      var composedClassName = composeClassName(["VideoPlayer", className]);
      var SOURCE_URL = {
        youtube: "https://www.youtube.com/embed/",
        vimeo: "https://player.vimeo.com/video/"
      };
      var baseUrl = SOURCE_URL[source];
      var queryString = "autoplay=".concat(autoplay ? "1" : "0");
      return React__default.createElement("div", {
        className: "VideoPlayerContainer"
      }, React__default.createElement("iframe", {
        className: composedClassName,
        title: title,
        src: "".concat(baseUrl).concat(videoId, "?").concat(queryString),
        allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
        allowFullScreen: allowFullScreen,
        tabIndex: "-1"
      }));
    }
  }]);

  return VideoPlayer;
}(React.PureComponent);

defineProperty(VideoPlayer, "propTypes", {
  allowFullScreen: PropTypes.bool,
  autoplay: PropTypes.bool,
  className: PropTypes.string,

  /** Video Player source */
  source: PropTypes.oneOf(["vimeo", "youtube"]),

  /** Video Title, required for Accessibility */
  title: PropTypes.string.isRequired,

  /** Video Player URL Id, for each player source its different,
   * can be found at sharing options of the video */
  videoId: PropTypes.string.isRequired
});

defineProperty(VideoPlayer, "defaultProps", {
  allowFullScreen: true,
  autoplay: false,
  className: "",
  frameBorder: "0",
  source: "youtube"
});



var index$1 = /*#__PURE__*/Object.freeze({
	BaseLink: BaseLink,
	BodyText: BodyText,
	Button: Button,
	Col: Col,
	Container: Container,
	DisplayText: DisplayText,
	Divider: Divider,
	Heading: Heading,
	Icon: Icon,
	Iframe: Iframe,
	Image: Image,
	ImageBackground: ImageBackground,
	Label: Label,
	ModalWrapper: ModalWrapper,
	VideoPlayer: VideoPlayer
});

var css$d = ".Accordion {\n  box-sizing: border-box;\n  width: 100%;\n  margin: 0;\n  padding: 0; }\n";
styleInject(css$d);

var Accordion =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Accordion, _PureComponent);

  function Accordion() {
    classCallCheck(this, Accordion);

    return possibleConstructorReturn(this, getPrototypeOf(Accordion).apply(this, arguments));
  }

  createClass(Accordion, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          name = _this$props.name;
      var composedClassName = composeClassName(["Accordion", className]);
      var childrenToRender = React__default.Children.map(children, function (child) {
        return React__default.cloneElement(child, {
          name: name
        });
      });
      return React__default.createElement("ul", {
        className: composedClassName,
        "aria-label": "Accordion Control Group Buttons"
      }, childrenToRender);
    }
  }]);

  return Accordion;
}(React.PureComponent);

defineProperty(Accordion, "propTypes", {
  className: PropTypes.string,
  name: PropTypes.string
});

defineProperty(Accordion, "defaultProps", {
  className: ""
});

var css$e = ".AccordionItem {\n  width: 100%;\n  background-color: #f4f6f9;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  list-style-type: none;\n  box-sizing: border-box; }\n  .AccordionItem .AccordionItemIcon {\n    margin-left: auto;\n    margin-right: 0px;\n    align-self: center; }\n  .AccordionItem .AccordionItemHeader {\n    width: 100%;\n    height: 88px;\n    display: flex;\n    align-items: center;\n    padding: 16px;\n    box-sizing: border-box;\n    border: none;\n    background: inherit; }\n  .AccordionItem .AccordionItemContent {\n    width: 100%;\n    padding: 16px;\n    box-sizing: border-box; }\n  .AccordionItem .Collapsed {\n    display: none; }\n";
styleInject(css$e);

var css$f = ".ButtonIconContainer {\n  display: inline-block; }\n\n.ButtonContainer .Button.ButtonIcon {\n  padding-top: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center; }\n  .ButtonContainer .Button.ButtonIcon.L {\n    width: 48px; }\n  .ButtonContainer .Button.ButtonIcon.M {\n    width: 48px; }\n  .ButtonContainer .Button.ButtonIcon.S {\n    width: 48px; }\n  .ButtonContainer .Button.ButtonIcon:hover .Icon .ColoredBase {\n    fill: #19294f; }\n  .ButtonContainer .Button.ButtonIcon:hover:disabled .Icon .ColoredBase {\n    fill: #ffffff;\n    cursor: not-allowed; }\n  .ButtonContainer .Button.ButtonIcon:active .Icon .ColoredBase {\n    fill: #19294f; }\n";
styleInject(css$f);

var ButtonIcon =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ButtonIcon, _PureComponent);

  function ButtonIcon() {
    classCallCheck(this, ButtonIcon);

    return possibleConstructorReturn(this, getPrototypeOf(ButtonIcon).apply(this, arguments));
  }

  createClass(ButtonIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          children = _this$props.children,
          className = _this$props.className,
          disabled = _this$props.disabled,
          external = _this$props.external,
          href = _this$props.href,
          icon = _this$props.icon,
          internalLinkComponent = _this$props.internalLinkComponent,
          onClickHandler = _this$props.onClickHandler,
          role = _this$props.role,
          size = _this$props.size,
          tabIndex = _this$props.tabIndex,
          theme = _this$props.theme,
          title = _this$props.title,
          type = _this$props.type,
          a11yProps = _this$props.a11yProps;
      var buttonProps = {
        autoFocus: autoFocus,
        children: children,
        disabled: disabled,
        onClickHandler: onClickHandler,
        size: size,
        tabIndex: tabIndex,
        theme: theme,
        type: type,
        a11yProps: a11yProps
      };
      var iconProps = {
        icon: icon,
        role: role
      };
      var linkProps = {
        external: external,
        href: href,
        internalLinkComponent: internalLinkComponent,
        title: title
      };
      var composedClassName = composeClassName([className, "ButtonIcon", size, theme]);
      var button = React__default.createElement(Button, _extends_1({
        className: composedClassName
      }, buttonProps), React__default.createElement(Icon, _extends_1({
        className: "Icon",
        size: "S",
        defaultColor: theme.includes("Primary") ? "DefaultWhite" : "DefaultGrey"
      }, iconProps)));

      if (onClickHandler || disabled) {
        return button;
      }

      return React__default.createElement(BaseLink, _extends_1({
        className: "ButtonIconContainer",
        tabIndex: "-1"
      }, linkProps), button);
    }
  }]);

  return ButtonIcon;
}(React.PureComponent);

defineProperty(ButtonIcon, "propTypes", {
  className: PropTypes.string,
  onClickHandler: PropTypes.func,
  disabled: PropTypes.bool,
  autoFocus: PropTypes.bool,

  /** The selection for the size of the button */
  size: PropTypes.oneOf(["L", "M", "S"]),
  tabIndex: PropTypes.string,

  /** The selection for the theme of the button */
  theme: PropTypes.oneOf(["Primary", "Tertiary"]),

  /** The selection for the HTML type of the button */
  type: PropTypes.oneOf(["button", "reset", "submit"]),
  icon: PropTypes.oneOf(Object.keys(Icon.IconPath)).isRequired,

  /** The component used as the internal link handler when `internal` is true */
  internalLinkComponent: PropTypes.any,

  /** The role of the icon */
  role: PropTypes.string,

  /** The title attribute of the anchor tag, required for accessibility */
  title: PropTypes.string,
  external: PropTypes.bool,
  href: PropTypes.string,
  a11yProps: PropTypes.object
});

defineProperty(ButtonIcon, "defaultProps", {
  autoFocus: false,
  disabled: false,
  external: false,
  href: "",
  internalLinkComponent: null,
  onClickHandler: null,
  role: "img",
  size: "M",
  tabIndex: "",
  theme: "Primary",
  title: "",
  type: "button"
});

var AccordionItem =
/*#__PURE__*/
function (_PureComponent) {
  inherits(AccordionItem, _PureComponent);

  function AccordionItem(props) {
    var _this;

    classCallCheck(this, AccordionItem);

    _this = possibleConstructorReturn(this, getPrototypeOf(AccordionItem).call(this, props));

    defineProperty(assertThisInitialized(_this), "onClickHandler", function () {
      // Toggle state of being open
      _this.setState(function (prevState) {
        return {
          open: !prevState.open
        };
      });
    });

    _this.state = {
      open: props.defaultOpen
    };
    return _this;
  }

  createClass(AccordionItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          header = _this$props.header,
          children = _this$props.children,
          className = _this$props.className,
          id = _this$props.id,
          name = _this$props.name,
          title = _this$props.title;
      var open = this.state.open;
      var composedClassName = composeClassName(["AccordionItem", !open ? "Collapsed" : "", className]);
      var headerElements = header;

      if (title) {
        headerElements = React__default.createElement(DisplayText, {
          size: "L",
          className: "AccordionItemTitle"
        }, StringUtils.formatMax(title, 110));
      }

      var content = React__default.createElement("div", null, children);

      if (typeof children === "string") {
        content = React__default.createElement(BodyText, {
          size: "M"
        }, children);
      }
      return React__default.createElement("li", {
        className: composedClassName
      }, React__default.createElement("div", {
        className: "AccordionItemHeader"
      }, headerElements, React__default.createElement("div", {
        className: "AccordionItemIcon"
      }, React__default.createElement(ButtonIcon, {
        onClickHandler: this.onClickHandler,
        type: "button",
        title: open ? "collapse" : "expand",
        icon: open ? "chevronUp" : "chevronDown",
        size: "L",
        theme: "Tertiary",
        a11yProps: {
          id: "".concat(name, "-control-").concat(id),
          "aria-expanded": open,
          "aria-controls": "".concat(name, "-content-").concat(id)
        }
      }))), React__default.createElement("div", {
        className: "AccordionItemContent ".concat(!open ? "Collapsed" : ""),
        id: "".concat(name, "-content-").concat(id),
        "aria-hidden": !open,
        "aria-labelledby": "".concat(name, "-control-").concat(id)
      }, content));
    }
  }]);

  return AccordionItem;
}(React.PureComponent);

defineProperty(AccordionItem, "propTypes", {
  className: PropTypes.string,

  /** DEPRECATED: The title displayed on the accordion item */
  title: PropTypes.string,
  id: PropTypes.number.isRequired,
  name: PropTypes.string,
  defaultOpen: PropTypes.bool,

  /** The content of the top of the accordion, which displays when the accordion is collapsed */
  header: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)])
});

defineProperty(AccordionItem, "defaultProps", {
  className: "",
  defaultOpen: false,
  header: []
});

var css$g = ".ButtonContainer .Button.ButtonGhost {\n  border: none;\n  background-color: transparent; }\n";
styleInject(css$g);

var ButtonGhost =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ButtonGhost, _PureComponent);

  function ButtonGhost() {
    classCallCheck(this, ButtonGhost);

    return possibleConstructorReturn(this, getPrototypeOf(ButtonGhost).apply(this, arguments));
  }

  createClass(ButtonGhost, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          children = _this$props.children,
          className = _this$props.className,
          disabled = _this$props.disabled,
          onClickHandler = _this$props.onClickHandler,
          tabIndex = _this$props.tabIndex,
          type = _this$props.type;
      var buttonProps = {
        autoFocus: autoFocus,
        disabled: disabled,
        onClickHandler: onClickHandler,
        tabIndex: tabIndex,
        type: type
      };
      var composedClassName = composeClassName([className, "ButtonGhost"]);
      return React__default.createElement(Button, _extends_1({
        theme: "Tertiary",
        size: "L"
      }, buttonProps, {
        className: composedClassName
      }), React__default.createElement("div", null, React__default.createElement("div", null, children), React__default.createElement(Icon, {
        icon: "chevronDown",
        size: "S"
      })));
    }
  }]);

  return ButtonGhost;
}(React.PureComponent);

defineProperty(ButtonGhost, "propTypes", {
  /** Optional attribute for keyboard Accessibility to fix tabindex issues */
  autoFocus: PropTypes.bool,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  onClickHandler: PropTypes.func,

  /** Optional attribute for keyboard Accessibility */
  tabIndex: PropTypes.string,

  /** The selection for the HTML type of the button */
  type: PropTypes.oneOf(["button", "reset", "submit"])
});

var css$h = ".ButtonContainer .Button.ButtonVideo {\n  width: 180px;\n  height: 100px;\n  background-color: transparent;\n  border-style: none;\n  padding: 0; }\n  .ButtonContainer .Button.ButtonVideo .Circle {\n    margin: auto;\n    width: 64px;\n    height: 64px;\n    border-radius: 50%;\n    background-color: #ffffff;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.5); }\n    .ButtonContainer .Button.ButtonVideo .Circle.Dark {\n      background-color: #19294f; }\n    .ButtonContainer .Button.ButtonVideo .Circle .Icon {\n      margin-top: 18px;\n      margin-left: 23px;\n      fill: #19294f;\n      stroke: #19294f; }\n      .ButtonContainer .Button.ButtonVideo .Circle .Icon.Dark {\n        fill: #ffffff;\n        stroke: #ffffff; }\n  .ButtonContainer .Button.ButtonVideo .DisplayText {\n    padding-top: 10px;\n    width: 180px;\n    color: #ffffff;\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n  .ButtonContainer .Button.ButtonVideo .DisplayText.Dark {\n    color: #19294f; }\n  .ButtonContainer .Button.ButtonVideo:focus {\n    border: 1px solid #00aeef;\n    outline: none; }\n  .ButtonContainer .Button.ButtonVideo:hover, .ButtonContainer .Button.ButtonVideo :active {\n    border-style: none;\n    background-color: transparent; }\n    .ButtonContainer .Button.ButtonVideo:hover .Circle, .ButtonContainer .Button.ButtonVideo :active .Circle {\n      background-color: #19294f; }\n      .ButtonContainer .Button.ButtonVideo:hover .Circle.Dark, .ButtonContainer .Button.ButtonVideo :active .Circle.Dark {\n        background-color: #ffffff; }\n      .ButtonContainer .Button.ButtonVideo:hover .Circle .Icon, .ButtonContainer .Button.ButtonVideo :active .Circle .Icon {\n        fill: #ffffff;\n        stroke: #ffffff; }\n        .ButtonContainer .Button.ButtonVideo:hover .Circle .Icon.Dark, .ButtonContainer .Button.ButtonVideo :active .Circle .Icon.Dark {\n          fill: #19294f;\n          stroke: #19294f; }\n    .ButtonContainer .Button.ButtonVideo:hover .DisplayText, .ButtonContainer .Button.ButtonVideo :active .DisplayText {\n      color: #19294f; }\n      .ButtonContainer .Button.ButtonVideo:hover .DisplayText.Dark, .ButtonContainer .Button.ButtonVideo :active .DisplayText.Dark {\n        color: #ffffff; }\n";
styleInject(css$h);

var ButtonVideo =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ButtonVideo, _PureComponent);

  function ButtonVideo() {
    classCallCheck(this, ButtonVideo);

    return possibleConstructorReturn(this, getPrototypeOf(ButtonVideo).apply(this, arguments));
  }

  createClass(ButtonVideo, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          buttonRef = _this$props.buttonRef,
          onClickHandler = _this$props.onClickHandler,
          autoFocus = _this$props.autoFocus,
          noDisplayText = _this$props.noDisplayText,
          tabIndex = _this$props.tabIndex,
          theme = _this$props.theme;
      var buttonProps = {
        onClickHandler: onClickHandler,
        autoFocus: autoFocus,
        tabIndex: tabIndex,
        buttonRef: buttonRef
      };
      var composedClassName = composeClassName(["ButtonVideo", className]);
      var themeClass = theme === "dark" ? "Dark" : null;
      var playTriangle = React__default.createElement("svg", {
        className: composeClassName(["Icon", themeClass]),
        xmlns: "http://www.w3.org/2000/svg",
        width: "48",
        height: "52",
        viewBox: "0 0 16 16"
      }, React__default.createElement("path", {
        fillRule: "evenodd",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M6.972 4L.5 7.883V.117L6.972 4z"
      }));
      var displayText = noDisplayText ? null : React__default.createElement(DisplayText, {
        className: composeClassName(["DisplayText", themeClass]),
        centered: true,
        size: "M"
      }, "watch the video");
      return React__default.createElement(Button, _extends_1({
        title: noDisplayText ? "Watch the Video" : "",
        className: composedClassName,
        type: "button"
      }, buttonProps), React__default.createElement("div", {
        className: composeClassName(["Circle", themeClass])
      }, playTriangle), displayText);
    }
  }]);

  return ButtonVideo;
}(React.PureComponent);

defineProperty(ButtonVideo, "propTypes", {
  autoFocus: PropTypes.bool,
  buttonRef: PropTypes.shape({
    current: PropTypes.instanceOf(browser.Element)
  }),
  className: PropTypes.string,
  noDisplayText: PropTypes.bool,
  onClickHandler: PropTypes.func,
  tabIndex: PropTypes.string,
  theme: PropTypes.oneOf(["light", "dark"])
});

defineProperty(ButtonVideo, "defaultProps", {
  onClickHandler: null,
  autoFocus: false,
  noDisplayText: false,
  tabIndex: "",
  theme: "light"
});

var css$i = ".ButtonContainer .Button.ButtonCloseModal {\n  position: absolute;\n  right: 30px;\n  top: 30px;\n  width: auto;\n  height: auto;\n  background-color: transparent;\n  border-style: none;\n  padding: 0; }\n  .ButtonContainer .Button.ButtonCloseModal:focus {\n    border: 1px solid #00aeef;\n    outline: none; }\n  .ButtonContainer .Button.ButtonCloseModal:hover, .ButtonContainer .Button.ButtonCloseModal :active {\n    border-style: none;\n    background-color: transparent; }\n  .ButtonContainer .Button.ButtonCloseModal .Icon .ColoredBase:hover {\n    fill: #a8aab7;\n    cursor: pointer; }\n";
styleInject(css$i);

var ButtonCloseModal =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ButtonCloseModal, _PureComponent);

  function ButtonCloseModal() {
    classCallCheck(this, ButtonCloseModal);

    return possibleConstructorReturn(this, getPrototypeOf(ButtonCloseModal).apply(this, arguments));
  }

  createClass(ButtonCloseModal, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ariaLabel = _this$props.ariaLabel,
          autoFocus = _this$props.autoFocus,
          buttonRef = _this$props.buttonRef,
          className = _this$props.className,
          onClickHandler = _this$props.onClickHandler,
          tabIndex = _this$props.tabIndex;
      var buttonProps = {
        ariaLabel: ariaLabel,
        autoFocus: autoFocus,
        buttonRef: buttonRef,
        onClickHandler: onClickHandler,
        tabIndex: tabIndex
      };
      var composedClassName = composeClassName(["ButtonCloseModal", className]);
      return React__default.createElement(Button, _extends_1({
        className: composedClassName
      }, buttonProps), React__default.createElement(Icon, {
        size: "S",
        icon: "close"
      }));
    }
  }]);

  return ButtonCloseModal;
}(React.PureComponent);

var css$j = ".Modal {\n  width: 100%;\n  height: 50%; }\n  @media screen and (min-width: 768px) {\n    .Modal {\n      width: 50%; } }\n";
styleInject(css$j);

var ModalVideo =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ModalVideo, _PureComponent);

  function ModalVideo(props) {
    var _this;

    classCallCheck(this, ModalVideo);

    _this = possibleConstructorReturn(this, getPrototypeOf(ModalVideo).call(this, props));

    defineProperty(assertThisInitialized(_this), "_handleOpenModal", function () {
      _this.setState({
        open: true
      }, function () {
        _this.closeButton.current.focus();
      });
    });

    defineProperty(assertThisInitialized(_this), "_handleCloseModal", function () {
      _this.setState({
        open: false
      }, function () {
        _this.openButton.current.focus();
      });
    });

    _this.state = {
      open: false
    };
    _this.closeButton = React__default.createRef();
    _this.openButton = React__default.createRef();
    return _this;
  }

  createClass(ModalVideo, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          allowFullScreen = _this$props.allowFullScreen,
          className = _this$props.className,
          source = _this$props.source,
          title = _this$props.title,
          videoId = _this$props.videoId,
          theme = _this$props.theme,
          noDisplayText = _this$props.noDisplayText;
      var open = this.state.open;
      return React__default.createElement("div", {
        className: className
      }, React__default.createElement(ButtonVideo, {
        ariaLabel: "Modal Open",
        buttonRef: this.openButton,
        className: "ModalVideoOpen",
        noDisplayText: noDisplayText,
        onClickHandler: this._handleOpenModal,
        theme: theme
      }), React__default.createElement(ModalWrapper, {
        open: open,
        closeHandler: this._handleCloseModal,
        ariaLabel: "Video Modal",
        ariaDescribedBy: "Open video in a modal"
      }, React__default.createElement(VideoPlayer, {
        allowFullScreen: allowFullScreen,
        source: source,
        title: title,
        videoId: videoId,
        autoplay: true
      }), React__default.createElement(ButtonCloseModal, {
        ariaLabel: "Modal Close",
        buttonRef: this.closeButton,
        className: "ModalVideoClose",
        onClickHandler: this._handleCloseModal
      })));
    }
  }]);

  return ModalVideo;
}(React.PureComponent);

defineProperty(ModalVideo, "propTypes", {
  title: PropTypes.string.isRequired,
  videoId: PropTypes.string.isRequired,
  allowFullScreen: PropTypes.bool,
  className: PropTypes.string,
  noDisplayText: PropTypes.bool,
  source: PropTypes.oneOf(["vimeo", "youtube"])
});

var css$k = ".Banner {\n  width: 100%;\n  height: 500px; }\n  @media screen and (min-width: 576px) {\n    .Banner {\n      height: 768px; } }\n  @media screen and (min-width: 768px) {\n    .Banner {\n      height: 1024px; } }\n  @media screen and (min-width: 1024px) {\n    .Banner {\n      height: 576px; } }\n  @media screen and (min-width: 1440px) {\n    .Banner {\n      height: 810px; } }\n  @media screen and (min-width: 2560px) {\n    .Banner {\n      height: 1440px; } }\n  .Banner .BannerBackground {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between; }\n  .Banner .BannerButtonComponent {\n    position: relative;\n    bottom: 25px; }\n";
styleInject(css$k);

var Banner =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Banner, _PureComponent);

  function Banner() {
    classCallCheck(this, Banner);

    return possibleConstructorReturn(this, getPrototypeOf(Banner).apply(this, arguments));
  }

  createClass(Banner, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          buttonText = _this$props.buttonText,
          buttonTheme = _this$props.buttonTheme,
          buttonType = _this$props.buttonType,
          className = _this$props.className,
          imgMobileSource = _this$props.imgMobileSource,
          imgSource = _this$props.imgSource,
          linkHref = _this$props.linkHref,
          linkExternal = _this$props.linkExternal,
          linkTitle = _this$props.linkTitle,
          internalLinkComponent = _this$props.internalLinkComponent,
          socialIcon = _this$props.socialIcon,
          socialIconTheme = _this$props.socialIconTheme,
          titleText = _this$props.titleText,
          titleWhiteText = _this$props.titleWhiteText,
          videoButtonTheme = _this$props.videoButtonTheme,
          videoId = _this$props.videoId,
          videoSource = _this$props.videoSource,
          videoTitle = _this$props.videoTitle;
      var headerComponent = React__default.createElement("div", null);
      var titleComponent;

      if (titleText) {
        titleComponent = React__default.createElement(Container, null, React__default.createElement(Col, {
          xs: {
            span: 12
          }
        }, React__default.createElement(Heading, {
          centered: true,
          className: "BannerTitle",
          size: "XL",
          whiteText: titleWhiteText
        }, titleText)));
      }

      var buttonComponent;

      if (buttonType === "button" && buttonText) {
        buttonComponent = React__default.createElement(Button, {
          theme: buttonTheme
        }, buttonText);
      }

      if (buttonType === "ghost" && buttonText) {
        buttonComponent = React__default.createElement(ButtonGhost, null, buttonText);
      }

      if (linkHref) {
        buttonComponent = React__default.createElement(BaseLink, {
          internalLinkComponent: internalLinkComponent,
          external: linkExternal,
          href: linkHref,
          title: linkTitle
        }, buttonComponent);
      }

      if (buttonType === "social") {
        buttonComponent = React__default.createElement(ButtonIcon, {
          external: linkExternal,
          href: linkHref,
          icon: socialIcon,
          size: "L",
          theme: socialIconTheme,
          internalLinkComponent: internalLinkComponent,
          title: linkTitle
        });
      }

      if (buttonType === "video") {
        buttonComponent = React__default.createElement(ModalVideo, {
          className: "BannerModalVideo",
          source: videoSource,
          videoId: videoId,
          title: videoTitle,
          theme: videoButtonTheme
        });
      }

      return React__default.createElement("div", {
        className: composeClassName(["Banner", className])
      }, React__default.createElement(ImageBackground, {
        className: "BannerBackground",
        source: imgSource,
        mobileSource: imgMobileSource
      }, React__default.createElement("div", {
        className: "BannerHeaderComponent"
      }, headerComponent), React__default.createElement("div", {
        className: "BannerTitleComponent"
      }, titleComponent), React__default.createElement("div", {
        className: "BannerButtonComponent"
      }, buttonComponent)));
    }
  }]);

  return Banner;
}(React.PureComponent);

defineProperty(Banner, "propTypes", {
  className: PropTypes.string,
  imgSource: PropTypes.string.isRequired,
  imgMobileSource: PropTypes.string,
  titleText: PropTypes.string,
  titleWhiteText: PropTypes.bool,
  buttonType: PropTypes.oneOf(["button", "ghost", "video", "social"]),

  /* link doesn't work for buttonType of `video` */
  linkHref: PropTypes.string,
  linkExternal: PropTypes.bool,
  linkTitle: PropTypes.string,
  internalLinkComponent: PropTypes.any,

  /* button options only works if buttonType is `button` */
  buttonTheme: PropTypes.oneOf(["Primary", "Secondary", "Tertiary"]),
  buttonText: PropTypes.string,

  /* socialIcon options only works if buttonType is `social` */
  socialIcon: PropTypes.oneOf(["socialFacebook", "socialInstagram", "socialLinkedIn", "socialPinterest", "socialTwitter", "socialVimeo"]),
  socialIconTheme: PropTypes.oneOf(["Primary", "Tertiary"]),

  /* video options only works if buttonType is `social` */
  videoSource: PropTypes.oneOf(["vimeo", "youtube"]),
  videoId: PropTypes.string,
  videoTitle: PropTypes.string,
  videoButtonTheme: PropTypes.oneOf(["light", "dark"])
});

defineProperty(Banner, "defaultProps", {
  buttonType: "button",
  buttonTheme: "Primary",
  socialIcon: "socialFacebook",
  socialIconTheme: "Primary",
  videoSource: "vimeo",
  videoButtonTheme: "light",
  internalLinkComponent: null
});

var css$l = ".tile {\n  overflow: hidden;\n  height: 225px; }\n  @media screen and (min-width: 768px) {\n    .tile {\n      height: 230px; } }\n  @media screen and (min-width: 1024px) {\n    .tile {\n      height: 285px; } }\n  @media screen and (min-width: 1440px) {\n    .tile {\n      height: 360px; } }\n";
styleInject(css$l);

var BaseTile =
/*#__PURE__*/
function (_PureComponent) {
  inherits(BaseTile, _PureComponent);

  function BaseTile() {
    classCallCheck(this, BaseTile);

    return possibleConstructorReturn(this, getPrototypeOf(BaseTile).apply(this, arguments));
  }

  createClass(BaseTile, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          xs = _this$props.xs,
          md = _this$props.md,
          Link = _this$props.Link,
          LinkTitle = _this$props.LinkTitle,
          internalLinkComponent = _this$props.internalLinkComponent,
          _this$props$whiteText = _this$props.whiteText,
          whiteText = _this$props$whiteText === void 0 ? false : _this$props$whiteText;
      var composedClassName = composeClassName(["tile", className]);

      if (Link) {
        return React__default.createElement(Col, {
          className: composedClassName,
          xs: xs,
          md: md
        }, React__default.createElement(BaseLink, _extends_1({
          internalLinkComponent: internalLinkComponent,
          title: LinkTitle
        }, {
          whiteText: whiteText
        }, Link), children));
      }

      return React__default.createElement(Col, {
        className: composedClassName,
        xs: xs,
        md: md
      }, children);
    }
  }]);

  return BaseTile;
}(React.PureComponent);

defineProperty(BaseTile, "propTypes", {
  className: PropTypes.string,
  children: PropTypes.node.isRequired,
  xs: PropTypes.shape({
    span: PropTypes.number
  }),
  md: PropTypes.shape({
    span: PropTypes.number
  }).isRequired,
  Link: PropTypes.any,
  internalLinkComponent: PropTypes.any
});

defineProperty(BaseTile, "defaultProps", {
  xs: {
    span: 12
  },
  internalLinkComponent: null
});

var css$m = ".BulletList {\n  display: block; }\n  .BulletList .BulletListDivider {\n    width: 268px;\n    margin-left: 0;\n    margin-right: auto; }\n    @media screen and (min-width: 768px) {\n      .BulletList .BulletListDivider {\n        width: 350px; } }\n  .BulletList ul {\n    padding-left: 15px; }\n";
styleInject(css$m);

var BulletList =
/*#__PURE__*/
function (_PureComponent) {
  inherits(BulletList, _PureComponent);

  function BulletList() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, BulletList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(BulletList)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(_this), "_renderTitleSection", function (title) {
      if (undefined !== title && title.length > 0) {
        return React__default.createElement(React__default.Fragment, null, React__default.createElement(DisplayText, {
          size: "M"
        }, title), React__default.createElement(Divider, {
          className: "BulletListDivider"
        }));
      }

      return "";
    });

    return _this;
  }

  createClass(BulletList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          children = _this$props.children,
          className = _this$props.className;
      var composedClassName = composeClassName(["BulletList", className]);
      return React__default.createElement("div", {
        className: composedClassName
      }, this._renderTitleSection(title), React__default.createElement("ul", null, children));
    }
  }]);

  return BulletList;
}(React.PureComponent);

defineProperty(BulletList, "propTypes", {
  className: PropTypes.string,

  /** The title at the top of the list */
  title: PropTypes.string
});

defineProperty(BulletList, "defaultProps", {
  className: ""
});

var css$n = ".BulletListItem {\n  color: #a8aab7; }\n  .BulletListItem .BulletListItemText {\n    color: #19294f; }\n";
styleInject(css$n);

var BulletListItem =
/*#__PURE__*/
function (_PureComponent) {
  inherits(BulletListItem, _PureComponent);

  function BulletListItem() {
    classCallCheck(this, BulletListItem);

    return possibleConstructorReturn(this, getPrototypeOf(BulletListItem).apply(this, arguments));
  }

  createClass(BulletListItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children;
      var composedClassName = composeClassName(["BulletListItem", className]);
      return React__default.createElement("li", {
        className: composedClassName
      }, React__default.createElement(BodyText, {
        className: "BulletListItemText",
        size: "L"
      }, children));
    }
  }]);

  return BulletListItem;
}(React.PureComponent);

defineProperty(BulletListItem, "propTypes", {
  className: PropTypes.string
});

defineProperty(BulletListItem, "defaultProps", {
  className: ""
});

var css$o = ".PageContainer {\n  width: 100%;\n  height: 100%; }\n  .PageContainer .ButtonBackToTop {\n    outline: none;\n    z-index: 200;\n    position: fixed;\n    bottom: 17px;\n    right: 12px; }\n    @media screen and (min-width: 768px) {\n      .PageContainer .ButtonBackToTop {\n        bottom: 30px;\n        right: 18px; } }\n    @media screen and (min-width: 1024px) {\n      .PageContainer .ButtonBackToTop {\n        right: 50px; } }\n    @media screen and (min-width: 1440px) {\n      .PageContainer .ButtonBackToTop {\n        right: 150px; } }\n";
styleInject(css$o);

var ButtonBackToTop =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ButtonBackToTop, _PureComponent);

  function ButtonBackToTop(props) {
    var _this;

    classCallCheck(this, ButtonBackToTop);

    _this = possibleConstructorReturn(this, getPrototypeOf(ButtonBackToTop).call(this, props));

    defineProperty(assertThisInitialized(_this), "_handleOnScroll", function () {
      if (browser.window.pageYOffset >= browser.document.documentElement.offsetHeight / 5) {
        _this.setState({
          scrolled: true
        });
      } else {
        _this.setState({
          scrolled: false
        });
      }
    });

    defineProperty(assertThisInitialized(_this), "_scrollToTop", function () {
      browser.window.scroll({
        top: 0,
        left: 0,
        behavior: "smooth"
      }); // above is not supported by safari, chrome or ie

      smoothscroll.polyfill();
    });

    _this.state = {
      scrolled: false
    };
    return _this;
  }

  createClass(ButtonBackToTop, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      browser.window.onscroll = function () {
        _this2._handleOnScroll();
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var className = this.props.className;
      var scrolled = this.state.scrolled;
      var buttonSize = "L";

      if (browser.window.innerWidth < 1024) {
        buttonSize = "M";
      }

      if (browser.window.innerWidth < 768) {
        buttonSize = "S";
      }

      var composedClassName = composeClassName(["ButtonBackToTop", className]);
      var backToTop = null;

      if (scrolled) {
        backToTop = React__default.createElement(ButtonIcon, {
          className: composedClassName,
          size: buttonSize,
          theme: "Primary",
          icon: "chevronUp",
          title: "Back To Top",
          tabIndex: "-1",
          onClickHandler: function onClickHandler() {
            _this3._scrollToTop();
          }
        });
      }

      return React__default.createElement("div", {
        className: "PageContainer"
      }, backToTop);
    }
  }]);

  return ButtonBackToTop;
}(React.PureComponent);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var css$p = ".ButtonLink {\n  display: inline-block; }\n";
styleInject(css$p);

var ButtonLink =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ButtonLink, _PureComponent);

  function ButtonLink() {
    classCallCheck(this, ButtonLink);

    return possibleConstructorReturn(this, getPrototypeOf(ButtonLink).apply(this, arguments));
  }

  createClass(ButtonLink, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          theme = _this$props.theme,
          size = _this$props.size,
          autoFocus = _this$props.autoFocus,
          ariaLabel = _this$props.ariaLabel,
          disabled = _this$props.disabled,
          tabIndex = _this$props.tabIndex,
          children = _this$props.children,
          linkProps = objectWithoutProperties(_this$props, ["className", "theme", "size", "autoFocus", "ariaLabel", "disabled", "tabIndex", "children"]);

      var composedClassName = composeClassName(["ButtonLink", className]);
      return React__default.createElement(BaseLink, _extends_1({}, linkProps, {
        className: composedClassName
      }), React__default.createElement(Button, {
        size: size,
        theme: theme,
        autoFocus: autoFocus,
        disabled: disabled,
        type: "button",
        ariaLabel: ariaLabel,
        tabIndex: tabIndex
      }, children));
    }
  }]);

  return ButtonLink;
}(React.PureComponent);

defineProperty(ButtonLink, "propTypes", {
  /** The selection for the theme of the button */
  theme: PropTypes.oneOf(["Primary", "Secondary", "Tertiary"]),

  /** The selection for the size of the button */
  size: PropTypes.oneOf(["L", "M", "S"]),
  className: PropTypes.string,

  /** Optional attribute for keyboard Accessibility to fix tabindex issues */
  autoFocus: PropTypes.bool,
  ariaLabel: PropTypes.string,
  disabled: PropTypes.bool,

  /** Optional attribute for keyboard Accessibility */
  tabIndex: PropTypes.string,

  /** The link destination - a relative path for internal links, or absolute for external links */
  href: PropTypes.string,

  /** Whether or not the link's destination is on a separate site */
  external: PropTypes.bool,

  /** The component used as the internal link handler when `internal` is true */
  internalLinkComponent: PropTypes.any,

  /** The title attribute of the anchor tag */
  title: PropTypes.string
});

defineProperty(ButtonLink, "defaultProps", {
  autoFocus: false,
  className: "",
  disabled: false,
  size: "M",
  theme: "Primary",
  href: "",
  external: false,
  internalLinkComponent: null,
  title: ""
});

var css$q = ".Content {\n  display: flex;\n  word-wrap: break-word;\n  flex-direction: column;\n  text-align: left;\n  max-width: 100%; }\n  .Content .ContentTitle {\n    margin-top: 8px;\n    margin-bottom: 16px; }\n    @media screen and (min-width: 768px) {\n      .Content .ContentTitle {\n        margin-top: 16px;\n        margin-bottom: 0px; } }\n  .Content .ContentBody {\n    margin-top: 16px; }\n  .Content .Buttons {\n    width: 100%;\n    margin-top: 8px;\n    align-items: center;\n    justify-content: center; }\n    @media screen and (min-width: 768px) {\n      .Content .Buttons {\n        flex-direction: row;\n        justify-content: flex-start;\n        margin-top: 8px;\n        display: flex; } }\n    .Content .Buttons .ButtonLink {\n      display: flex;\n      flex: 1 0 100%;\n      width: 100%;\n      max-width: 360px;\n      margin-top: 8px;\n      margin-left: auto;\n      margin-right: auto; }\n      @media screen and (min-width: 768px) {\n        .Content .Buttons .ButtonLink {\n          text-align: left;\n          margin: 0; }\n          .Content .Buttons .ButtonLink.Two {\n            flex: 1 0 calc(50% - 8px); } }\n    @media screen and (min-width: 768px) and (min-width: 1024px) {\n      .Content .Buttons .ButtonLink.Two {\n        flex: 1 0 calc(50% - 16px); } }\n      .Content .Buttons .ButtonLink .ButtonContainer {\n        width: 100%;\n        max-width: 360px; }\n        .Content .Buttons .ButtonLink .ButtonContainer .Button {\n          width: 100%;\n          max-width: 360px;\n          text-align: center; }\n    @media screen and (min-width: 768px) {\n      .Content .Buttons .ButtonLink:nth-of-type(2) {\n        margin-left: 16px; } }\n    @media screen and (min-width: 1024px) {\n      .Content .Buttons .ButtonLink:nth-of-type(2) {\n        margin-left: 32px; } }\n";
styleInject(css$q);

var ContentAligned =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ContentAligned, _PureComponent);

  function ContentAligned() {
    classCallCheck(this, ContentAligned);

    return possibleConstructorReturn(this, getPrototypeOf(ContentAligned).apply(this, arguments));
  }

  createClass(ContentAligned, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          tag = _this$props.tag,
          title = _this$props.title,
          body = _this$props.body,
          bodySize = _this$props.bodySize,
          button1Theme = _this$props.button1Theme,
          button1Text = _this$props.button1Text,
          button2Theme = _this$props.button2Theme,
          button2Text = _this$props.button2Text,
          href1 = _this$props.href1,
          internalLinkComponent1 = _this$props.internalLinkComponent1,
          link1Title = _this$props.link1Title,
          linkExternal1 = _this$props.linkExternal1,
          href2 = _this$props.href2,
          internalLinkComponent2 = _this$props.internalLinkComponent2,
          link2Title = _this$props.link2Title,
          linkExternal2 = _this$props.linkExternal2,
          textCols = _this$props.textCols;
      var link1Props = {
        href: href1,
        internalLinkComponent: internalLinkComponent1,
        title: link1Title,
        external: linkExternal1
      };
      var link2Props = {
        href: href2,
        internalLinkComponent: internalLinkComponent2,
        title: link2Title,
        external: linkExternal2
      };
      var composedClassName = composeClassName(["Content", className]);
      var button1 = null;
      var button2 = null;

      if (button1Text) {
        button1 = React__default.createElement(ButtonLink, _extends_1({
          className: "ContentButton",
          theme: button1Theme
        }, link1Props), button1Text);
      }

      if (button1Text && button2Text) {
        button1 = React__default.createElement(ButtonLink, _extends_1({
          className: "ContentButton Two",
          theme: button1Theme
        }, link1Props), button1Text);
        button2 = React__default.createElement(ButtonLink, _extends_1({
          className: "ContentButton Two",
          theme: button2Theme
        }, link2Props), button2Text);
      }

      var tagElement = tag ? React__default.createElement(DisplayText, {
        size: "M",
        className: "ContentSubtitle"
      }, StringUtils.formatMax(tag, 30)) : null;
      var titleElement = title ? React__default.createElement(Heading, {
        size: "M",
        className: "ContentTitle"
      }, title) : null;
      var bodyElement = body ? React__default.createElement(BodyText, {
        size: bodySize,
        className: "ContentBody"
      }, body) : null;
      var buttonElements = button1 || button2 ? React__default.createElement("div", {
        className: "Buttons"
      }, button1, button2) : null;
      return React__default.createElement(Col, {
        className: composedClassName,
        xs: {
          span: 12
        },
        md: {
          span: textCols
        }
      }, tagElement, titleElement, bodyElement, buttonElements);
    }
  }]);

  return ContentAligned;
}(React.PureComponent);

defineProperty(ContentAligned, "propTypes", {
  className: PropTypes.string,
  tag: PropTypes.string,
  title: PropTypes.string,
  body: PropTypes.string.isRequired,
  bodySize: PropTypes.string,
  button1Theme: PropTypes.oneOf(["Primary", "Secondary", "Tertiary"]),
  button1Text: PropTypes.string,
  button2Theme: PropTypes.oneOf(["Primary", "Secondary", "Tertiary"]),
  button2Text: PropTypes.string,
  href1: PropTypes.string,
  internalLinkComponent1: PropTypes.any,
  link1Title: PropTypes.string,
  linkExternal1: PropTypes.bool,
  href2: PropTypes.string,
  internalLinkComponent2: PropTypes.any,
  link2Title: PropTypes.string,
  linkExternal2: PropTypes.bool,
  textCols: PropTypes.number
});

defineProperty(ContentAligned, "defaultProps", {
  tag: "",
  title: "",
  button1Theme: "Tertiary",
  button1Text: null,
  button2Theme: "Tertiary",
  button2Text: null,
  link1Title: "",
  linkExternal1: false,
  link2Title: "",
  linkExternal2: false,
  textCols: 6
});

var css$r = ".ContentImage {\n  width: 100%;\n  position: relative; }\n  .ContentImage.OneToOne {\n    padding-top: 100%; }\n  .ContentImage.FourToThree {\n    padding-top: 75%; }\n  .ContentImage.SixteenToNine {\n    padding-top: 56.25%; }\n  .ContentImage .Image {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    align-items: center;\n    display: flex;\n    flex-direction: column; }\n  .ContentImage .PlayButton {\n    position: relative;\n    top: calc(50% - 50px); }\n";
styleInject(css$r);

var ContentImage =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ContentImage, _PureComponent);

  function ContentImage() {
    classCallCheck(this, ContentImage);

    return possibleConstructorReturn(this, getPrototypeOf(ContentImage).apply(this, arguments));
  }

  createClass(ContentImage, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          imgAltText = _this$props.imgAltText,
          imgMobileSource = _this$props.imgMobileSource,
          imgSource = _this$props.imgSource,
          imgLongDesc = _this$props.imgLongDesc,
          videoButtonTheme = _this$props.videoButtonTheme,
          videoId = _this$props.videoId,
          videoSource = _this$props.videoSource,
          videoTitle = _this$props.videoTitle,
          aspectRatio = _this$props.aspectRatio,
          imageCols = _this$props.imageCols;
      var imageBackgroundProps = {
        mobileSource: imgMobileSource,
        source: imgSource
      };
      var imageProps = {
        altText: imgAltText,
        mobileSource: imgMobileSource,
        source: imgSource,
        longdesc: imgLongDesc
      };
      var modalProps = {
        source: videoSource,
        videoId: videoId,
        title: videoTitle,
        theme: videoButtonTheme
      };
      var composedClassName = composeClassName([className, "ContentImage", aspectRatio]);
      var imageComponent = React__default.createElement(Image, imageProps);

      if (videoId && videoTitle) {
        imageComponent = React__default.createElement(ImageBackground, _extends_1({
          className: "Image"
        }, imageBackgroundProps), React__default.createElement(ModalVideo, _extends_1({
          className: "PlayButton"
        }, modalProps)));
      }

      return React__default.createElement(Col, {
        xs: {
          span: 12
        },
        md: {
          span: imageCols
        }
      }, React__default.createElement("div", {
        className: composedClassName
      }, imageComponent));
    }
  }]);

  return ContentImage;
}(React.PureComponent);

defineProperty(ContentImage, "propTypes", {
  className: PropTypes.string,
  videoSource: PropTypes.oneOf(["vimeo", "youtube"]),
  videoId: PropTypes.string,
  videoTitle: PropTypes.string,
  videoButtonTheme: PropTypes.oneOf(["light", "dark"]),
  imgAltText: PropTypes.string,
  imgSource: PropTypes.string.isRequired,
  imgLongDesc: PropTypes.string,
  imgMobileSource: PropTypes.string,
  aspectRatio: PropTypes.oneOf(["OneToOne", "FourToThree", "SixteenToNine"]),
  imageCols: PropTypes.number
});

defineProperty(ContentImage, "defaultProps", {
  videoSource: "vimeo",
  videoId: null,
  videoTitle: null,
  videoButtonTheme: "light",
  imgMobileSource: "",
  imgLongDesc: "",
  aspectRatio: "OneToOne"
});

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var objectSpread = _objectSpread;

var FormValidations = function FormValidations() {
  classCallCheck(this, FormValidations);
};

defineProperty(FormValidations, "defaultMessages", {
  required: "This field is required.",
  email: "Please enter a valid email."
});

defineProperty(FormValidations, "required", function (_ref) {
  var value = _ref.value,
      _ref$emptyValue = _ref.emptyValue,
      emptyValue = _ref$emptyValue === void 0 ? "" : _ref$emptyValue;
  return value !== emptyValue;
});

defineProperty(FormValidations, "email", function (_ref2) {
  var value = _ref2.value;
  var regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
  return regex.test(String(value).toLowerCase());
});

var asFormElement = function asFormElement(Element, FormContext) {
  var _class, _temp;

  // eslint-disable-next-line react/no-multi-comp
  return _temp = _class =
  /*#__PURE__*/
  function (_PureComponent) {
    inherits(AsForm, _PureComponent);

    function AsForm(_props, _context) {
      var _this;

      classCallCheck(this, AsForm);

      _this = possibleConstructorReturn(this, getPrototypeOf(AsForm).call(this, _props));

      defineProperty(assertThisInitialized(_this), "_constructValidations", function (props, context) {
        var name = props.name,
            _props$initialValue = props.initialValue,
            initialValue = _props$initialValue === void 0 ? "" : _props$initialValue,
            required = props.required,
            _props$emptyValue = props.emptyValue,
            emptyValue = _props$emptyValue === void 0 ? "" : _props$emptyValue;
        var _props$validateAgains = props.validateAgainst,
            validateAgainst = _props$validateAgains === void 0 ? {} : _props$validateAgains;
        var validateAgainstObject = {}; // Process validation object on element for use in form

        if (Object.keys(validateAgainst).length > 0) {
          Object.keys(validateAgainst).forEach(function (key) {
            // Set message to default if not provided
            var message = typeof validateAgainst[key] === "boolean" ? FormValidations.defaultMessages[key] : validateAgainst[key];
            validateAgainstObject[key] = {
              error: false,
              fn: FormValidations[key],
              message: message
            };
          });
        } // Add required shorthand to the object


        if (required) {
          // Set message to default if not provided
          var message = typeof required === "boolean" ? FormValidations.defaultMessages.required : required;
          validateAgainstObject.required = {
            error: false,
            fn: FormValidations.required,
            emptyValue: emptyValue,
            message: message
          };
        } // Register to the Form state


        var register = context.register;
        register(name, initialValue, validateAgainstObject);
      });

      defineProperty(assertThisInitialized(_this), "_isApproved", function (submitAttempts, error) {
        if (submitAttempts > 0) {
          if (!error) return error;
        }

        return false;
      });

      if (typeof _context.register === "function") {
        _this._constructValidations(_props, _context);
      }

      return _this;
    }

    createClass(AsForm, [{
      key: "render",
      value: function render() {
        // If there is no Form context to register to, just return the element.
        var _this$context = this.context,
            onChange = _this$context.onChange,
            register = _this$context.register,
            submitAttempts = _this$context.submitAttempts,
            validations = _this$context.validations,
            values = _this$context.values;

        if (typeof register !== "function") {
          return React__default.createElement(Element, this.props);
        } // Pass down element's value


        var name = this.props.name;
        var value = values[name]; // Pass error, message, and approved as expected by elements

        var error = _typeof_1(validations[name]) === "object" ? validations[name].error : false;
        var message = _typeof_1(validations[name]) === "object" ? validations[name].message : "This field has an error";

        var approved = this._isApproved(submitAttempts, error); // Props-proxy


        return React__default.createElement(Element, _extends_1({}, this.props, {
          approved: approved,
          error: error,
          message: message,
          onChangeHandler: onChange,
          value: value
        }));
      }
    }]);

    return AsForm;
  }(React.PureComponent), defineProperty(_class, "contextType", FormContext), defineProperty(_class, "propTypes", objectSpread({
    name: PropTypes.string.isRequired,
    value: PropTypes.any
  }, Element.propTypes)), defineProperty(_class, "defaultProps", objectSpread({
    value: ""
  }, Element.defaultProps)), _temp;
};

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var regenerator = runtime_1;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var asyncToGenerator = _asyncToGenerator;

var FormContext = React__default.createContext({});

var Form =
/*#__PURE__*/
function (_Component) {
  inherits(Form, _Component);

  function Form(props) {
    var _this;

    classCallCheck(this, Form);

    _this = possibleConstructorReturn(this, getPrototypeOf(Form).call(this, props)); // State will hold the values and validations,
    // and be the single source of truth for the entire form

    defineProperty(assertThisInitialized(_this), "register", function (name, initialValue, validateAgainst) {
      var _this$state = _this.state,
          values = _this$state.values,
          validations = _this$state.validations,
          initialValues = _this$state.initialValues; // Sets values into state

      values[name] = initialValue;
      initialValues[name] = initialValue; // Sets validations for field into state

      if (validateAgainst) {
        validations[name] = {
          error: false,
          message: false,
          validateAgainst: validateAgainst
        };
      }

      _this.setState({
        values: values,
        validations: validations,
        initialValues: initialValues
      });
    });

    defineProperty(assertThisInitialized(_this), "handleOnChange", function (_ref) {
      var name = _ref.name,
          value = _ref.value;
      var _this$state2 = _this.state,
          values = _this$state2.values,
          validations = _this$state2.validations,
          formIsValid = _this$state2.formIsValid;
      values[name] = value; // Only checks for validity on keypress if the form has been submitted.
      // TODO: Track error and message state throughout,
      // only display on submit - otherwise there is a lag

      if (!formIsValid && validations[name]) {
        validations[name] = _this._validate(value, validations[name]);
      }

      _this.setState({
        values: values,
        validations: validations
      });
    });

    defineProperty(assertThisInitialized(_this), "_validate", function (value, validations) {
      var checkedValidations = objectSpread({}, validations);

      checkedValidations.error = false;
      checkedValidations.message = false;
      var validateAgainst = validations.validateAgainst; // Iterate over all the validations from a field

      Object.keys(validateAgainst).forEach(function (key) {
        var emptyValue = validateAgainst[key].emptyValue;
        var isError = !validateAgainst[key].fn({
          value: value,
          emptyValue: emptyValue
        });
        checkedValidations.validateAgainst[key].error = isError;
        checkedValidations.error = checkedValidations.error || isError; // If there's an error, set the message for the field to it

        if (isError) {
          var message = validateAgainst[key].message;
          checkedValidations.message = typeof message === "string" ? message : message();
        }
      }); // Required always takes precedence for error messages if it's in error.

      if (checkedValidations.error && checkedValidations.required && checkedValidations.required.error) {
        var message = checkedValidations.required.message;
        checkedValidations.message = typeof message === "string" ? message : message();
      }

      return checkedValidations;
    });

    defineProperty(assertThisInitialized(_this), "_encode", function (data) {
      return Object.keys(data).map(function (key) {
        return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(data[key]));
      }).join("&");
    });

    defineProperty(assertThisInitialized(_this), "_sendForm",
    /*#__PURE__*/
    function () {
      var _ref2 = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee(data) {
        var _this$props, submitUrl, headers, method, formEncode, formData, response;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = _this.props, submitUrl = _this$props.submitUrl, headers = _this$props.headers, method = _this$props.method, formEncode = _this$props.formEncode;
                formData = data;

                if (formEncode) {
                  headers["Content-Type"] = "application/x-www-form-urlencoded";
                  formData = _this._encode(data);
                } else {
                  headers["Content-Type"] = "application/json";
                }

                _context.next = 6;
                return axios({
                  url: submitUrl,
                  method: method,
                  headers: headers,
                  data: formData
                });

              case 6:
                response = _context.sent;
                return _context.abrupt("return", response);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());

    defineProperty(assertThisInitialized(_this), "_getFormValidStatus", function (values, validations) {
      var formIsValid = true;

      var newValidations = objectSpread({}, validations); // validate all the fields


      Object.keys(validations).forEach(function (name) {
        var validated = _this._validate(values[name], validations[name]);

        newValidations[name] = validated;
        formIsValid = formIsValid && !validated.error;
      });
      return {
        formIsValid: formIsValid,
        newValidations: newValidations
      };
    });

    defineProperty(assertThisInitialized(_this), "_handleSubmit", function (event) {
      event.preventDefault();
      var _this$state3 = _this.state,
          validations = _this$state3.validations,
          values = _this$state3.values,
          initialValues = _this$state3.initialValues,
          submitAttempts = _this$state3.submitAttempts;
      var _this$props2 = _this.props,
          onSubmit = _this$props2.onSubmit,
          formEncode = _this$props2.formEncode,
          formName = _this$props2.formName,
          submitUrl = _this$props2.submitUrl;

      var _this$_getFormValidSt = _this._getFormValidStatus(values, validations),
          formIsValid = _this$_getFormValidSt.formIsValid,
          newValidations = _this$_getFormValidSt.newValidations;

      _this.setState({
        formIsValid: formIsValid,
        validations: newValidations,
        submitAttempts: submitAttempts + 1
      },
      /*#__PURE__*/
      asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee2() {
        var data, response;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                data = objectSpread({
                  "form-name": formName
                }, values); // If the form is invalid, don't do anything else except call the parents onSubmit

                if (formIsValid) {
                  _context2.next = 4;
                  break;
                }

                if (onSubmit) {
                  onSubmit(data, false);
                }

                return _context2.abrupt("return");

              case 4:
                if (!submitUrl) {
                  _context2.next = 10;
                  break;
                }

                _context2.next = 7;
                return _this._sendForm(data);

              case 7:
                response = _context2.sent;

                if (onSubmit) {
                  onSubmit(data, response.statusCode);
                } // TODO: provide real error catching


                if (response.status !== 200) {
                  _this.setState({
                    fetchFailure: true,
                    fetchSuccessful: false
                  });
                } else {
                  _this.setState({
                    fetchSuccessful: true,
                    fetchFailure: false,
                    values: initialValues
                  });
                }

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
    });

    _this.state = {
      values: {},
      validations: {},
      formIsValid: true,
      fetchSuccessful: false,
      fetchFailure: false,
      submitAttempts: 0,
      initialValues: {} // Lets us reset the form

    };
    return _this;
  } // Passed to fields via context so they can register to the form state.


  createClass(Form, [{
    key: "render",
    value: function render() {
      var _this$state4 = this.state,
          values = _this$state4.values,
          validations = _this$state4.validations,
          submitAttempts = _this$state4.submitAttempts;
      var _this$props3 = this.props,
          children = _this$props3.children,
          formName = _this$props3.formName,
          _this$props3$dataAttr = _this$props3.dataAttr,
          dataAttr = _this$props3$dataAttr === void 0 ? {} : _this$props3$dataAttr; // Render the context and the form

      return React__default.createElement(FormContext.Provider, {
        value: {
          register: this.register,
          onChange: this.handleOnChange,
          values: values,
          validations: validations,
          submitAttempts: submitAttempts
        }
      }, React__default.createElement("form", _extends_1({
        onSubmit: this._handleSubmit,
        name: formName,
        noValidate: true // Turns off browser validation

      }, dataAttr), children));
    }
  }]);

  return Form;
}(React.Component);

defineProperty(Form, "propTypes", {
  formName: PropTypes.string.isRequired,
  formEncode: PropTypes.bool,
  headers: PropTypes.object,
  method: PropTypes.oneOf(["POST", "GET", "PUT"]),
  onSubmit: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  submitUrl: PropTypes.string
});

defineProperty(Form, "defaultProps", {
  formEncode: false,
  headers: {},
  method: "POST",
  onSubmit: false,
  submitUrl: "/"
});

var css$s = ".InputContainer .ErrorMessage {\n  height: 16px;\n  line-height: 16px;\n  font-size: 12px;\n  color: #e41647; }\n  @media screen and (min-width: 1024px) {\n    .InputContainer .ErrorMessage {\n      height: 24px;\n      line-height: 24px; } }\n\n.InputContainer .InputGroup {\n  width: 240px;\n  outline: none;\n  border: none;\n  position: relative;\n  background-color: transparent;\n  display: flex; }\n  .InputContainer .InputGroup .Input {\n    border: 1px solid #dbdcdf;\n    padding: 0 10px 0 12px;\n    width: 240px;\n    box-sizing: border-box;\n    height: 48px;\n    font-family: MercuryTextG1;\n    font-weight: 600;\n    font-size: 12px;\n    letter-spacing: 0.5px;\n    color: #19294f;\n    caret-color: #00aeef;\n    outline: none; }\n    .InputContainer .InputGroup .Input.approved {\n      border: 1px solid #0d7f50; }\n    .InputContainer .InputGroup .Input.error {\n      border: 1px solid #e41647; }\n      .InputContainer .InputGroup .Input.error .ColoredBase {\n        fill: #e41647; }\n    .InputContainer .InputGroup .Input:hover:not(.error) {\n      border: 1px solid #c5d0de;\n      cursor: text; }\n    .InputContainer .InputGroup .Input:focus {\n      border: 1px solid #00aeef; }\n    .InputContainer .InputGroup .Input:active {\n      border: 1px solid #00aeef; }\n    .InputContainer .InputGroup .Input:disabled {\n      background-color: #e9edf1;\n      border: 1px solid #dbdcdf;\n      cursor: not-allowed; }\n  .InputContainer .InputGroup .Icon {\n    position: absolute;\n    right: 15px;\n    top: 13px;\n    z-index: 2; }\n    .InputContainer .InputGroup .Icon.S {\n      max-height: 16px; }\n    .InputContainer .InputGroup .Icon.M {\n      max-height: 32px; }\n    .InputContainer .InputGroup .Icon.L {\n      max-height: 64px; }\n  .InputContainer .InputGroup.error .Icon .ColoredBase {\n    fill: #e41647; }\n  .InputContainer .InputGroup.approved .Icon .ColoredBase {\n    fill: #0d7f50; }\n";
styleInject(css$s);

var Input =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Input, _PureComponent);

  function Input() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Input);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(_this), "_onChange", function (event) {
      event.preventDefault();
      var target = event.target;
      var value = target.value;
      var name = _this.props.name;

      _this.props.onChangeHandler({
        name: name,
        value: value
      }); // eslint-disable-line

    });

    return _this;
  }

  createClass(Input, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          approved = _this$props.approved,
          className = _this$props.className,
          disabled = _this$props.disabled,
          error = _this$props.error,
          icon = _this$props.icon,
          label = _this$props.label,
          name = _this$props.name,
          placeholder = _this$props.placeholder,
          title = _this$props.title,
          value = _this$props.value,
          message = _this$props.message,
          type = _this$props.type,
          whiteText = _this$props.whiteText;
      var labelProps = {
        label: label,
        whiteText: whiteText
      };
      var composedClassName = composeClassName(["Input", approved ? "approved" : "", error ? "error" : "", className]);
      var iconComponent = null;
      var noIconStyles = {
        width: "100%"
      };

      if (icon) {
        var iconProps = {
          icon: icon
        };
        noIconStyles = null;
        iconComponent = React__default.createElement(Icon, _extends_1({
          size: "S"
        }, iconProps));
      }

      if (error) {
        noIconStyles = null;
        iconComponent = React__default.createElement(Icon, {
          size: "S",
          icon: "close"
        });
      }

      if (approved) {
        noIconStyles = null;
        iconComponent = React__default.createElement(Icon, {
          size: "S",
          icon: "checkmark"
        });
      }

      var htmlFor = name;
      var inputGroupClassName = composeClassName(["InputGroup", approved ? "approved" : "", error ? "error" : ""]);
      return React__default.createElement("div", {
        className: "InputContainer"
      }, React__default.createElement(Label, _extends_1({
        htmlFor: htmlFor
      }, labelProps), React__default.createElement("div", {
        className: inputGroupClassName
      }, React__default.createElement("input", {
        className: composedClassName,
        disabled: disabled,
        id: htmlFor,
        name: name,
        onChange: this._onChange,
        placeholder: placeholder,
        style: noIconStyles,
        title: title,
        type: type,
        value: value
      }), iconComponent), React__default.createElement(BodyText, {
        size: "S",
        className: "ErrorMessage",
        whiteText: whiteText
      }, message)));
    }
  }]);

  return Input;
}(React.PureComponent);

defineProperty(Input, "propTypes", {
  /** Indicates if the user input is accepted */
  approved: PropTypes.bool,
  className: PropTypes.string,
  disabled: PropTypes.bool,

  /** Indicates if there is an error in the user input */
  error: PropTypes.bool,
  icon: PropTypes.string,
  label: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
  onChangeHandler: PropTypes.func,
  placeholder: PropTypes.string,

  /** Indicate purpose of text input for accessibility */
  title: PropTypes.string.isRequired,
  value: PropTypes.string,
  initialValue: PropTypes.string,
  type: PropTypes.oneOf(["text", "email", "hidden"]),

  /** Shorthand for required.
   * String or Function that returns a string is the error message displayed
   * If boolean, default error message is used. */
  required: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.bool]),
  emptyValue: PropTypes.any,

  /** Defined keys are validated against using standard validators.
   * String or Function that returns a string is the error message displayed
   * If boolean, default error message is used. */
  validateAgainst: PropTypes.object
});

defineProperty(Input, "defaultProps", {
  approved: false,
  className: "",
  disabled: false,
  error: false,
  icon: "",
  placeholder: "",
  initialValue: "",
  emptyValue: ""
});

var Input$1 = asFormElement(Input, FormContext);

var InputHidden = function InputHidden(_ref) {
  var name = _ref.name,
      value = _ref.value,
      onChangeHandler = _ref.onChangeHandler;
  return React__default.createElement("input", {
    type: "hidden",
    name: name,
    value: value,
    onChange: onChangeHandler
  });
};

var InputHidden$1 = asFormElement(InputHidden, FormContext);

var InputText = function InputText(props) {
  var inputTextProps = objectSpread({}, props, {
    type: "text"
  });

  return React__default.createElement(Input$1, inputTextProps);
};

var InputEmail = function InputEmail(props) {
  var _props$validateAgains = props.validateAgainst,
      validateAgainst = _props$validateAgains === void 0 ? {} : _props$validateAgains;
  var email = validateAgainst.email,
      required = validateAgainst.required;
  validateAgainst.email = email || true;
  validateAgainst.required = required || true;

  var inputEmailProps = objectSpread({}, props, {
    type: "email",
    validateAgainst: validateAgainst
  });

  return React__default.createElement(Input$1, inputEmailProps);
};

var css$t = ".InputDropdown {\n  width: 240px;\n  height: 36px; }\n  .InputDropdown .DropdownSelect {\n    border: #dbdcdf solid 1px;\n    font-family: MercuryTextG1;\n    font-weight: 600;\n    font-size: 14px;\n    height: 100%;\n    padding-left: 14px;\n    width: 100%;\n    color: #19294f; }\n  .InputDropdown .Error {\n    border: #e41647 solid 1px; }\n  .InputDropdown .DropdownSelect:hover {\n    border: #c5d0de solid 1px; }\n  .InputDropdown .DropdownSelect:focus {\n    border: #00aeef solid 1px;\n    color: #19294f; }\n  .InputDropdown .DropdownSelect[disabled] {\n    background-color: #e9edf1;\n    border: rgba(0, 0, 0, 0.1) solid 1px;\n    color: #516173;\n    font-family: MercuryTextG1 600 normal; }\n  .InputDropdown .DropdownItem {\n    background-color: #ffffff;\n    color: #19294f;\n    font-family: MercuryTextG1;\n    font-weight: 600;\n    padding-left: 13px; }\n  .InputDropdown .DropdownItem:checked {\n    background-color: #f1f4f8; }\n";
styleInject(css$t);

var InputDropdown =
/*#__PURE__*/
function (_PureComponent) {
  inherits(InputDropdown, _PureComponent);

  function InputDropdown() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, InputDropdown);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(InputDropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(_this), "_onChange", function (event) {
      event.preventDefault();
      var _this$props = _this.props,
          onChangeHandler = _this$props.onChangeHandler,
          name = _this$props.name;
      var target = event.target;
      var value = target.value;
      onChangeHandler({
        name: name,
        value: value
      });
    });

    return _this;
  }

  createClass(InputDropdown, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          disabled = _this$props2.disabled,
          error = _this$props2.error,
          name = _this$props2.name,
          value = _this$props2.value,
          options = _this$props2.options,
          placeholder = _this$props2.placeholder;
      var composedClassName = composeClassName(["InputDropdown", className]);
      var optionItems = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var option = _step.value;
          optionItems.push(React__default.createElement("option", {
            className: "DropdownItem",
            key: option.value,
            value: option.value
          }, option.label));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var optionPlaceholder;

      if (placeholder) {
        optionPlaceholder = React__default.createElement("option", {
          className: "DropdownPlaceholder",
          "default": true,
          hidden: true,
          value: ""
        }, placeholder);
      }

      return React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement("select", {
        className: "DropdownSelect ".concat(error ? "Error" : ""),
        name: name,
        disabled: disabled // eslint-disable-next-line arrow-body-style
        ,
        onChange: this._onChange,
        value: value
      }, optionPlaceholder, optionItems));
    }
  }]);

  return InputDropdown;
}(React.PureComponent);

defineProperty(InputDropdown, "propTypes", {
  className: PropTypes.string,
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  name: PropTypes.string.isRequired,
  onChangeHandler: PropTypes.func,
  placeholder: PropTypes.string,

  /** List of option object */
  options: PropTypes.arrayOf(PropTypes.shape({
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    label: PropTypes.string.isRequired
  })).isRequired,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
});

defineProperty(InputDropdown, "defaultProps", {
  disabled: false,
  error: false
});

var InputDropdown$1 = asFormElement(InputDropdown, FormContext);

/* Splitting fields into a seperate folder, like we talked about.
 * The forms will be it's own repository, and will have dependency
 * on the SCL for the label. We may want to have "naked" versions of these fields too.
 * Split things into this folder as neccesary until we do the full split.
 */

var css$u = ".DownloadContainer {\n  width: 100%;\n  margin: 0 16px; }\n  .DownloadContainer .DownloadContent {\n    display: flex;\n    flex-wrap: wrap;\n    margin: 15px 0; }\n    @media screen and (min-width: 768px) {\n      .DownloadContainer .DownloadContent {\n        flex-wrap: nowrap; } }\n    .DownloadContainer .DownloadContent .DownloadInfo {\n      display: flex;\n      flex: 1 0 100%; }\n      @media screen and (min-width: 768px) {\n        .DownloadContainer .DownloadContent .DownloadInfo {\n          flex: 1 0 40%; } }\n    .DownloadContainer .DownloadContent .Image {\n      height: 100px;\n      width: 75px; }\n      @media screen and (min-width: 576px) {\n        .DownloadContainer .DownloadContent .Image {\n          height: 75px;\n          width: 56.25px; } }\n      @media screen and (min-width: 768px) {\n        .DownloadContainer .DownloadContent .Image {\n          height: 90px;\n          width: 67.5px; } }\n      @media screen and (min-width: 1024px) {\n        .DownloadContainer .DownloadContent .Image {\n          height: 110px;\n          width: 82.5px; } }\n    .DownloadContainer .DownloadContent .DownloadDescription {\n      margin-left: 8px; }\n      @media screen and (min-width: 576px) {\n        .DownloadContainer .DownloadContent .DownloadDescription {\n          margin-right: 24px; } }\n      @media screen and (min-width: 768px) {\n        .DownloadContainer .DownloadContent .DownloadDescription {\n          margin: 0 36px 0 12px; } }\n      @media screen and (min-width: 1024px) {\n        .DownloadContainer .DownloadContent .DownloadDescription {\n          margin: 0 36px 0 16px; } }\n    .DownloadContainer .DownloadContent .DownloadButton, .DownloadContainer .DownloadContent .DownloadButtonMobile {\n      align-items: center;\n      margin-left: 24px; }\n      @media screen and (min-width: 768px) {\n        .DownloadContainer .DownloadContent .DownloadButton, .DownloadContainer .DownloadContent .DownloadButtonMobile {\n          margin-left: 36px; } }\n    .DownloadContainer .DownloadContent .DownloadButton {\n      display: none; }\n      @media screen and (min-width: 768px) {\n        .DownloadContainer .DownloadContent .DownloadButton {\n          display: inline-flex; } }\n    .DownloadContainer .DownloadContent .DownloadButtonMobile {\n      display: inline-flex; }\n      @media screen and (min-width: 768px) {\n        .DownloadContainer .DownloadContent .DownloadButtonMobile {\n          display: none; } }\n    .DownloadContainer .DownloadContent .DownloadLinks {\n      display: inline-flex; }\n      .DownloadContainer .DownloadContent .DownloadLinks .InputDropdown {\n        display: flex;\n        flex: 1 0 220px;\n        width: 100%; }\n        @media screen and (min-width: 576px) {\n          .DownloadContainer .DownloadContent .DownloadLinks .InputDropdown {\n            width: 240px;\n            display: block; } }\n    .DownloadContainer .DownloadContent .DownloadLabel {\n      width: auto; }\n      .DownloadContainer .DownloadContent .DownloadLabel .LabelSpan {\n        max-width: 240px; }\n";
styleInject(css$u);

var DownloadableResources =
/*#__PURE__*/
function (_PureComponent) {
  inherits(DownloadableResources, _PureComponent);

  function DownloadableResources(props) {
    var _this;

    classCallCheck(this, DownloadableResources);

    _this = possibleConstructorReturn(this, getPrototypeOf(DownloadableResources).call(this, props));

    defineProperty(assertThisInitialized(_this), "handleOnChange", function (event) {
      _this.setState({
        downloadContent: event.target.value
      });
    });

    var options = props.options;
    _this.state = {
      downloadContent: options.length > 0 ? options[0].value : ""
    };
    return _this;
  }

  createClass(DownloadableResources, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          label = _this$props.label,
          options = _this$props.options,
          source = _this$props.source,
          altText = _this$props.altText;
      var downloadContent = this.state.downloadContent; // Create valid id string out of title

      var id = title.replace(/\W/g, "_");
      var selectedOption = options.find(function (option) {
        return option.value === downloadContent;
      });
      var formattedOptions = options.map(function (option) {
        return {
          value: option.value,
          label: option.label
        };
      });
      var description = selectedOption ? selectedOption.description : "";
      return React__default.createElement(Container, {
        fluid: true,
        className: "DownloadableResources"
      }, React__default.createElement("div", {
        className: "DownloadContainer"
      }, React__default.createElement(Divider, null), React__default.createElement("div", {
        className: "DownloadContent"
      }, React__default.createElement("div", {
        className: "DownloadInfo"
      }, React__default.createElement("div", null, React__default.createElement(Image, {
        source: source,
        altText: altText
      })), React__default.createElement("div", {
        className: "DownloadDescription"
      }, React__default.createElement(DisplayText, {
        size: "L"
      }, StringUtils.formatMax(title, 75)), React__default.createElement(BodyText, {
        size: "S"
      }, description))), React__default.createElement(Label, {
        htmlFor: id,
        label: label,
        className: "DownloadLabel"
      }, React__default.createElement("div", {
        className: "DownloadLinks"
      }, React__default.createElement(InputDropdown$1, {
        id: id,
        options: formattedOptions,
        name: "downloadable-content",
        onChangeHandler: this.handleOnChange
      }), React__default.createElement(ButtonIcon, {
        icon: "download",
        theme: "Primary",
        size: "M",
        className: "DownloadButtonMobile",
        external: true,
        download: true,
        href: downloadContent
      }), React__default.createElement(ButtonLink, {
        theme: "Primary",
        size: "M",
        className: "DownloadButton",
        external: true,
        download: true,
        href: downloadContent
      }, "Download")))), React__default.createElement(Divider, null)));
    }
  }]);

  return DownloadableResources;
}(React.PureComponent);

defineProperty(DownloadableResources, "propTypes", {
  title: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  options: PropTypes.arrayOf(PropTypes.shape({
    value: PropTypes.string,
    label: PropTypes.string,
    description: PropTypes.string
  })).isRequired,
  source: PropTypes.string.isRequired,
  altText: PropTypes.string.isRequired
});

// Allowed list of locales
var allowedLocales = [{
  label: "Canada/English",
  value: "en-CA"
}, {
  label: "Canada/Français",
  value: "fr-CA"
}, {
  label: "United Kingdom/English",
  value: "en-UK"
}, {
  label: "United States/English",
  value: "en-US"
}];
var config = {
  allowedLocales: allowedLocales
};
var config_1 = config.allowedLocales;

var css$v = ".LocaleSwitcher {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  max-width: 240px; }\n  .LocaleSwitcher .DropdownSelect {\n    padding-left: 48px;\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    cursor: pointer; }\n  .LocaleSwitcher .IconCountry {\n    position: absolute;\n    left: 8px;\n    pointer-events: none; }\n  .LocaleSwitcher .IconSelect {\n    position: absolute;\n    right: 16px;\n    pointer-events: none; }\n";
styleInject(css$v);

var LocaleSwitcher =
/*#__PURE__*/
function (_PureComponent) {
  inherits(LocaleSwitcher, _PureComponent);

  function LocaleSwitcher(props) {
    var _this;

    classCallCheck(this, LocaleSwitcher);

    _this = possibleConstructorReturn(this, getPrototypeOf(LocaleSwitcher).call(this, props));

    defineProperty(assertThisInitialized(_this), "handleOnChange", function (target) {
      _this.setState({
        locale: target.value
      }, function () {
        var _this$state = _this.state,
            locale = _this$state.locale,
            allowedLocales = _this$state.allowedLocales,
            pathnameLocale = _this$state.pathnameLocale;
        var redirectURL; // Check to see if the url already contains a locale, remove it if true

        if (allowedLocales.filter(function (item) {
          return item.value === pathnameLocale;
        }).length > 0) {
          redirectURL = "".concat(locale).concat(browser.window.location.pathname.slice(6));
        } else {
          redirectURL = "".concat(locale).concat(browser.window.location.pathname);
        }

        browser.window.location.pathname = redirectURL;
      });
    });

    var _allowedLocales = props.allowedLocales;

    var _pathnameLocale = browser.window.location.pathname.slice(1, 6);

    var _locale;

    if (_allowedLocales.filter(function (item) {
      return item.value === _pathnameLocale;
    }).length > 0) {
      _locale = browser.window.location.pathname.slice(1, 6);
    } else {
      _locale = "en-CA";
    }

    _this.state = {
      locale: _locale,
      allowedLocales: _allowedLocales,
      pathnameLocale: _pathnameLocale
    };
    return _this;
  }

  createClass(LocaleSwitcher, [{
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          locale = _this$state2.locale,
          allowedLocales = _this$state2.allowedLocales;
      return React__default.createElement("div", {
        className: "LocaleSwitcher"
      }, React__default.createElement(Icon, {
        icon: "global",
        size: "S",
        className: "IconCountry"
      }), React__default.createElement(InputDropdown$1, {
        name: "locale-switcher",
        value: locale,
        options: allowedLocales,
        onChangeHandler: this.handleOnChange
      }), React__default.createElement(Icon, {
        icon: "chevronDown",
        size: "S",
        className: "IconSelect"
      }));
    }
  }]);

  return LocaleSwitcher;
}(React.PureComponent);

defineProperty(LocaleSwitcher, "propTypes", {
  /** List of locales supported by the website, stored in config */
  allowedLocales: PropTypes.array
});

var css$w = ".LocaleSwitcherFirstTimeUser {\n  display: flex;\n  background-color: #f1f4f8; }\n  @media screen and (min-width: 768px) {\n    .LocaleSwitcherFirstTimeUser {\n      padding: 0 16px; } }\n  .LocaleSwitcherFirstTimeUser.Hidden {\n    display: none; }\n  .LocaleSwitcherFirstTimeUser .LocaleSwitcherContainer {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    margin: 8px; }\n    @media screen and (min-width: 768px) {\n      .LocaleSwitcherFirstTimeUser .LocaleSwitcherContainer {\n        flex-direction: row;\n        margin: 8px auto;\n        width: auto; } }\n    .LocaleSwitcherFirstTimeUser .LocaleSwitcherContainer .BodyText {\n      margin: 0 32px;\n      text-align: center; }\n      @media screen and (min-width: 768px) {\n        .LocaleSwitcherFirstTimeUser .LocaleSwitcherContainer .BodyText {\n          text-align: left;\n          margin: 0px; } }\n    .LocaleSwitcherFirstTimeUser .LocaleSwitcherContainer .LocaleSwitcher {\n      margin-top: 8px; }\n      @media screen and (min-width: 768px) {\n        .LocaleSwitcherFirstTimeUser .LocaleSwitcherContainer .LocaleSwitcher {\n          margin: 0 8px; } }\n  .LocaleSwitcherFirstTimeUser .IconClose {\n    position: absolute;\n    top: 0;\n    right: 0; }\n    @media screen and (min-width: 768px) {\n      .LocaleSwitcherFirstTimeUser .IconClose {\n        position: initial;\n        margin-left: 8px; } }\n";
styleInject(css$w);

var LocaleSwitcherFirstTimeUser =
/*#__PURE__*/
function (_PureComponent) {
  inherits(LocaleSwitcherFirstTimeUser, _PureComponent);

  function LocaleSwitcherFirstTimeUser(props) {
    var _this;

    classCallCheck(this, LocaleSwitcherFirstTimeUser);

    _this = possibleConstructorReturn(this, getPrototypeOf(LocaleSwitcherFirstTimeUser).call(this, props));

    defineProperty(assertThisInitialized(_this), "handleOnClick", function (event) {
      if (event.type === "click") {
        _this.setState({
          hidden: true
        });
      } else if (event.type === "keypress" && event.key === "Enter") {
        _this.setState({
          hidden: true
        });
      }
    });

    _this.state = {
      hidden: false
    };
    return _this;
  }

  createClass(LocaleSwitcherFirstTimeUser, [{
    key: "render",
    value: function render() {
      var hidden = this.state.hidden;
      var message = this.props.message;
      return React__default.createElement(Container, {
        fluid: true,
        className: "LocaleSwitcherFirstTimeUser ".concat(hidden ? "Hidden" : "")
      }, React__default.createElement("div", {
        className: "LocaleSwitcherContainer"
      }, React__default.createElement(BodyText, {
        size: "S"
      }, message), React__default.createElement(LocaleSwitcher, {
        allowedLocales: config_1
      }), React__default.createElement("span", {
        role: "button",
        tabIndex: 0,
        onClick: this.handleOnClick,
        onKeyPress: this.handleOnClick,
        className: "IconClose"
      }, React__default.createElement(Icon, {
        icon: "close",
        size: "S"
      }))));
    }
  }]);

  return LocaleSwitcherFirstTimeUser;
}(React.PureComponent);

defineProperty(LocaleSwitcherFirstTimeUser, "propTypes", {
  message: PropTypes.string
});

defineProperty(LocaleSwitcherFirstTimeUser, "defaultProps", {
  message: "Select your country / language to see content specific to your location and shop online"
});

var css$x = ".GenericContent .AspectRatio16-9 {\n  width: 100%;\n  padding-top: 56.25%;\n  /* 16:9 Aspect Ratio */\n  position: relative; }\n  .GenericContent .AspectRatio16-9 .Image {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    height: 100%; }\n\n.GenericContent .Heading {\n  margin-top: 18px;\n  margin-bottom: 9px; }\n\n.GenericContent .BodyText {\n  margin-top: 9px;\n  margin-bottom: 18px; }\n\n.GenericContent .GenericContentButtons {\n  display: flex;\n  justify-content: center; }\n  .GenericContent .GenericContentButtons .BaseLink {\n    align-items: center;\n    margin-right: 12px;\n    margin-left: 12px; }\n\n@media screen and (max-width: 575px) {\n  .GenericContent .GenericContentButtons {\n    display: block; }\n    .GenericContent .GenericContentButtons .ButtonContainer {\n      margin: auto; }\n      .GenericContent .GenericContentButtons .ButtonContainer .Button {\n        width: 100%; } }\n";
styleInject(css$x);

var GenericContent =
/*#__PURE__*/
function (_PureComponent) {
  inherits(GenericContent, _PureComponent);

  function GenericContent() {
    classCallCheck(this, GenericContent);

    return possibleConstructorReturn(this, getPrototypeOf(GenericContent).apply(this, arguments));
  }

  createClass(GenericContent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          body = _this$props.body,
          bodySize = _this$props.bodySize,
          centered = _this$props.centered,
          titleText = _this$props.titleText,
          imageAltText = _this$props.imageAltText,
          imageMobileSource = _this$props.imageMobileSource,
          imageSource = _this$props.imageSource,
          imageLongDesc = _this$props.imageLongDesc,
          className = _this$props.className,
          buttons = _this$props.buttons;
      var imageProps = {
        altText: imageAltText,
        longDesc: imageLongDesc,
        mobileSource: imageMobileSource,
        source: imageSource
      }; // TODO: Create utility for aspect ratio classes

      var image = React__default.createElement("div", {
        className: "AspectRatio16-9"
      }, React__default.createElement(Image, _extends_1({
        className: "GenericContentImage",
        key: "generic-content-image"
      }, imageProps)));
      var title = React__default.createElement(Heading, {
        size: "M",
        centered: centered
      }, StringUtils.formatMax(titleText, 50));
      var buttonsClassName = centered ? "Centered" : "";
      return React__default.createElement("div", {
        className: composeClassName(["GenericContent", className])
      }, image, title, React__default.createElement(BodyText, {
        size: bodySize,
        className: "BodyText",
        centered: centered
      }, body), React__default.createElement("div", {
        className: composeClassName(["GenericContentButtons", buttonsClassName])
      }, buttons));
    }
  }]);

  return GenericContent;
}(React.PureComponent);

defineProperty(GenericContent, "propTypes", {
  imageSource: PropTypes.string,
  imageAltText: PropTypes.string,
  imageLongDesc: PropTypes.string,
  imageMobileSource: PropTypes.string,
  title: PropTypes.string,
  body: PropTypes.string.isRequired,
  className: PropTypes.string,
  buttons: PropTypes.array
});

defineProperty(GenericContent, "defaultProps", {
  mobile: false,
  buttons: []
});

var css$y = ".ImageLinkWrapper {\n  display: flex;\n  overflow: hidden;\n  width: 100%;\n  height: 100%; }\n  .ImageLinkWrapper .ImageLinkImage > img {\n    transition: all 0.3s ease-in; }\n  .ImageLinkWrapper:hover .ImageLinkImage > img {\n    transform: scale(1.03); }\n";
styleInject(css$y);

var ImageLink =
/*#__PURE__*/
function (_PureComponent) {
  inherits(ImageLink, _PureComponent);

  function ImageLink() {
    classCallCheck(this, ImageLink);

    return possibleConstructorReturn(this, getPrototypeOf(ImageLink).apply(this, arguments));
  }

  createClass(ImageLink, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          altText = _this$props.altText,
          className = _this$props.className,
          external = _this$props.external,
          href = _this$props.href,
          longdesc = _this$props.longdesc,
          mobileSource = _this$props.mobileSource,
          source = _this$props.source,
          title = _this$props.title,
          internalLinkComponent = _this$props.internalLinkComponent;
      var imageProps = {
        altText: altText,
        mobileSource: mobileSource,
        source: source,
        longdesc: longdesc
      };
      var linkProps = {
        external: external,
        href: href,
        title: title
      };
      var composedClassName = composeClassName(["ImageLinkWrapper", className]);
      return React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement(BaseLink, _extends_1({
        internalLinkComponent: internalLinkComponent,
        className: "ImageLink"
      }, linkProps), React__default.createElement(Image, _extends_1({
        className: "ImageLinkImage"
      }, imageProps))));
    }
  }]);

  return ImageLink;
}(React.PureComponent);

defineProperty(ImageLink, "propTypes", {
  altText: PropTypes.string.isRequired,
  className: PropTypes.string,
  external: PropTypes.bool,
  href: PropTypes.string,
  longdesc: PropTypes.string,
  mobileSource: PropTypes.string,
  source: PropTypes.string.isRequired,
  title: PropTypes.string,

  /** Changes the component used to create links. */
  internalLinkComponent: PropTypes.any
});

defineProperty(ImageLink, "defaultProps", {
  href: "",
  external: false,
  title: "",
  longdesc: "",
  internalLinkComponent: null
});

var css$z = ".TextAreaContainer {\n  height: 100%; }\n  .TextAreaContainer .TextAreaGroup {\n    height: calc(100% - 24px);\n    width: 100%;\n    border: 1px solid #dbdcdf; }\n    .TextAreaContainer .TextAreaGroup .InputTextArea {\n      height: 100%;\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px 25px 7px 15px;\n      border: none;\n      outline: none;\n      resize: none;\n      font-family: MercuryTextG1;\n      font-weight: 600;\n      font-size: 16px;\n      letter-spacing: 0.5px;\n      color: #19294f;\n      caret-color: #00aeef; }\n    .TextAreaContainer .TextAreaGroup .Icon {\n      display: inline;\n      position: relative;\n      bottom: 100%;\n      left: calc(100% - 24px); }\n    .TextAreaContainer .TextAreaGroup.approved {\n      border: 1px solid #0d7f50; }\n      .TextAreaContainer .TextAreaGroup.approved .Icon .ColoredBase {\n        fill: #0d7f50; }\n    .TextAreaContainer .TextAreaGroup.error {\n      border: 1px solid #e41647; }\n      .TextAreaContainer .TextAreaGroup.error .Icon .ColoredBase {\n        fill: #e41647; }\n    .TextAreaContainer .TextAreaGroup:hover {\n      border: 1px solid #c5d0de;\n      cursor: text; }\n    .TextAreaContainer .TextAreaGroup:focus {\n      border: 1px solid #00aeef; }\n    .TextAreaContainer .TextAreaGroup:active {\n      border: 1px solid #00aeef; }\n";
styleInject(css$z);

var InputTextArea =
/*#__PURE__*/
function (_PureComponent) {
  inherits(InputTextArea, _PureComponent);

  function InputTextArea() {
    classCallCheck(this, InputTextArea);

    return possibleConstructorReturn(this, getPrototypeOf(InputTextArea).apply(this, arguments));
  }

  createClass(InputTextArea, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          approved = _this$props.approved,
          className = _this$props.className,
          disabled = _this$props.disabled,
          error = _this$props.error,
          icon = _this$props.icon,
          label = _this$props.label,
          name = _this$props.name,
          onChangeHandler = _this$props.onChangeHandler,
          placeholder = _this$props.placeholder,
          title = _this$props.title,
          value = _this$props.value;
      var labelProps = {
        label: label
      };
      var composedClassName = composeClassName(["TextAreaGroup", approved ? "approved" : "", error ? "error" : "", className]);
      var iconComponent = null;
      var noIconStyles;

      if (icon) {
        var iconProps = {
          icon: icon
        };
        noIconStyles = null;
        iconComponent = React__default.createElement(Icon, _extends_1({
          size: "S"
        }, iconProps));
      }

      var htmlFor = name;
      return React__default.createElement("div", {
        className: "TextAreaContainer"
      }, React__default.createElement(Label, _extends_1({
        htmlFor: htmlFor
      }, labelProps), React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement("textarea", {
        className: "InputTextArea",
        id: htmlFor,
        disabled: disabled,
        name: name,
        onChange: onChangeHandler,
        placeholder: placeholder,
        style: noIconStyles,
        title: title,
        value: value
      }), iconComponent)));
    }
  }]);

  return InputTextArea;
}(React.PureComponent);

defineProperty(InputTextArea, "propTypes", {
  /** Indicates if the user input is accepted */
  approved: PropTypes.bool,
  className: PropTypes.string,
  disabled: PropTypes.bool,

  /** Indicates if there is an error in the user input */
  error: PropTypes.bool,
  icon: PropTypes.string,
  label: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
  onChangeHandler: PropTypes.func,
  placeholder: PropTypes.string,

  /** Indicate purpose of text input for accessibility */
  title: PropTypes.string.isRequired,
  value: PropTypes.string
});

defineProperty(InputTextArea, "defaultProps", {
  approved: false,
  className: "",
  disabled: false,
  error: false,
  icon: "",
  placeholder: ""
});

var MarkdownParser =
/*#__PURE__*/
function (_PureComponent) {
  inherits(MarkdownParser, _PureComponent);

  function MarkdownParser() {
    classCallCheck(this, MarkdownParser);

    return possibleConstructorReturn(this, getPrototypeOf(MarkdownParser).apply(this, arguments));
  }

  createClass(MarkdownParser, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          internalLinkComponent = _this$props.internalLinkComponent;
      var output = []; // Define Renderers Wrappers for React-Markdown

      var MarkdownLink = function MarkdownLink(props) {
        var external = props.href[0] !== "/";
        return React__default.createElement(BaseLink, {
          unstyled: true,
          internalLinkComponent: internalLinkComponent,
          href: props.href,
          external: external
        }, props.children);
      };

      var MarkdownBulletList = function MarkdownBulletList(props) {
        return React__default.createElement(BulletList, null, props.children);
      };

      var MarkdownBulletListItem = function MarkdownBulletListItem(props) {
        return React__default.createElement(BulletListItem, null, props.children);
      };

      var renderers = {
        link: MarkdownLink,
        list: MarkdownBulletList,
        listItem: MarkdownBulletListItem
      };
      var childrenArray = children instanceof Array ? children : [children];
      childrenArray.forEach(function (child) {
        if (typeof child === "string") {
          var markdownOutput = React__default.createElement(ReactMarkdown, {
            source: child,
            renderers: renderers,
            allowedTypes: ["text", "break", "paragraph", "emphasis", "strong", "link", "list", "listItem"]
          });
          output.push(markdownOutput);
        } else {
          output.push(child);
        }
      });
      return output;
    }
  }]);

  return MarkdownParser;
}(React.PureComponent);

defineProperty(MarkdownParser, "propTypes", {
  internalLinkComponent: PropTypes.any.isRequired
});

var css$A = ".KeyValuePair {\n  display: flex;\n  max-width: 100%;\n  padding-bottom: 8px; }\n  .KeyValuePair .key {\n    flex: 50%;\n    padding-right: 8px; }\n  .KeyValuePair .value {\n    flex: 50%; }\n";
styleInject(css$A);

var KeyValuePair =
/*#__PURE__*/
function (_PureComponent) {
  inherits(KeyValuePair, _PureComponent);

  function KeyValuePair() {
    classCallCheck(this, KeyValuePair);

    return possibleConstructorReturn(this, getPrototypeOf(KeyValuePair).apply(this, arguments));
  }

  createClass(KeyValuePair, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          title = _this$props.title,
          value = _this$props.value;
      var composedClassName = composeClassName(["KeyValuePair", className]);
      return React__default.createElement("li", {
        className: composedClassName
      }, React__default.createElement(DisplayText, {
        size: "M",
        className: "key"
      }, title, ":"), React__default.createElement(BodyText, {
        size: "M",
        className: "value"
      }, value));
    }
  }]);

  return KeyValuePair;
}(React.PureComponent);

defineProperty(KeyValuePair, "propTypes", {
  className: PropTypes.string,
  title: PropTypes.string,
  value: PropTypes.string
});

var colors = {
  "base-black-color": {
    name: "Base Black",
    value: "base-black-color",
    color: "#1d2530",
    type: "base"
  },
  "base-white-color": {
    name: "Base White",
    value: "base-white-color",
    color: "#ffffff",
    type: "base"
  },
  "brand-navy-color": {
    name: "Brand Navy",
    value: "brand-navy-color",
    color: "#19294f",
    type: "brand"
  },
  "brand-accessible-blue-color": {
    name: "Brand Accessible Blue",
    value: "brand-accessible-blue-color",
    color: "#167cba",
    type: "brand"
  },
  "brand-blue-color": {
    name: "Brand Blue",
    value: "brand-blue-color",
    color: "#00aeef",
    type: "brand"
  },
  "brand-orange-color": {
    name: "Brand Orange",
    value: "brand-orange-color",
    color: "#db3b00",
    type: "brand"
  },
  "brand-purple-color": {
    name: "Brand Purple",
    value: "brand-purple-color",
    color: "#6970b4",
    type: "brand"
  },
  "brand-red-color": {
    name: "Brand Red",
    value: "brand-red-color",
    color: "#e41647",
    type: "brand"
  },
  "brand-yellow-color": {
    name: "Brand Yellow",
    value: "brand-yellow-color",
    color: "#ffde30",
    type: "brand"
  },
  "brand-green-color": {
    name: "Brand Green",
    value: "brand-green-color",
    color: "#0d7f50",
    type: "brand"
  },
  "brand-grey-color": {
    name: "Brand Grey",
    value: "brand-grey-color",
    color: "#545555",
    type: "brand"
  },
  "base-icon-color": {
    name: "Base Icon",
    value: "base-icon-color",
    color: "#a8aab7",
    type: "base"
  },
  "base-blue-grey": {
    name: "Base Blue Grey",
    value: "base-blue-grey",
    color: "#c5d0de",
    type: "base"
  },
  "base-light-blue-color": {
    name: "Base Light Blue",
    value: "base-light-blue-color",
    color: "#f1f4f8",
    type: "base"
  },
  "base-elements-color": {
    name: "Base Elements",
    value: "base-elements-color",
    color: "#f4f6f9",
    type: "base"
  },
  "base-border-yellow-color": {
    name: "Base Border Yellow",
    value: "base-border-yellow-color",
    color: "#e5c72b",
    type: "base"
  },
  "base-border-grey-color": {
    name: "Base Border Grey",
    value: "base-border-grey-color",
    color: "#dbdcdf",
    type: "base"
  },
  "base-dark-grey-color": {
    name: "Base Dark Grey",
    value: "base-dark-grey-color",
    color: "#516173",
    type: "base"
  },
  "base-disabled-grey-color": {
    name: "Base Disabled Grey",
    value: "base-disabled-grey-color",
    color: "#e9edf1",
    type: "base"
  }
};
var colors_1 = {
  colors: colors
};
var colors_2 = colors_1.colors;

var css$B = ".TextWithBackground {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  word-break: break-word;\n  box-sizing: border-box; }\n  .TextWithBackground * {\n    overflow: hidden; }\n";
styleInject(css$B);

var TextWithBackground =
/*#__PURE__*/
function (_PureComponent) {
  inherits(TextWithBackground, _PureComponent);

  function TextWithBackground() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, TextWithBackground);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TextWithBackground)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(_this), "_prepareChildren", function (children, whiteText) {
      if (!whiteText) return children;
      return React__default.Children.map(children, function (child) {
        return React__default.cloneElement(child, {
          whiteText: true
        });
      });
    });

    return _this;
  }

  createClass(TextWithBackground, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          color = _this$props.color,
          whiteText = _this$props.whiteText,
          children = _this$props.children;
      var composedClassName = composeClassName([className, "TextWithBackground"]);

      var toRender = this._prepareChildren(children, whiteText);

      return React__default.createElement("div", {
        className: composedClassName,
        style: {
          backgroundColor: color
        }
      }, toRender);
    }
  }]);

  return TextWithBackground;
}(React.PureComponent);

defineProperty(TextWithBackground, "propTypes", {
  className: PropTypes.string,

  /** Hex code for background */
  color: PropTypes.string,
  whiteText: PropTypes.bool,
  children: PropTypes.node.isRequired
});

defineProperty(TextWithBackground, "defaultProps", {
  whiteText: false,
  color: "#FFFFFF"
});

var css$C = ".MarketingtileA, .MarketingTileA > a {\n  display: flex;\n  flex-direction: column; }\n  @media screen and (min-width: 768px) {\n    .MarketingtileA, .MarketingTileA > a {\n      flex-direction: row; } }\n  @media screen and (min-width: 1024px) {\n    .MarketingtileA, .MarketingTileA > a {\n      flex-direction: row; } }\n  @media screen and (min-width: 1440px) {\n    .MarketingtileA, .MarketingTileA > a {\n      flex-direction: row; } }\n\n.MarketingTileA > a {\n  display: flex;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  align-items: flex-start; }\n  .MarketingTileA > a .TileImage > img {\n    transition: all 0.3s ease-in; }\n  .MarketingTileA > a:hover .TileImage > img {\n    transform: scale(1.03); }\n\n.MarketingTileA .TileLink:hover {\n  text-decoration: None; }\n\n.MarketingTileA .TileLink .TileTitle:hover {\n  text-decoration: underline; }\n\n.MarketingTileA .TileImage {\n  height: 200px; }\n  @media screen and (min-width: 768px) {\n    .MarketingTileA .TileImage {\n      height: 244px; } }\n  @media screen and (min-width: 1024px) {\n    .MarketingTileA .TileImage {\n      height: 300px; } }\n  @media screen and (min-width: 1440px) {\n    .MarketingTileA .TileImage {\n      height: 370px; } }\n\n.MarketingTileA .TileText {\n  z-index: 1;\n  height: 200px;\n  padding: 19px 12px 19px 12px;\n  width: 100%;\n  word-wrap: break-word; }\n  @media screen and (min-width: 768px) {\n    .MarketingTileA .TileText {\n      padding: 23px 10px 23px 10px;\n      width: 256px;\n      height: 244px; } }\n  @media screen and (min-width: 1024px) {\n    .MarketingTileA .TileText {\n      padding: 35px 20px 35px 20px;\n      width: 320px;\n      height: 300px; } }\n  @media screen and (min-width: 1440px) {\n    .MarketingTileA .TileText {\n      padding: 70px 30px 70px 30px;\n      width: 392px;\n      height: 370px; } }\n  .MarketingTileA .TileText .TileSubtitle {\n    height: 20px; }\n  .MarketingTileA .TileText .TileTitle {\n    margin: 16px 0px;\n    height: 72px; }\n    @media screen and (min-width: 768px) {\n      .MarketingTileA .TileText .TileTitle {\n        height: 108px; } }\n    @media screen and (min-width: 1024px) {\n      .MarketingTileA .TileText .TileTitle {\n        height: 126px; } }\n";
styleInject(css$C);

var MarketingTileA =
/*#__PURE__*/
function (_PureComponent) {
  inherits(MarketingTileA, _PureComponent);

  function MarketingTileA() {
    classCallCheck(this, MarketingTileA);

    return possibleConstructorReturn(this, getPrototypeOf(MarketingTileA).apply(this, arguments));
  }

  createClass(MarketingTileA, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          backgroundColor = _this$props.backgroundColor,
          body = _this$props.body,
          subTitle = _this$props.subTitle,
          title = _this$props.title,
          imageAltText = _this$props.imageAltText,
          mobile = _this$props.mobile,
          imageMobileSource = _this$props.imageMobileSource,
          imageSource = _this$props.imageSource,
          imageLongDesc = _this$props.imageLongDesc,
          external = _this$props.external,
          href = _this$props.href,
          linkTitle = _this$props.linkTitle,
          internalLinkComponent = _this$props.internalLinkComponent,
          className = _this$props.className,
          tabIndex = _this$props.tabIndex,
          whiteText = _this$props.whiteText;
      var imageProps = {
        altText: imageAltText,
        longDesc: imageLongDesc,
        mobileSource: imageMobileSource,
        source: imageSource
      };
      var text = React__default.createElement(TextWithBackground, {
        color: backgroundColor,
        whiteText: whiteText,
        className: "TileText",
        key: "marketing-tile-a-text"
      }, React__default.createElement(DisplayText, {
        size: "M",
        className: "TileSubtitle"
      }, StringUtils.formatMax(subTitle, 30)), React__default.createElement(Heading, {
        size: "M",
        className: "TileTitle"
      }, StringUtils.formatMax(title, 30)), React__default.createElement(BodyText, {
        size: "M",
        className: "BodyText"
      }, StringUtils.formatMax(body, 80)));
      var image = React__default.createElement(Image, _extends_1({
        className: "TileImage",
        key: "marketing-tile-a-image"
      }, imageProps));
      var children = [text, image];

      if (mobile) {
        children = [image, text];
      }

      var childrenWithLink;

      if (href) {
        var linkProps = {
          href: href,
          internalLinkComponent: internalLinkComponent,
          title: linkTitle,
          external: external
        };
        childrenWithLink = React__default.createElement(BaseLink, _extends_1({
          className: "TileLink"
        }, linkProps), children);
      }

      return React__default.createElement(Col, {
        className: composeClassName(["MarketingTileA", className]),
        xs: {
          span: 12
        },
        md: {
          span: 12
        },
        lg: {
          span: 12
        },
        xl: {
          span: 12
        },
        tabIndex: tabIndex
      }, childrenWithLink || children);
    }
  }]);

  return MarketingTileA;
}(React.PureComponent);

defineProperty(MarketingTileA, "propTypes", {
  imageSource: PropTypes.string.isRequired,
  imageAltText: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
  backgroundColor: PropTypes.string,
  body: PropTypes.string,
  className: PropTypes.string,
  href: PropTypes.string,
  imageLongDesc: PropTypes.string,
  imageMobileSource: PropTypes.string,
  internalLinkComponent: PropTypes.any,
  linkTitle: PropTypes.string,
  mobile: PropTypes.bool,
  subTitle: PropTypes.string,
  tabIndex: PropTypes.string,
  whiteText: PropTypes.bool
});

defineProperty(MarketingTileA, "defaultProps", {
  backgroundColor: "#6970b4",
  internalLinkComponent: null,
  mobile: false,
  whiteText: false
});

var css$D = ".MarketingTileB a {\n  display: flex;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  flex-direction: column; }\n  .MarketingTileB a .TileImage > img {\n    transition: all 0.3s ease-in; }\n  .MarketingTileB a:hover .TileImage > img {\n    transform: scale(1.03); }\n\n.MarketingTileB .TileLink:hover {\n  text-decoration: None; }\n\n.MarketingTileB .TileLink .TileTitle:hover {\n  text-decoration: underline; }\n\n.MarketingTileB .TileImage {\n  height: 200px; }\n  @media screen and (min-width: 768px) {\n    .MarketingTileB .TileImage {\n      height: 273px; } }\n  @media screen and (min-width: 1024px) {\n    .MarketingTileB .TileImage {\n      height: 339px; } }\n  @media screen and (min-width: 1440px) {\n    .MarketingTileB .TileImage {\n      height: 420px; } }\n\n.MarketingTileB .TileText {\n  z-index: 1;\n  padding: 19px 12px 19px 12px;\n  height: 200px; }\n  @media screen and (min-width: 768px) {\n    .MarketingTileB .TileText {\n      padding: 14px 14px 14px 14px;\n      height: 192px; } }\n  @media screen and (min-width: 1024px) {\n    .MarketingTileB .TileText {\n      padding: 20px 80px 20px 20px;\n      height: 229px; } }\n  @media screen and (min-width: 1440px) {\n    .MarketingTileB .TileText {\n      padding: 24px 98px 27px 30px;\n      height: 214px; } }\n";
styleInject(css$D);

var MarketingTileB =
/*#__PURE__*/
function (_PureComponent) {
  inherits(MarketingTileB, _PureComponent);

  function MarketingTileB() {
    classCallCheck(this, MarketingTileB);

    return possibleConstructorReturn(this, getPrototypeOf(MarketingTileB).apply(this, arguments));
  }

  createClass(MarketingTileB, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          backgroundColor = _this$props.backgroundColor,
          body = _this$props.body,
          className = _this$props.className,
          href = _this$props.href,
          imageAltText = _this$props.imageAltText,
          imageMobileSource = _this$props.imageMobileSource,
          imageSource = _this$props.imageSource,
          internalLinkComponent = _this$props.internalLinkComponent,
          linkExternal = _this$props.linkExternal,
          linkTitle = _this$props.linkTitle,
          subTitle = _this$props.subTitle,
          title = _this$props.title,
          whiteText = _this$props.whiteText,
          tabIndex = _this$props.tabIndex;
      var imageProps = {
        source: imageSource,
        mobileSource: imageMobileSource,
        altText: imageAltText
      };
      var image = React__default.createElement(Image, _extends_1({
        className: "TileImage",
        key: "marketing-tile-b-image"
      }, imageProps));
      var text = React__default.createElement(TextWithBackground, {
        whiteText: whiteText,
        color: backgroundColor,
        className: "TileText",
        key: "marketing-tile-b-text"
      }, React__default.createElement(DisplayText, {
        size: "M",
        whiteText: whiteText
      }, StringUtils.formatMax(subTitle, 30)), React__default.createElement(Heading, {
        className: "TileTitle",
        size: "M"
      }, StringUtils.formatMax(title, 40)), React__default.createElement(BodyText, {
        size: "M"
      }, StringUtils.formatMax(body, 80)));
      var children = [image, text];
      var childrenWithLink;

      if (href) {
        var linkProps = {
          href: href,
          internalLinkComponent: internalLinkComponent,
          title: linkTitle,
          external: linkExternal
        };
        childrenWithLink = React__default.createElement(BaseLink, _extends_1({
          className: "TileLink"
        }, linkProps), image, text);
      }

      return React__default.createElement(Col, {
        className: composeClassName(["MarketingTileB", className]),
        xl: {
          span: 8
        },
        lg: {
          span: 8
        },
        md: {
          span: 8
        },
        sm: {
          span: 8
        },
        xs: {
          span: 12
        },
        tabIndex: tabIndex
      }, childrenWithLink || children);
    }
  }]);

  return MarketingTileB;
}(React.PureComponent);

defineProperty(MarketingTileB, "propTypes", {
  imageSource: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
  imageAltText: PropTypes.string.isRequired,
  backgroundColor: PropTypes.string,
  body: PropTypes.string,
  className: PropTypes.string,
  href: PropTypes.string,
  imageLongDesc: PropTypes.string,
  imageMobileSource: PropTypes.string,
  internalLinkComponent: PropTypes.any,
  linkExternal: PropTypes.bool,
  linkTitle: PropTypes.string,
  subTitle: PropTypes.string,
  tabIndex: PropTypes.string,
  whiteText: PropTypes.bool
});

defineProperty(MarketingTileB, "defaultProps", {
  backgroundColor: "#e41647",
  internalLinkComponent: null,
  linkExternal: false,
  whiteText: false
});

var css$E = ".MarketingTileC a {\n  display: flex;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  flex-direction: column; }\n  .MarketingTileC a .TileImage > img {\n    transition: all 0.3s ease-in; }\n  .MarketingTileC a:hover .TileImage > img {\n    transform: scale(1.03); }\n\n.MarketingTileC .TileLink:hover {\n  text-decoration: None; }\n\n.MarketingTileC .TileLink .TileTitle:hover {\n  text-decoration: underline; }\n\n.MarketingTileC .TileImage {\n  height: 200px; }\n  @media screen and (min-width: 768px) {\n    .MarketingTileC .TileImage {\n      height: 232px; } }\n  @media screen and (min-width: 1024px) {\n    .MarketingTileC .TileImage {\n      height: 284px; } }\n  @media screen and (min-width: 1440px) {\n    .MarketingTileC .TileImage {\n      height: 356px; } }\n\n.MarketingTileC .TileText {\n  z-index: 1;\n  padding: 19px 12px 19px 12px;\n  height: 200px; }\n  @media screen and (min-width: 768px) {\n    .MarketingTileC .TileText {\n      padding: 8px 12px 8px 12px;\n      height: 232px; } }\n  @media screen and (min-width: 1024px) {\n    .MarketingTileC .TileText {\n      padding: 13px 20px 13px 20px;\n      height: 284px; } }\n  @media screen and (min-width: 1440px) {\n    .MarketingTileC .TileText {\n      padding: 43px 20px 43px 20px;\n      height: 278px; } }\n";
styleInject(css$E);

var MarketingTileC =
/*#__PURE__*/
function (_PureComponent) {
  inherits(MarketingTileC, _PureComponent);

  function MarketingTileC() {
    classCallCheck(this, MarketingTileC);

    return possibleConstructorReturn(this, getPrototypeOf(MarketingTileC).apply(this, arguments));
  }

  createClass(MarketingTileC, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          backgroundColor = _this$props.backgroundColor,
          body = _this$props.body,
          className = _this$props.className,
          href = _this$props.href,
          imageAltText = _this$props.imageAltText,
          imageMobileSource = _this$props.imageMobileSource,
          imageSource = _this$props.imageSource,
          internalLinkComponent = _this$props.internalLinkComponent,
          linkExternal = _this$props.linkExternal,
          linkTitle = _this$props.linkTitle,
          subTitle = _this$props.subTitle,
          title = _this$props.title,
          whiteText = _this$props.whiteText,
          tabIndex = _this$props.tabIndex,
          mobile = _this$props.mobile;
      var imageProps = {
        source: imageSource,
        mobileSource: imageMobileSource,
        internalLinkComponent: null,
        altText: imageAltText
      };
      var image = React__default.createElement(Image, _extends_1({
        className: "TileImage",
        key: "marketing-tile-c-image"
      }, imageProps));
      var text = React__default.createElement(TextWithBackground, {
        whiteText: whiteText,
        color: backgroundColor,
        className: "TileText",
        key: "marketing-tile-c-text"
      }, React__default.createElement(DisplayText, {
        size: "M",
        whiteText: whiteText
      }, StringUtils.formatMax(subTitle, 30)), React__default.createElement(Heading, {
        className: "TileTitle",
        size: "M",
        whiteText: whiteText
      }, StringUtils.formatMax(title, 40)), React__default.createElement(BodyText, {
        size: "M",
        whiteText: whiteText
      }, StringUtils.formatMax(body, 80)));
      var children = [text, image];

      if (mobile) {
        children = [image, text];
      }

      var childrenWithLink;

      if (href) {
        var linkProps = {
          href: href,
          internalLinkComponent: internalLinkComponent,
          title: linkTitle,
          external: linkExternal
        };
        childrenWithLink = React__default.createElement(BaseLink, _extends_1({
          className: "TileLink"
        }, linkProps), children);
      }

      return React__default.createElement(Col, {
        className: composeClassName(["MarketingTileC", className]),
        xl: {
          span: 4
        },
        lg: {
          span: 4
        },
        md: {
          span: 4
        },
        sm: {
          span: 4
        },
        xs: {
          span: 12
        },
        tabIndex: tabIndex
      }, childrenWithLink || children);
    }
  }]);

  return MarketingTileC;
}(React.PureComponent);

defineProperty(MarketingTileC, "propTypes", {
  imageSource: PropTypes.string.isRequired,
  imageAltText: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
  backgroundColor: PropTypes.string,
  body: PropTypes.string,
  className: PropTypes.string,
  href: PropTypes.string,
  imageLongDesc: PropTypes.string,
  imageMobileSource: PropTypes.string,
  internalLinkComponent: PropTypes.any,
  linkExternal: PropTypes.bool,
  linkTitle: PropTypes.string,
  mobile: PropTypes.bool,
  subTitle: PropTypes.string,
  tabIndex: PropTypes.string,
  whiteText: PropTypes.bool
});

defineProperty(MarketingTileC, "defaultProps", {
  backgroundColor: "#0d7f50",
  linkExternal: false,
  mobile: false,
  whiteText: false
});

var css$F = ".NavigationColumn {\n  width: 160px;\n  flex-grow: 1; }\n  .NavigationColumn .NavigationColumnTitle {\n    margin-bottom: 10px; }\n  .NavigationColumn ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0; }\n  .NavigationColumn .NavigationColumnItem {\n    margin-top: 10px;\n    margin-bottom: 5px; }\n";
styleInject(css$F);

var NavigationColumn =
/*#__PURE__*/
function (_PureComponent) {
  inherits(NavigationColumn, _PureComponent);

  function NavigationColumn() {
    classCallCheck(this, NavigationColumn);

    return possibleConstructorReturn(this, getPrototypeOf(NavigationColumn).apply(this, arguments));
  }

  createClass(NavigationColumn, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          title = _this$props.title,
          children = _this$props.children;
      var composedClassName = composeClassName(["NavigationColumn", className]);
      var linkList = children.map(function (node) {
        var linkNode = objectSpread({}, node);

        linkNode.props = objectSpread({}, node.props, {
          tabIndex: "0"
        }); // This uses the link text as the unique key for the list.

        return React__default.createElement("li", {
          className: "NavigationColumnItem",
          key: node.props.children
        }, linkNode);
      });
      return React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement(DisplayText, {
        className: "NavigationColumnTitle",
        size: "M"
      }, title), React__default.createElement("ul", null, linkList));
    }
  }]);

  return NavigationColumn;
}(React.PureComponent);

defineProperty(NavigationColumn, "propTypes", {
  className: PropTypes.string,

  /** The title at the top of the column */
  title: PropTypes.string.isRequired,

  /** Only text BaseLinks should be passed into this component */
  children: PropTypes.array.isRequired
});

var css$G = ".NavigationItemMobile {\n  list-style: none;\n  margin-left: 0;\n  padding-left: 0; }\n  .NavigationItemMobile .BaseLink {\n    display: flex;\n    width: 100%;\n    padding-top: 25px;\n    padding-bottom: 22px;\n    border-bottom: 1px solid #dbdcdf; }\n    .NavigationItemMobile .BaseLink .Icon {\n      margin-left: auto;\n      margin-right: 0;\n      margin-top: 3px; }\n";
styleInject(css$G);

var NavigationItemMobile =
/*#__PURE__*/
function (_PureComponent) {
  inherits(NavigationItemMobile, _PureComponent);

  function NavigationItemMobile() {
    classCallCheck(this, NavigationItemMobile);

    return possibleConstructorReturn(this, getPrototypeOf(NavigationItemMobile).apply(this, arguments));
  }

  createClass(NavigationItemMobile, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          itemKey = _this$props.itemKey,
          external = _this$props.external,
          href = _this$props.href,
          onClickHandler = _this$props.onClickHandler,
          children = _this$props.children;
      var composedClassName = composeClassName(["NavigationItemMobile", className]);
      var linkProps = {
        blank: true
      };

      if (external && href) {
        linkProps = {
          external: true,
          href: href
        };
      }

      return React__default.createElement("li", {
        className: composedClassName,
        key: itemKey
      }, React__default.createElement(BaseLink, _extends_1({}, linkProps, {
        onClickHandler: onClickHandler
      }), React__default.createElement("div", null, children), React__default.createElement(Icon, {
        icon: "chevronRight",
        size: "S",
        className: "NavigationItemCaret",
        defaultColor: "DefaultGrey"
      })));
    }
  }]);

  return NavigationItemMobile;
}(React.PureComponent);

defineProperty(NavigationItemMobile, "propTypes", {
  className: PropTypes.string,
  itemKey: PropTypes.string.isRequired,
  external: PropTypes.bool,
  href: PropTypes.string,
  onClickHandler: PropTypes.func,
  children: PropTypes.any.isRequired
});

var css$H = ".Stories {\n  display: flex;\n  flex-direction: column;\n  height: 100%; }\n  .Stories .StoriesImage {\n    display: none; }\n    @media screen and (min-width: 768px) {\n      .Stories .StoriesImage {\n        display: block;\n        height: 80px;\n        margin-bottom: 6px; } }\n    @media screen and (min-width: 1024px) {\n      .Stories .StoriesImage {\n        height: 104px; } }\n    @media screen and (min-width: 1440px) {\n      .Stories .StoriesImage {\n        height: 144px; } }\n    .Stories .StoriesImage.Video {\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      align-items: center; }\n      @media screen and (max-width: 767px) {\n        .Stories .StoriesImage.Video {\n          height: 180px;\n          margin-bottom: 6px; } }\n    .Stories .StoriesImage.PlayButton {\n      display: block;\n      position: relative;\n      top: calc(50% - 50px); }\n  .Stories .StoriesTextWrapper {\n    height: 72px;\n    margin-bottom: 24px; }\n    @media screen and (min-width: 768px) {\n      .Stories .StoriesTextWrapper {\n        height: 108px;\n        margin-bottom: 36px; } }\n    @media screen and (min-width: 1024px) {\n      .Stories .StoriesTextWrapper {\n        height: 104px;\n        margin-bottom: 32px; } }\n    @media screen and (min-width: 1440px) {\n      .Stories .StoriesTextWrapper {\n        height: 80px;\n        margin-bottom: 48px; } }\n    .Stories .StoriesTextWrapper span {\n      margin-bottom: 8px;\n      height: 16px;\n      text-overflow: ellipsis;\n      word-break: break-word;\n      overflow: hidden;\n      white-space: nowrap; }\n      @media screen and (min-width: 768px) {\n        .Stories .StoriesTextWrapper span {\n          margin-bottom: 4px;\n          height: 32px; } }\n      @media screen and (min-width: 1024px) {\n        .Stories .StoriesTextWrapper span {\n          margin-bottom: 8px;\n          height: 24px; } }\n    .Stories .StoriesTextWrapper h6 {\n      height: 48px;\n      overflow: hidden; }\n      @media screen and (min-width: 768px) {\n        .Stories .StoriesTextWrapper h6 {\n          height: 72px; } }\n      @media screen and (min-width: 1440px) {\n        .Stories .StoriesTextWrapper h6 {\n          height: 48px; } }\n";
styleInject(css$H);

var Stories =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Stories, _PureComponent);

  function Stories() {
    classCallCheck(this, Stories);

    return possibleConstructorReturn(this, getPrototypeOf(Stories).apply(this, arguments));
  }

  createClass(Stories, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          Image$$1 = _this$props.Image,
          AltText = _this$props.AltText,
          Longdesc = _this$props.Longdesc,
          VideoSource = _this$props.VideoSource,
          VideoId = _this$props.VideoId,
          VideoTitle = _this$props.VideoTitle,
          VideoButtonTheme = _this$props.VideoButtonTheme,
          Tag = _this$props.Tag,
          ArticleTitle = _this$props.ArticleTitle,
          WhiteText = _this$props.WhiteText;
      var ModalProps = {
        source: VideoSource,
        videoId: VideoId,
        title: VideoTitle,
        theme: VideoButtonTheme
      };
      var storiesTextComponent = React__default.createElement("div", {
        className: "StoriesTextWrapper"
      }, React__default.createElement(DisplayText, {
        whiteText: WhiteText,
        size: "S"
      }, StringUtils.formatMax(Tag, 30)), React__default.createElement(DisplayText, {
        whiteText: WhiteText,
        size: "L"
      }, ArticleTitle));
      var classNameList = [className, "Stories"];
      var storiesTileContent = React__default.createElement("div", null, React__default.createElement(Image, {
        className: "StoriesImage",
        source: Image$$1,
        altText: AltText,
        longdesc: Longdesc
      }), storiesTextComponent);

      if (VideoId && VideoTitle) {
        classNameList.push("WithVideo");
        storiesTileContent = React__default.createElement("div", null, React__default.createElement(ImageBackground, {
          className: "StoriesImage Video",
          source: Image$$1
        }, React__default.createElement(ModalVideo, _extends_1({
          className: "StoriesImage PlayButton",
          noDisplayText: true
        }, ModalProps))), storiesTextComponent);
      }

      var composedClassName = composeClassName(classNameList);
      return React__default.createElement("div", {
        className: composedClassName
      }, storiesTileContent);
    }
  }]);

  return Stories;
}(React.PureComponent);

defineProperty(Stories, "propTypes", {
  className: PropTypes.string,
  Image: PropTypes.string.isRequired,
  AltText: PropTypes.string.isRequired,
  Longdesc: PropTypes.string,
  VideoSource: PropTypes.string,
  VideoId: PropTypes.string,
  VideoTitle: PropTypes.string,
  VideoButtonTheme: PropTypes.string,
  Tag: PropTypes.string.isRequired,
  ArticleTitle: PropTypes.string.isRequired,
  WhiteText: PropTypes.bool
});

var css$I = ".TabSectionLink {\n  padding-top: 8px;\n  padding-bottom: 16px;\n  display: flex;\n  align-items: center;\n  width: 90px;\n  justify-content: center; }\n  @media screen and (min-width: 1024px) {\n    .TabSectionLink {\n      padding-top: 16px; } }\n  @media screen and (min-width: 576px) {\n    .TabSectionLink {\n      width: 106px; } }\n  @media screen and (min-width: 1024px) {\n    .TabSectionLink {\n      width: 122px; } }\n  @media screen and (min-width: 1440px) {\n    .TabSectionLink {\n      width: 136px; } }\n  .TabSectionLink * {\n    text-transform: uppercase; }\n\n.TabSectionLink.active {\n  padding-bottom: 13px;\n  border-bottom: 3px solid #00aeef; }\n";
styleInject(css$I);

var TabSectionLink =
/*#__PURE__*/
function (_PureComponent) {
  inherits(TabSectionLink, _PureComponent);

  function TabSectionLink() {
    classCallCheck(this, TabSectionLink);

    return possibleConstructorReturn(this, getPrototypeOf(TabSectionLink).apply(this, arguments));
  }

  createClass(TabSectionLink, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          active = _this$props.active,
          href = _this$props.href,
          external = _this$props.external,
          internalLinkComponent = _this$props.internalLinkComponent,
          title = _this$props.title,
          blank = _this$props.blank,
          onClickHandler = _this$props.onClickHandler,
          tabIndex = _this$props.tabIndex,
          whiteText = _this$props.whiteText,
          children = _this$props.children,
          sectionId = _this$props.sectionId;
      var linkProps = {
        active: active,
        href: href,
        external: external,
        internalLinkComponent: internalLinkComponent,
        title: title,
        blank: blank,
        onClickHandler: onClickHandler,
        tabIndex: tabIndex,
        whiteText: whiteText
      };
      var composedClassName = composeClassName(["TabSectionLink", active ? "active" : "", className]);
      return React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement(BaseLink, _extends_1({
        className: "Link",
        a11yProps: {
          id: "tab-".concat(sectionId),
          role: "tab",
          "aria-controls": sectionId,
          "aria-selected": active
        }
      }, linkProps), children));
    }
  }]);

  return TabSectionLink;
}(React.PureComponent);

defineProperty(TabSectionLink, "propTypes", {
  className: PropTypes.string,
  active: PropTypes.bool,
  href: PropTypes.string,
  external: PropTypes.bool,
  internalLinkComponent: PropTypes.any,
  title: PropTypes.string,
  blank: PropTypes.bool,
  onClickHandler: PropTypes.func,
  tabIndex: PropTypes.string,
  whiteText: PropTypes.bool,
  sectionId: PropTypes.string
});

defineProperty(TabSectionLink, "defaultProps", {
  active: false
});

var css$J = ".VideoDisplay {\n  height: 100%; }\n  .VideoDisplay .VideoDisplayBackground {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between; }\n    .VideoDisplay .VideoDisplayBackground .PlayButton {\n      margin-left: auto;\n      margin-right: auto; }\n  .VideoDisplay.Columns12 .VideoDisplayBackground {\n    height: 200px; }\n    @media screen and (min-width: 768px) {\n      .VideoDisplay.Columns12 .VideoDisplayBackground {\n        height: 368px; } }\n    @media screen and (min-width: 1024px) {\n      .VideoDisplay.Columns12 .VideoDisplayBackground {\n        height: 464px; } }\n    @media screen and (min-width: 1440px) {\n      .VideoDisplay.Columns12 .VideoDisplayBackground {\n        height: 632px; } }\n  .VideoDisplay.Columns6 .VideoDisplayBackground {\n    height: 200px; }\n    @media screen and (min-width: 768px) {\n      .VideoDisplay.Columns6 .VideoDisplayBackground {\n        height: 176px; } }\n    @media screen and (min-width: 1024px) {\n      .VideoDisplay.Columns6 .VideoDisplayBackground {\n        height: 224px; } }\n    @media screen and (min-width: 1440px) {\n      .VideoDisplay.Columns6 .VideoDisplayBackground {\n        height: 304px; } }\n  .VideoDisplay .DisplayText {\n    margin-top: 8px;\n    margin-bottom: 8px;\n    color: #516173; }\n";
styleInject(css$J);

var VideoDisplay =
/*#__PURE__*/
function (_PureComponent) {
  inherits(VideoDisplay, _PureComponent);

  function VideoDisplay() {
    classCallCheck(this, VideoDisplay);

    return possibleConstructorReturn(this, getPrototypeOf(VideoDisplay).apply(this, arguments));
  }

  createClass(VideoDisplay, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          allowFullScreen = _this$props.allowFullScreen,
          videoSource = _this$props.videoSource,
          videoTitle = _this$props.videoTitle,
          videoId = _this$props.videoId,
          videoButtonTheme = _this$props.videoButtonTheme,
          imgSource = _this$props.imgSource,
          imgMobileSource = _this$props.imgMobileSource,
          heading = _this$props.heading,
          tag = _this$props.tag,
          size = _this$props.size;
      var videoProps = {
        allowFullScreen: allowFullScreen,
        source: videoSource,
        title: videoTitle,
        videoId: videoId,
        theme: videoButtonTheme
      };
      var imageBackgroundProps = {
        source: imgSource,
        mobileSource: imgMobileSource
      };
      var composedClassName = composeClassName(["VideoDisplay", size, className]);
      return React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement(ImageBackground, _extends_1({}, imageBackgroundProps, {
        className: "VideoDisplayBackground"
      }), React__default.createElement(ModalVideo, _extends_1({}, videoProps, {
        noDisplayText: true,
        className: "PlayButton"
      }))), React__default.createElement(DisplayText, {
        size: "S"
      }, tag), React__default.createElement(Heading, {
        size: "S"
      }, heading));
    }
  }]);

  return VideoDisplay;
}(React.PureComponent);

defineProperty(VideoDisplay, "propTypes", {
  allowFullScreen: PropTypes.bool,
  className: PropTypes.string,

  /** Video Player source */
  videoSource: PropTypes.oneOf(["vimeo", "youtube"]),

  /** Video Title, required for Accessibility */
  videoTitle: PropTypes.string.isRequired,

  /** Video Player URL Id, for each player source its different,
   * can be found at sharing options of the video */
  videoId: PropTypes.string.isRequired,
  videoButtonTheme: PropTypes.oneOf(["light", "dark"]),
  imgSource: PropTypes.string.isRequired,
  imgMobileSource: PropTypes.string,
  heading: PropTypes.string.isRequired,
  tag: PropTypes.string.isRequired,
  size: PropTypes.oneOf(["Columns6", "Columns12"])
});

defineProperty(VideoDisplay, "defaultProps", {
  size: "Columns12",
  videoButtonTheme: "dark"
});



var index$2 = /*#__PURE__*/Object.freeze({
	Accordion: Accordion,
	AccordionItem: AccordionItem,
	Banner: Banner,
	BaseTile: BaseTile,
	BulletList: BulletList,
	BulletListItem: BulletListItem,
	ButtonBackToTop: ButtonBackToTop,
	ButtonCloseModal: ButtonCloseModal,
	ButtonGhost: ButtonGhost,
	ButtonIcon: ButtonIcon,
	ButtonLink: ButtonLink,
	ButtonVideo: ButtonVideo,
	ContentAligned: ContentAligned,
	ContentImage: ContentImage,
	DownloadableResources: DownloadableResources,
	ImageLink: ImageLink,
	InputTextArea: InputTextArea,
	LocaleSwitcherFirstTimeUser: LocaleSwitcherFirstTimeUser,
	GenericContent: GenericContent,
	MarkdownParser: MarkdownParser,
	KeyValuePair: KeyValuePair,
	LocaleSwitcher: LocaleSwitcher,
	MarketingTileA: MarketingTileA,
	MarketingTileB: MarketingTileB,
	MarketingTileC: MarketingTileC,
	ModalVideo: ModalVideo,
	NavigationColumn: NavigationColumn,
	NavigationItemMobile: NavigationItemMobile,
	Stories: Stories,
	TabSectionLink: TabSectionLink,
	TextWithBackground: TextWithBackground,
	VideoDisplay: VideoDisplay
});

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

var css$K = ".Footer {\n  width: 100%;\n  background-color: #f1f4f8;\n  padding-top: 25px;\n  padding-bottom: 30px; }\n  .Footer .FooterContent {\n    margin-left: 8px;\n    margin-right: 8px; }\n    @media screen and (min-width: 768px) {\n      .Footer .FooterContent {\n        padding-top: 30px;\n        width: 732px;\n        margin-left: auto;\n        margin-right: auto; } }\n    @media screen and (min-width: 1024px) {\n      .Footer .FooterContent {\n        width: 924px; } }\n    @media screen and (min-width: 1440px) {\n      .Footer .FooterContent {\n        width: 1140px; } }\n  .Footer .Logo {\n    width: 32px;\n    height: 32px;\n    margin-bottom: 5px;\n    margin-left: auto;\n    margin-right: auto; }\n    @media screen and (min-width: 768px) {\n      .Footer .Logo {\n        margin-bottom: 30px;\n        margin-left: 0px;\n        margin-right: auto; } }\n  @media screen and (min-width: 768px) {\n    .Footer .FooterColumns {\n      display: flex; }\n      .Footer .FooterColumns > * {\n        flex-grow: 1; } }\n  .Footer .NavigationColumn {\n    width: 100%;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    border-bottom: 1px solid #dbdcdf; }\n    .Footer .NavigationColumn .DisplayText.M {\n      color: #516173; }\n      @media screen and (min-width: 768px) {\n        .Footer .NavigationColumn .DisplayText.M {\n          color: #19294f; } }\n    @media screen and (min-width: 768px) {\n      .Footer .NavigationColumn {\n        width: 160px;\n        padding: 0;\n        border: none; } }\n  .Footer .FooterDividerSection {\n    margin-top: 70px;\n    padding-bottom: 9px;\n    border-bottom: 1px solid #dbdcdf; }\n    @media screen and (min-width: 768px) {\n      .Footer .FooterDividerSection {\n        display: flex; } }\n    .Footer .FooterDividerSection .FooterSocialButtons {\n      display: flex;\n      margin: 0 -10px 30px -10px;\n      justify-content: center; }\n      .Footer .FooterDividerSection .FooterSocialButtons > * {\n        padding: 0 10px; }\n      @media screen and (min-width: 768px) {\n        .Footer .FooterDividerSection .FooterSocialButtons {\n          justify-content: flex-start;\n          margin-bottom: 0px; } }\n    .Footer .FooterDividerSection .NoticeToChildren {\n      display: block;\n      margin: 0 auto;\n      text-align: center; }\n      @media screen and (min-width: 768px) {\n        .Footer .FooterDividerSection .NoticeToChildren {\n          margin-bottom: 0px;\n          margin-top: auto;\n          margin-right: 0px;\n          margin-left: auto;\n          text-align: left; } }\n  .Footer .Copyright {\n    padding-top: 11px;\n    padding-bottom: 56px;\n    text-align: center; }\n    @media screen and (min-width: 768px) {\n      .Footer .Copyright {\n        text-align: left; } }\n  .Footer .FooterBottomLinks {\n    text-align: center; }\n    @media screen and (min-width: 768px) {\n      .Footer .FooterBottomLinks {\n        text-align: left; } }\n  .Footer .BaseLinkSeparator {\n    font-size: 14px;\n    line-height: 20px;\n    color: #19294f; }\n";
styleInject(css$K);

var weLogoSource = "https://static.we.org/logos/WE_RGB_blue_June2016.png";

var Footer =
/*#__PURE__*/
function (_PureComponent) {
  inherits(Footer, _PureComponent);

  function Footer() {
    classCallCheck(this, Footer);

    return possibleConstructorReturn(this, getPrototypeOf(Footer).apply(this, arguments));
  }

  createClass(Footer, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          columns = _this$props.columns,
          socialButtons = _this$props.socialButtons,
          noticeToChildrenHref = _this$props.noticeToChildrenHref,
          noticeToChildrenExternal = _this$props.noticeToChildrenExternal,
          copyrightInfo = _this$props.copyrightInfo,
          bottomLinks = _this$props.bottomLinks,
          internalLinkComponent = _this$props.internalLinkComponent;
      var composedClassName = composeClassName(["Footer", className]);
      var logo = React__default.createElement("div", {
        className: "Logo"
      }, React__default.createElement(Image, {
        source: weLogoSource,
        altText: ""
      }));
      var bottomLinkObjects = bottomLinks.reduce(function (objects, link) {
        return [].concat(toConsumableArray(objects), [link, React__default.createElement("span", {
          className: "BaseLinkSeparator",
          key: "".concat(link.key, "-after")
        }, " | ")]);
      }, []);
      bottomLinkObjects.pop();
      return React__default.createElement("footer", {
        className: composedClassName
      }, React__default.createElement("div", {
        className: "FooterContent"
      }, logo, React__default.createElement("div", {
        className: "FooterColumns"
      }, columns), React__default.createElement("div", {
        className: "FooterDividerSection"
      }, React__default.createElement("div", {
        className: "FooterSocialButtons"
      }, socialButtons), React__default.createElement(BaseLink, {
        className: "NoticeToChildren",
        internalLinkComponent: internalLinkComponent,
        href: noticeToChildrenHref,
        external: noticeToChildrenExternal
      }, "Notice to Children Under 13")), React__default.createElement("div", null, React__default.createElement(BodyText, {
        size: "M",
        className: "Copyright"
      }, copyrightInfo), React__default.createElement(LocaleSwitcher, {
        allowedLocales: config_1
      })), React__default.createElement("div", {
        className: "FooterBottomLinks"
      }, bottomLinkObjects)));
    }
  }]);

  return Footer;
}(React.PureComponent);

defineProperty(Footer, "propTypes", {
  className: PropTypes.string,
  columns: PropTypes.array,
  socialButtons: PropTypes.array,
  noticeToChildrenHref: PropTypes.string,
  noticeToChildrenExternal: PropTypes.bool,
  copyrightInfo: PropTypes.string,
  bottomLinks: PropTypes.array,
  internalLinkComponent: PropTypes.any.isRequired
});

defineProperty(Footer, "defaultProps", {
  className: "",
  columns: [],
  socialButtons: [],
  noticeToChildrenHref: "",
  noticeToChildrenExternal: false,
  copyrightInfo: "",
  bottomLinks: []
});

var css$L = ".LeadGenerator {\n  width: 100%; }\n  .LeadGenerator .LeadImage {\n    width: 100%;\n    height: 200px; }\n    @media screen and (min-width: 768px) {\n      .LeadGenerator .LeadImage {\n        height: 272px; } }\n    @media screen and (min-width: 1024px) {\n      .LeadGenerator .LeadImage {\n        height: 307px; } }\n    @media screen and (min-width: 1440px) {\n      .LeadGenerator .LeadImage {\n        height: 368px; } }\n  .LeadGenerator .LeadTextSection {\n    width: 100%;\n    margin: 0 auto;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    padding-left: 16px;\n    padding-right: 16px; }\n    @media screen and (min-width: 768px) {\n      .LeadGenerator .LeadTextSection {\n        width: 544px;\n        padding-top: 16px;\n        padding-bottom: 16px;\n        padding-left: 16px;\n        padding-right: 16px; } }\n    @media screen and (min-width: 1024px) {\n      .LeadGenerator .LeadTextSection {\n        width: 688px;\n        padding-top: 24px;\n        padding-bottom: 24px;\n        padding-left: 24px;\n        padding-right: 24px; } }\n    @media screen and (min-width: 1440px) {\n      .LeadGenerator .LeadTextSection {\n        width: 928px;\n        padding-top: 32px;\n        padding-bottom: 32px;\n        padding-left: 32px;\n        padding-right: 32px; } }\n  @media screen and (min-width: 768px) {\n    .LeadGenerator.WithImage .LeadTextSection {\n      position: relative;\n      top: -112px; } }\n  @media screen and (min-width: 768px) and (min-width: 1024px) {\n    .LeadGenerator.WithImage .LeadTextSection {\n      top: -128px; } }\n  @media screen and (min-width: 768px) and (min-width: 1440px) {\n    .LeadGenerator.WithImage .LeadTextSection {\n      top: -136px; } }\n  @media screen and (min-width: 768px) {\n    .LeadGenerator.WithImage {\n      margin-bottom: -112px; } }\n  @media screen and (min-width: 1024px) {\n    .LeadGenerator.WithImage {\n      margin-bottom: -128px; } }\n  @media screen and (min-width: 1440px) {\n    .LeadGenerator.WithImage {\n      margin-bottom: -136px; } }\n  .LeadGenerator .LeadHeading {\n    height: 96px; }\n    @media screen and (min-width: 768px) {\n      .LeadGenerator .LeadHeading {\n        height: 64px; } }\n    @media screen and (min-width: 1024px) {\n      .LeadGenerator .LeadHeading {\n        height: 64px; } }\n  .LeadGenerator .LeadCTA {\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 16px;\n    margin-bottom: 16px; }\n    @media screen and (min-width: 768px) {\n      .LeadGenerator .LeadCTA {\n        margin-top: 24px;\n        margin-bottom: 24px; } }\n    @media screen and (min-width: 1024px) {\n      .LeadGenerator .LeadCTA {\n        margin-top: 24px;\n        margin-bottom: 24px; } }\n    @media screen and (min-width: 1440px) {\n      .LeadGenerator .LeadCTA {\n        margin-top: 24px;\n        margin-bottom: 24px; } }\n    .LeadGenerator .LeadCTA .ButtonContainer {\n      max-width: none; }\n    .LeadGenerator .LeadCTA .Button {\n      max-width: none;\n      margin-left: auto;\n      margin-right: auto;\n      width: 328px; }\n      @media screen and (min-width: 768px) {\n        .LeadGenerator .LeadCTA .Button {\n          width: auto; } }\n  .LeadGenerator .LeadDisplayText {\n    text-align: center;\n    min-height: 16px; }\n    @media screen and (min-width: 1024px) {\n      .LeadGenerator .LeadDisplayText {\n        min-height: 16px; } }\n  .LeadGenerator .ContactLink {\n    text-align: center; }\n    @media screen and (min-width: 768px) {\n      .LeadGenerator .ContactLink {\n        height: 16px; } }\n  @media screen and (min-width: 768px) and (min-width: 1024px) {\n    .LeadGenerator .ContactLink {\n      height: 24px; } }\n";
styleInject(css$L);

var LeadGenerator =
/*#__PURE__*/
function (_PureComponent) {
  inherits(LeadGenerator, _PureComponent);

  function LeadGenerator() {
    classCallCheck(this, LeadGenerator);

    return possibleConstructorReturn(this, getPrototypeOf(LeadGenerator).apply(this, arguments));
  }

  createClass(LeadGenerator, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          imageSource = _this$props.imageSource,
          imageLongDesc = _this$props.imageLongDesc,
          mobileImageSource = _this$props.mobileImageSource,
          imageAltText = _this$props.imageAltText,
          title = _this$props.title,
          buttonText = _this$props.buttonText,
          buttonTheme = _this$props.buttonTheme,
          buttonHref = _this$props.buttonHref,
          buttonIsExternal = _this$props.buttonIsExternal,
          displayText = _this$props.displayText,
          contactLinkHref = _this$props.contactLinkHref,
          contactLinkIsExternal = _this$props.contactLinkIsExternal,
          contactLinkText = _this$props.contactLinkText,
          contactLinkTitle = _this$props.contactLinkTitle,
          color = _this$props.color,
          whiteText = _this$props.whiteText,
          internalLinkComponent = _this$props.internalLinkComponent;
      var withImage = !!(imageSource && imageAltText);
      var composedClassName = composeClassName(["LeadGenerator", withImage ? "WithImage" : "", className]);
      var image = null;

      if (withImage) {
        image = React__default.createElement(Image, {
          className: "LeadImage",
          altText: imageAltText,
          source: imageSource,
          mobileSource: mobileImageSource,
          longdesc: imageLongDesc
        });
      }

      var contactLink;

      if (contactLinkText) {
        contactLink = React__default.createElement(BaseLink, {
          className: "ContactLink",
          href: contactLinkHref,
          external: contactLinkIsExternal,
          title: contactLinkTitle,
          internalLinkComponent: internalLinkComponent
        }, contactLinkText);
      } else {
        contactLink = React__default.createElement(DisplayText, {
          size: "S",
          className: "ContactLink"
        });
      }

      return React__default.createElement("div", {
        className: composedClassName
      }, image, React__default.createElement(TextWithBackground, {
        className: "LeadTextSection",
        color: color,
        whiteText: whiteText
      }, React__default.createElement(Heading, {
        centered: true,
        className: "LeadHeading",
        size: "S"
      }, title), React__default.createElement(ButtonLink, {
        size: "L",
        theme: buttonTheme,
        href: buttonHref,
        external: buttonIsExternal,
        internalLinkComponent: internalLinkComponent,
        className: "LeadCTA CTAButton"
      }, buttonText), React__default.createElement(DisplayText, {
        className: "LeadDisplayText",
        size: "S"
      }, displayText), contactLink));
    }
  }]);

  return LeadGenerator;
}(React.PureComponent);

defineProperty(LeadGenerator, "propTypes", {
  className: PropTypes.string,
  imageSource: PropTypes.string,
  imageLongDesc: PropTypes.string,
  mobileImageSource: PropTypes.string,
  imageAltText: PropTypes.string,

  /** The text title inside the text-with-background section */
  title: PropTypes.string.isRequired,
  buttonText: PropTypes.string.isRequired,
  buttonTheme: PropTypes.string,
  buttonHref: PropTypes.string.isRequired,
  buttonIsExternal: PropTypes.bool,
  displayText: PropTypes.string,
  contactLinkHref: PropTypes.string,
  contactLinkIsExternal: PropTypes.bool,
  contactLinkText: PropTypes.string,
  contactLinkTitle: PropTypes.string,

  /** The background color */
  color: PropTypes.string,
  whiteText: PropTypes.bool,
  internalLinkComponent: PropTypes.any.isRequired
});

defineProperty(LeadGenerator, "defaultProps", {
  className: "",
  imageSource: null,
  imageAltText: null,
  buttonTheme: "Primary",
  buttonIsExternal: false,
  displayText: "",
  contactLinkHref: "",
  contactLinkIsExternal: false,
  contactLinkText: "",
  contactLinkTitle: null,
  color: "#ffffff",
  whiteText: false
});

var css$M = ".NavigationBarWrapper.Desktop {\n  width: 100%; }\n  .NavigationBarWrapper.Desktop .SkipToContentLink {\n    position: absolute;\n    left: -10000px;\n    top: auto;\n    width: 1px;\n    height: 1px;\n    overflow: hidden; }\n  .NavigationBarWrapper.Desktop .NavigationBar {\n    width: 100%;\n    z-index: 100;\n    position: relative;\n    background-color: #ffffff;\n    display: flex;\n    height: 60px;\n    border: 1px solid #dbdcdf;\n    box-sizing: border-box; }\n    .NavigationBarWrapper.Desktop .NavigationBar .Logo {\n      width: 50px;\n      height: 50px;\n      margin-left: 25px;\n      margin-top: 5px;\n      margin-bottom: 5px;\n      margin-right: 15px; }\n    .NavigationBarWrapper.Desktop .NavigationBar .NavigationCategory {\n      display: flex; }\n      .NavigationBarWrapper.Desktop .NavigationBar .NavigationCategory .CategoryLink {\n        display: block;\n        margin-left: 15px;\n        margin-right: 15px;\n        padding-top: 20px; }\n      .NavigationBarWrapper.Desktop .NavigationBar .NavigationCategory .CategoryLink.open {\n        border-bottom: 2px solid #00aeef; }\n    .NavigationBarWrapper.Desktop .NavigationBar .NavigationExternal {\n      margin-left: auto;\n      margin-right: 11px;\n      margin-top: 20px;\n      text-transform: uppercase; }\n      .NavigationBarWrapper.Desktop .NavigationBar .NavigationExternal .ExternalLink {\n        margin-left: 15px;\n        margin-right: 15px; }\n  .NavigationBarWrapper.Desktop .NavigationMenu {\n    width: 100%;\n    transition: transform 1000ms ease-in-out;\n    z-index: 99;\n    position: absolute;\n    background-color: #ffffff;\n    border: 1px solid #dbdcdf;\n    padding-top: 20px;\n    display: flex; }\n    .NavigationBarWrapper.Desktop .NavigationMenu .Content {\n      flex: 0 0 25%;\n      padding-left: 25px;\n      padding-right: 25px;\n      box-sizing: border-box;\n      margin-bottom: 35px; }\n      .NavigationBarWrapper.Desktop .NavigationMenu .Content .MenuHeading {\n        padding-bottom: 10px; }\n      .NavigationBarWrapper.Desktop .NavigationMenu .Content .MenuBodyText {\n        padding-bottom: 15px; }\n      .NavigationBarWrapper.Desktop .NavigationMenu .Content .MenuButtonContainer .BaseLink {\n        display: inline-block; }\n    .NavigationBarWrapper.Desktop .NavigationMenu .LinkFlexSection {\n      flex: 0 1 75%; }\n    .NavigationBarWrapper.Desktop .NavigationMenu .LinkColumns {\n      box-sizing: border-box;\n      border-left: 1px solid #dbdcdf;\n      display: flex;\n      padding-left: 25px;\n      padding-right: 25px;\n      margin-bottom: 35px; }\n  .NavigationBarWrapper.Desktop .MenuSlide-enter {\n    transform: translateY(-100%); }\n  .NavigationBarWrapper.Desktop .MenuSlide-enter-active {\n    transform: none; }\n  .NavigationBarWrapper.Desktop .MenuSlide-exit {\n    transform: none; }\n  .NavigationBarWrapper.Desktop .MenuSlide-exit-active {\n    transform: translateY(-100%); }\n";
styleInject(css$M);

var weLogoSource$1 = "https://static.we.org/logos/WE_RGB_blue_June2016.png";
var sectionPropTypes = PropTypes.shape({
  title: PropTypes.string.isRequired,
  subMenuTitle: PropTypes.string.isRequired,
  subMenuBodyText: PropTypes.string,
  buttonHidden: PropTypes.bool,
  buttonText: PropTypes.string,
  buttonHref: PropTypes.string,
  buttonIsExternal: PropTypes.bool,

  /** An array of the NavigationColumn molecule */
  columns: PropTypes.array.isRequired
});

var NavigationBarDesktop =
/*#__PURE__*/
function (_PureComponent) {
  inherits(NavigationBarDesktop, _PureComponent);

  function NavigationBarDesktop(props) {
    var _this;

    classCallCheck(this, NavigationBarDesktop);

    _this = possibleConstructorReturn(this, getPrototypeOf(NavigationBarDesktop).call(this, props));

    defineProperty(assertThisInitialized(_this), "_handleOnKeyDown", function (event) {
      // close on Escape
      if (event.keyCode === 27) {
        var menu = _this.state.menu;

        if (menu !== null) {
          _this._toggleMenu(menu);
        }
      }
    });

    defineProperty(assertThisInitialized(_this), "_toggleMenu", function (menu) {
      var ref;

      _this.setState(function (prevState) {
        if (prevState.menu === menu) {
          ref = _this.menuButtonRefs[menu];
          return {
            menu: null,
            exiting: menu
          };
        }

        ref = _this.menuRefs[menu];
        return {
          menu: menu
        };
      }, function () {
        ref.current.focus();
      });
    });

    defineProperty(assertThisInitialized(_this), "_menuOpen", function (menu) {
      _this.setState({
        entering: menu
      });
    });

    defineProperty(assertThisInitialized(_this), "_menuOpened", function () {
      _this.setState({
        entering: null
      });
    });

    defineProperty(assertThisInitialized(_this), "_menuClose", function (menu) {
      _this.setState({
        exiting: menu
      });
    });

    defineProperty(assertThisInitialized(_this), "_menuClosed", function () {
      _this.setState({
        exiting: null
      });
    });

    defineProperty(assertThisInitialized(_this), "_isMenuPresent", function () {
      var _this$state = _this.state,
          menu = _this$state.menu,
          entering = _this$state.entering,
          exiting = _this$state.exiting;
      /** If the menu is currently opening, it will finish opening even if the user has
       *  pressed the button to close it. */

      if (entering) {
        return true;
      }
      /** If the menu is currently closing or has been set to close, it will finish closing
       *  even if the user has pressed the button to open it. */


      if (exiting) {
        return false;
      }
      /** Otherwise, return true if the current menu is non-null and false if it is null. */


      return !!menu;
    });

    _this.state = {
      /** The currently selected menu item. The current series of animations will end with this
       *  menu showing. It has the value `null` when the menu is closed.
       */
      menu: null,

      /** The menu item which is currently exiting, or is queued for exiting while the menu is
       *  entering. If the menu is in a non-transition state, this has the value `null`.
       */
      exiting: null,

      /** The menu item which is currently entering. If the menu is not entering, this has the
       *  value `null`. If both entering and exiting have values, the menu is entering, but will
       *  immediately exit when it finishes.
       */
      entering: null
    };
    var sectionsArray = _this.props.sectionsArray;
    _this.menuRefs = {};
    _this.menuButtonRefs = {};
    sectionsArray.forEach(function (section) {
      _this.menuRefs[camelize(section.title)] = React__default.createRef();
      _this.menuButtonRefs[camelize(section.title)] = React__default.createRef();
    });
    return _this;
  } // This is just to ensure that the menu ref is recreated when the title of the section is changed


  createClass(NavigationBarDesktop, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this2 = this;

      var sectionsArray = this.props.sectionsArray;
      sectionsArray.forEach(function (section) {
        _this2.menuRefs[camelize(section.title)] = React__default.createRef();
        _this2.menuButtonRefs[camelize(section.title)] = React__default.createRef();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          className = _this$props.className,
          sectionsArray = _this$props.sectionsArray,
          internalLinkComponent = _this$props.internalLinkComponent,
          externalLinkInfo = _this$props.externalLinkInfo;
      var _this$state2 = this.state,
          menu = _this$state2.menu,
          exiting = _this$state2.exiting,
          entering = _this$state2.entering;
      var composedClassName = composeClassName(["NavigationBarWrapper", "Desktop", className]);
      var logo = React__default.createElement("div", {
        className: "Logo"
      }, React__default.createElement(Image, {
        source: weLogoSource$1,
        altText: ""
      }));
      var categoryLinkInfo = sectionsArray.map(function (section) {
        return {
          item: camelize(section.title),
          label: section.title
        };
      });
      var sections = {};
      sectionsArray.forEach(function (section) {
        sections[camelize(section.title)] = section;
      });
      var categoryLinks = categoryLinkInfo.map(function (linkInfo, index) {
        var expanded = menu === linkInfo.item;
        var key = "category-".concat(index, "-").concat(linkInfo.label);
        return React__default.createElement("div", {
          key: key,
          className: "CategoryLink".concat(expanded ? " open" : "")
        }, React__default.createElement(BaseLink, {
          blank: true,
          a11yProps: {
            "aria-expanded": expanded,
            ref: _this3.menuButtonRefs[linkInfo.item]
          },
          onClickHandler: function onClickHandler() {
            _this3._toggleMenu(linkInfo.item);
          },
          active: menu === linkInfo.item
        }, linkInfo.label));
      });
      var externalLinks = externalLinkInfo.map(function (linkInfo, index) {
        var key = "external-".concat(index, "-").concat(linkInfo.label);
        return React__default.createElement(BaseLink, {
          key: key,
          className: "ExternalLink",
          internalLinkComponent: internalLinkComponent,
          title: linkInfo.title,
          href: linkInfo.href,
          external: linkInfo.external
        }, linkInfo.label);
      });
      var mainBar = React__default.createElement("nav", {
        className: "NavigationBar"
      }, logo, React__default.createElement("a", {
        className: "SkipToContentLink",
        href: "#endOfNavbar"
      }, "Skip to Content"), React__default.createElement("div", {
        className: "NavigationCategory"
      }, categoryLinks), React__default.createElement("div", {
        className: "NavigationExternal"
      }, externalLinks));
      var currentMenu = exiting || menu || entering;
      var section = sections[currentMenu] || {};
      var menuButton = section.buttonHidden ? null : React__default.createElement("div", {
        className: "MenuButtonContainer"
      }, React__default.createElement(BaseLink, {
        tabIndex: "-1",
        internalLinkComponent: internalLinkComponent,
        href: section.buttonHref,
        external: section.buttonIsExternal
      }, React__default.createElement(Button, {
        size: "M",
        theme: "Tertiary",
        className: "MenuButton"
      }, section.buttonText)));
      var dropdownMenu = React__default.createElement(reactTransitionGroup.CSSTransition, {
        classNames: "MenuSlide",
        timeout: 1000,
        key: "Menu",
        "in": this._isMenuPresent(),
        mountOnEnter: true,
        unmountOnExit: true,
        onEnter: function onEnter() {
          _this3._menuOpen(currentMenu);
        },
        onEntered: this._menuOpened,
        onExit: function onExit() {
          _this3._menuClose(currentMenu);
        },
        onExited: this._menuClosed
      }, React__default.createElement("div", {
        role: "menu",
        tabIndex: "0",
        className: "NavigationMenu",
        ref: this.menuRefs[menu],
        onKeyDown: this._handleOnKeyDown
      }, React__default.createElement("div", {
        className: "Content"
      }, React__default.createElement(Heading, {
        size: "S",
        className: "MenuHeading"
      }, section.subMenuTitle), React__default.createElement(BodyText, {
        size: "L",
        className: "MenuBodyText"
      }, section.subMenuBodyText), menuButton), React__default.createElement("div", {
        className: "LinkFlexSection"
      }, React__default.createElement("div", {
        className: "LinkColumns"
      }, section.columns))));
      return React__default.createElement("div", {
        className: composedClassName
      }, mainBar, dropdownMenu, React__default.createElement("div", {
        id: "endOfNavbar"
      }));
    }
  }]);

  return NavigationBarDesktop;
}(React.PureComponent);

defineProperty(NavigationBarDesktop, "propTypes", {
  className: PropTypes.string,

  /** Each section has the following props:
   *  `title`, `bodyText`, `buttonHidden`, `buttonText`,
   *  `buttonHref`, `buttonIsExternal`, `columns` */
  sectionsArray: PropTypes.arrayOf(sectionPropTypes).isRequired,
  internalLinkComponent: PropTypes.any.isRequired,
  externalLinkInfo: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    href: PropTypes.string,
    external: PropTypes.bool,
    title: PropTypes.string
  }))
});

defineProperty(NavigationBarDesktop, "defaultProps", {
  className: "",
  externalLinkInfo: [],
  sectionsArray: []
});

var css$N = ".NavigationBarWrapper.Mobile {\n  width: 100%; }\n  .NavigationBarWrapper.Mobile .SkipToContentLink {\n    position: absolute;\n    left: -10000px;\n    top: auto;\n    width: 1px;\n    height: 1px;\n    overflow: hidden; }\n  .NavigationBarWrapper.Mobile .NavigationBar {\n    width: 100%;\n    display: flex;\n    z-index: 100;\n    position: relative;\n    background-color: #ffffff;\n    height: 50px;\n    border: 1px solid #dbdcdf;\n    box-sizing: border-box; }\n    .NavigationBarWrapper.Mobile .NavigationBar .Logo {\n      width: 32px;\n      height: 32px;\n      margin-left: 10px;\n      margin-top: 9px;\n      margin-bottom: 9px;\n      margin-right: auto; }\n    .NavigationBarWrapper.Mobile .NavigationBar .NavigationHamburger {\n      margin-left: auto;\n      margin-top: 9px;\n      margin-bottom: 9px;\n      margin-right: 10px; }\n  .NavigationBarWrapper.Mobile .NavigationMenu {\n    transition: transform 600ms ease-in-out;\n    z-index: 99;\n    position: absolute;\n    width: 100%;\n    padding-top: 21px;\n    padding-bottom: 21px;\n    background-color: #ffffff;\n    min-height: 510px; }\n    .NavigationBarWrapper.Mobile .NavigationMenu .NavigationWrapper {\n      padding-left: 10px;\n      padding-right: 10px; }\n    .NavigationBarWrapper.Mobile .NavigationMenu .NavigationItems {\n      margin: 0;\n      padding: 0; }\n    .NavigationBarWrapper.Mobile .NavigationMenu .NavigationBackButton {\n      display: flex; }\n      .NavigationBarWrapper.Mobile .NavigationMenu .NavigationBackButton .SubMenuBack {\n        text-transform: capitalize; }\n      .NavigationBarWrapper.Mobile .NavigationMenu .NavigationBackButton .Icon {\n        margin-top: 3px; }\n    .NavigationBarWrapper.Mobile .NavigationMenu .SubMenuDescription {\n      border-bottom: 1px solid #dbdcdf;\n      padding-top: 15px;\n      padding-bottom: 20px; }\n      .NavigationBarWrapper.Mobile .NavigationMenu .SubMenuDescription .MenuHeading {\n        padding-bottom: 20px;\n        border-bottom: 1px solid #dbdcdf; }\n      .NavigationBarWrapper.Mobile .NavigationMenu .SubMenuDescription .MenuTitle {\n        padding-top: 20px;\n        padding-bottom: 5px; }\n      .NavigationBarWrapper.Mobile .NavigationMenu .SubMenuDescription .MenuBodyText {\n        padding-bottom: 10px; }\n      .NavigationBarWrapper.Mobile .NavigationMenu .SubMenuDescription .MenuDescriptionLink {\n        display: inline-block; }\n    .NavigationBarWrapper.Mobile .NavigationMenu .NavigationColumn {\n      width: 100%;\n      padding-top: 20px;\n      padding-bottom: 20px;\n      border-bottom: 1px solid #dbdcdf; }\n      .NavigationBarWrapper.Mobile .NavigationMenu .NavigationColumn .DisplayText.M {\n        color: #516173; }\n  .NavigationBarWrapper.Mobile .MenuSlide-enter {\n    transform: translateY(-100%); }\n  .NavigationBarWrapper.Mobile .MenuSlide-enter-active {\n    transform: none; }\n  .NavigationBarWrapper.Mobile .MenuSlide-exit {\n    transform: none; }\n  .NavigationBarWrapper.Mobile .MenuSlide-exit-active {\n    transform: translateY(-100%); }\n  .NavigationBarWrapper.Mobile .SubMenuSlide-enter {\n    transform: translateX(100%); }\n  .NavigationBarWrapper.Mobile .SubMenuSlide-enter-active {\n    transform: none; }\n  .NavigationBarWrapper.Mobile .SubMenuSlide-exit {\n    transform: none; }\n  .NavigationBarWrapper.Mobile .SubMenuSlide-exit-active {\n    transform: translateX(100%); }\n";
styleInject(css$N);

var weLogoSource$2 = "https://static.we.org/logos/WE_RGB_blue_June2016.png";
var sectionPropTypes$1 = PropTypes.shape({
  title: PropTypes.string.isRequired,
  subMenuTitle: PropTypes.string.isRequired,
  subMenuBodyText: PropTypes.string,
  buttonHidden: PropTypes.bool,
  buttonText: PropTypes.string,
  buttonHref: PropTypes.string,
  buttonIsExternal: PropTypes.bool,

  /** An array of the NavigationColumn molecule */
  columns: PropTypes.array.isRequired
});

var NavigationBarMobile =
/*#__PURE__*/
function (_PureComponent) {
  inherits(NavigationBarMobile, _PureComponent);

  function NavigationBarMobile(props) {
    var _this;

    classCallCheck(this, NavigationBarMobile);

    _this = possibleConstructorReturn(this, getPrototypeOf(NavigationBarMobile).call(this, props));

    defineProperty(assertThisInitialized(_this), "_toggleMenu", function () {
      _this.setState(function (prevState) {
        if (prevState.subMenuOpen === true) {
          return {
            menuOpen: false,
            subMenuOpen: false
          };
        }

        if (prevState.menuOpen === false) {
          return {
            menuOpen: true,
            subMenuOpen: false
          };
        }

        return {
          menuOpen: false,
          subMenuOpen: false
        };
      });
    });

    defineProperty(assertThisInitialized(_this), "_toggleSubMenu", function (subMenuItem) {
      _this.setState(function (prevState) {
        if (prevState.subMenuOpen === false) {
          return {
            menu: subMenuItem,
            subMenuOpen: true
          };
        }

        return {
          menu: subMenuItem,
          subMenuOpen: false
        };
      });
    });

    defineProperty(assertThisInitialized(_this), "_backToMainMenu", function () {
      _this.setState(function () {
        return {
          menuOpen: true,
          subMenuOpen: false
        };
      });
    });

    _this.state = {
      menu: null,
      menuOpen: false,
      subMenuOpen: false
    };
    return _this;
  }

  createClass(NavigationBarMobile, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          sectionsArray = _this$props.sectionsArray,
          internalLinkComponent = _this$props.internalLinkComponent,
          externalLinkInfo = _this$props.externalLinkInfo;
      var _this$state = this.state,
          menuOpen = _this$state.menuOpen,
          subMenuOpen = _this$state.subMenuOpen,
          menu = _this$state.menu;
      var composedClassName = composeClassName(["NavigationBarWrapper", "Mobile", className]);
      var logo = React__default.createElement("div", {
        className: "Logo"
      }, React__default.createElement(Image, {
        source: weLogoSource$2,
        altText: "WE Logo"
      }));
      var mainBar = React__default.createElement("nav", {
        className: "NavigationBar"
      }, logo, React__default.createElement(BaseLink, {
        blank: true,
        className: "Hamburger",
        onClickHandler: function onClickHandler() {
          _this2._toggleMenu();
        }
      }, React__default.createElement(Icon, {
        icon: "hamburger",
        size: "M",
        className: "NavigationHamburger",
        defaultColor: "DefaultGrey",
        title: "Toggle Main menu",
        role: "img"
      }))); // TODO: Translations

      var categoryLinkInfo = sectionsArray.map(function (section) {
        return {
          item: camelize(section.title),
          label: section.title
        };
      });
      var categoryLinks = categoryLinkInfo.map(function (linkInfo, key) {
        var itemKey = "categoryKey-".concat(key);
        return React__default.createElement(NavigationItemMobile, {
          key: itemKey,
          itemKey: itemKey,
          onClickHandler: function onClickHandler() {
            _this2._toggleSubMenu(linkInfo.item);
          }
        }, linkInfo.label);
      });
      var externalLinks = externalLinkInfo.map(function (linkInfo, key) {
        var itemKey = "externalLinkKey-".concat(key);
        return React__default.createElement(NavigationItemMobile, {
          key: itemKey,
          itemKey: itemKey,
          title: linkInfo.title,
          internalLinkComponent: internalLinkComponent,
          href: linkInfo.href,
          external: linkInfo.external
        }, linkInfo.label);
      });
      var sections = {};
      sectionsArray.forEach(function (section) {
        sections[camelize(section.title)] = section;
      });
      var currentSubmenuMenu = subMenuOpen;
      var section = sections[menu] || {}; // TODO: String translation for "Menu"

      var mainMenu = React__default.createElement(reactTransitionGroup.CSSTransition, {
        classNames: "MenuSlide",
        timeout: 600,
        key: "Menu",
        unmountOnExit: true,
        "in": menuOpen
      }, React__default.createElement("div", {
        className: "NavigationMenu"
      }, React__default.createElement("div", {
        className: "NavigationWrapper"
      }, React__default.createElement("a", {
        className: "SkipToContentLink",
        href: "#endOfNavbar"
      }, "Skip to Content"), React__default.createElement(Heading, {
        size: "M",
        className: "MenuHeading"
      }, "Menu"), React__default.createElement("ul", {
        className: "NavigationItems"
      }, categoryLinks, externalLinks))));
      var currentCategory = categoryLinkInfo.find(function (link) {
        return link.item === menu;
      }); // prettier-ignore

      var subMenuName = undefined !== currentCategory ? currentCategory.label : null;
      var menuButton = section.buttonHidden ? null : React__default.createElement(BaseLink, {
        tabIndex: "-1",
        className: "MenuDescriptionLink",
        internalLinkComponent: internalLinkComponent,
        href: section.buttonHref,
        external: section.buttonIsExternal
      }, section.buttonText); // TODO: String translations for "Back"

      var subMenu = React__default.createElement(reactTransitionGroup.CSSTransition, {
        classNames: "SubMenuSlide",
        timeout: 600,
        key: "SubMenu",
        unmountOnExit: true,
        "in": currentSubmenuMenu
      }, React__default.createElement("div", {
        className: "NavigationMenu"
      }, React__default.createElement("div", {
        className: "NavigationWrapper"
      }, React__default.createElement(BaseLink, {
        blank: true,
        className: "NavigationBackButton",
        onClickHandler: function onClickHandler() {
          _this2._backToMainMenu();
        }
      }, React__default.createElement(Icon, {
        icon: "chevronLeft",
        size: "S",
        className: "NavigationItemCaret",
        defaultColor: "DefaultGrey"
      }), React__default.createElement(DisplayText, {
        size: "M",
        className: "SubMenuBack"
      }, "Back")), React__default.createElement("div", {
        className: "SubMenuDescription"
      }, React__default.createElement(Heading, {
        size: "M",
        className: "MenuHeading"
      }, subMenuName), React__default.createElement(Heading, {
        size: "S",
        className: "MenuTitle"
      }, section.title), React__default.createElement(BodyText, {
        size: "L",
        className: "MenuBodyText"
      }, section.bodyText), menuButton), section.columns)));
      return React__default.createElement("div", {
        className: composedClassName
      }, mainBar, mainMenu, subMenu, React__default.createElement("div", {
        id: "endOfNavbar"
      }));
    }
  }]);

  return NavigationBarMobile;
}(React.PureComponent);

defineProperty(NavigationBarMobile, "propTypes", {
  className: PropTypes.string,

  /** Each section has the following props:
   *  `title`, `bodyText`, `buttonHidden`, `buttonText`,
   *  `buttonHref`, `buttonIsExternal`, `columns` */
  sectionsArray: PropTypes.arrayOf(sectionPropTypes$1).isRequired,
  internalLinkComponent: PropTypes.any.isRequired,
  externalLinkInfo: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    href: PropTypes.string,
    external: PropTypes.bool,
    title: PropTypes.string
  }))
});

defineProperty(NavigationBarMobile, "defaultProps", {
  className: "",
  externalLinkInfo: [],
  sectionsArray: []
});

var css$O = ".DesktopOnly {\n  display: none; }\n  @media screen and (min-width: 1024px) {\n    .DesktopOnly {\n      display: block; } }\n\n.MobileOnly {\n  display: block; }\n  @media screen and (min-width: 1024px) {\n    .MobileOnly {\n      display: none; } }\n";
styleInject(css$O);

var NavigationBar =
/*#__PURE__*/
function (_PureComponent) {
  inherits(NavigationBar, _PureComponent);

  function NavigationBar() {
    classCallCheck(this, NavigationBar);

    return possibleConstructorReturn(this, getPrototypeOf(NavigationBar).apply(this, arguments));
  }

  createClass(NavigationBar, [{
    key: "render",
    value: function render() {
      return React__default.createElement(React__default.Fragment, null, React__default.createElement(NavigationBarDesktop, _extends_1({
        className: "DesktopOnly"
      }, this.props)), React__default.createElement(NavigationBarMobile, _extends_1({
        className: "MobileOnly"
      }, this.props)));
    }
  }]);

  return NavigationBar;
}(React.PureComponent);

var css$P = ".NavigationSub {\n  width: 100%; }\n  .NavigationSub .NavigationSubItem {\n    width: 100%;\n    overflow: hidden; }\n    .NavigationSub .NavigationSubItem .NavigationSubItemLink {\n      display: flex;\n      align-items: center;\n      overflow: hidden; }\n      .NavigationSub .NavigationSubItem .NavigationSubItemLink > span {\n        overflow: hidden;\n        text-overflow: ellipsis; }\n  .NavigationSub .NavigationSubDesktop {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center; }\n    .NavigationSub .NavigationSubDesktop .NavigationSubItem {\n      display: flex;\n      align-items: center;\n      padding-left: 16px;\n      padding-right: 16px;\n      height: 52px;\n      justify-content: center;\n      max-width: 320px; }\n    .NavigationSub .NavigationSubDesktop .Current {\n      border-bottom: 3px solid #00aeef; }\n  .NavigationSub .NavigationSubMobile .Current {\n    border-left: 3px solid #00aeef; }\n  .NavigationSub .NavigationSubMobile .NavigationSubItem {\n    padding-left: 5px;\n    padding-right: 7px;\n    display: flex;\n    align-items: center; }\n    .NavigationSub .NavigationSubMobile .NavigationSubItem .NavigationSubItemLink {\n      width: 100%;\n      height: 60px;\n      border-bottom: 1px solid #dbdcdf; }\n";
styleInject(css$P);

var NavigationSub =
/*#__PURE__*/
function (_PureComponent) {
  inherits(NavigationSub, _PureComponent);

  function NavigationSub() {
    classCallCheck(this, NavigationSub);

    return possibleConstructorReturn(this, getPrototypeOf(NavigationSub).apply(this, arguments));
  }

  createClass(NavigationSub, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          items = _this$props.items,
          internalLinkComponent = _this$props.internalLinkComponent,
          isMobile = _this$props.isMobile,
          currentHref = _this$props.currentHref;
      var navigationSubItems = [];
      navigationSubItems.push(items.map(function (item) {
        var external = item.external,
            href = item.href,
            label = item.label,
            title = item.title;
        return React__default.createElement("div", {
          key: title,
          className: composeClassName(["NavigationSubItem", item.href === currentHref ? "Current" : ""])
        }, React__default.createElement(BaseLink, {
          href: href,
          external: external,
          internalLinkComponent: internalLinkComponent,
          className: "NavigationSubItemLink"
        }, React__default.createElement(DisplayText, {
          size: "M"
        }, label)));
      }));
      var navigationSubDesktop = React__default.createElement("div", {
        className: "NavigationSubDesktop"
      }, navigationSubItems);
      var navigationSubMobile = React__default.createElement("div", {
        className: "NavigationSubMobile"
      }, navigationSubItems);
      var navigationSub = navigationSubDesktop;

      if (isMobile) {
        navigationSub = navigationSubMobile;
      }

      return React__default.createElement("div", {
        className: composeClassName(["NavigationSub", className])
      }, navigationSub);
    }
  }]);

  return NavigationSub;
}(React.PureComponent);

defineProperty(NavigationSub, "propTypes", {
  /** An array of the NavigationColumn molecule */
  isMobile: PropTypes.bool,
  items: PropTypes.arrayOf(PropTypes.shape({
    href: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    external: PropTypes.bool,
    label: PropTypes.string
  })).isRequired,
  currentHref: PropTypes.string,
  internalLinkComponent: PropTypes.any
});

defineProperty(NavigationSub, "defaultProps", {
  isMobile: false,
  internalLinkComponent: null
});

var css$Q = ".StoriesLayout {\n  display: flex;\n  flex-direction: column; }\n  .StoriesLayout .Heading {\n    padding: 0 0 24px 8px; }\n    @media screen and (min-width: 768px) {\n      .StoriesLayout .Heading {\n        padding: 0 0 16px 16px; } }\n  .StoriesLayout .ButtonLink {\n    display: flex;\n    justify-content: center;\n    margin: 16px 8px 0 8px;\n    width: 100%; }\n    @media screen and (min-width: 1440px) {\n      .StoriesLayout .ButtonLink {\n        margin-top: 32px; } }\n    .StoriesLayout .ButtonLink > .ButtonContainer {\n      width: 100%;\n      max-width: 360px; }\n      @media screen and (min-width: 576px) {\n        .StoriesLayout .ButtonLink > .ButtonContainer {\n          max-width: 208px; } }\n      @media screen and (min-width: 768px) {\n        .StoriesLayout .ButtonLink > .ButtonContainer {\n          max-width: 256px; } }\n      @media screen and (min-width: 1024px) {\n        .StoriesLayout .ButtonLink > .ButtonContainer {\n          max-width: 352px; } }\n      .StoriesLayout .ButtonLink > .ButtonContainer > button {\n        width: 100%;\n        max-width: 360px; }\n  .StoriesLayout .CenteredTiles {\n    justify-content: center; }\n";
styleInject(css$Q);

var StoriesLayout =
/*#__PURE__*/
function (_PureComponent) {
  inherits(StoriesLayout, _PureComponent);

  function StoriesLayout() {
    classCallCheck(this, StoriesLayout);

    return possibleConstructorReturn(this, getPrototypeOf(StoriesLayout).apply(this, arguments));
  }

  createClass(StoriesLayout, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          titleText = _this$props.titleText,
          titleSize = _this$props.titleSize,
          underlined = _this$props.underlined,
          underlineColor = _this$props.underlineColor,
          whiteText = _this$props.whiteText,
          buttonText = _this$props.buttonText,
          buttonTheme = _this$props.buttonTheme,
          href = _this$props.href,
          external = _this$props.external,
          linkTitle = _this$props.linkTitle,
          backgroundColor = _this$props.backgroundColor,
          centered = _this$props.centered,
          className = _this$props.className,
          children = _this$props.children,
          internalLinkComponent = _this$props.internalLinkComponent;
      var composedClassName = composeClassName(["StoriesLayout", className]);
      var button = null;

      if (href) {
        button = React__default.createElement(ButtonLink, {
          href: href,
          external: external,
          internalLinkComponent: internalLinkComponent,
          title: linkTitle,
          theme: buttonTheme
        }, buttonText);
      }

      return React__default.createElement(Container, {
        className: composedClassName,
        style: {
          backgroundColor: colors_2[backgroundColor].color
        }
      }, React__default.createElement(Heading, {
        size: titleSize,
        underlined: underlined,
        underlineColor: underlineColor,
        whiteText: whiteText
      }, titleText), React__default.createElement(Container, {
        className: centered ? "CenteredTiles" : ""
      }, children), button);
    }
  }]);

  return StoriesLayout;
}(React.PureComponent);

defineProperty(StoriesLayout, "propTypes", {
  titleText: PropTypes.string.isRequired,
  titleSize: PropTypes.oneOf(["S", "M", "L"]),
  underlined: PropTypes.bool,
  underlineColor: PropTypes.string,
  whiteText: PropTypes.bool,
  buttonText: PropTypes.string.isRequired,
  buttonTheme: PropTypes.oneOf(["Primary", "Secondary", "Tertiary"]),
  href: PropTypes.string,
  external: PropTypes.bool,
  linkTitle: PropTypes.string,
  backgroundColor: PropTypes.oneOf(["base-white-color", "base-light-blue-color", "brand-navy-color", "brand-yellow-color"]),
  centered: PropTypes.bool,
  className: PropTypes.string
});

defineProperty(StoriesLayout, "defaultProps", {
  titleSize: "L",
  underlined: true,
  underlineColor: "#00aeef",
  whiteText: false,
  buttonTheme: "Primary",
  backgroundColor: "base-white-color",
  centered: false,
  className: ""
});

var css$R = ".TabSection {\n  width: 100%; }\n  .TabSection .TabBar {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    max-width: 100%;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n    overflow-x: scroll;\n    scrollbar-width: none;\n    /* Firefox */\n    -ms-overflow-style: none;\n    /* IE 10+ */ }\n    @media screen and (min-width: 768px) {\n      .TabSection .TabBar {\n        justify-content: center; } }\n    .TabSection .TabBar > * {\n      flex: 0 0 auto; }\n    .TabSection .TabBar::-webkit-scrollbar {\n      /* WebKit */\n      width: 0;\n      height: 0; }\n    @media screen and (min-width: 768px) {\n      .TabSection .TabBar {\n        overflow-x: hidden; } }\n  .TabSection .HiddenPanel {\n    display: none; }\n";
styleInject(css$R);

var TabSection =
/*#__PURE__*/
function (_PureComponent) {
  inherits(TabSection, _PureComponent);

  function TabSection(props) {
    var _this;

    classCallCheck(this, TabSection);

    _this = possibleConstructorReturn(this, getPrototypeOf(TabSection).call(this, props));

    defineProperty(assertThisInitialized(_this), "setCurrentTab", function (index) {
      _this.setState({
        currentTab: index
      });
    });

    _this.state = {
      currentTab: 0
    };
    return _this;
  }

  createClass(TabSection, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          tabs = _this$props.tabs;
      var currentTab = this.state.currentTab;
      var tabButtons = tabs.map(function (tab, index) {
        var selected = currentTab === index;
        return React__default.createElement("li", {
          key: tab.key
        }, React__default.createElement(TabSectionLink, {
          className: "Tab",
          sectionId: tab.key,
          active: selected,
          tabIndex: selected ? "0" : "-1",
          blank: true,
          onClickHandler: function onClickHandler() {
            _this2.setCurrentTab(index);
          }
        }, tab.text));
      });
      var tabPanels = tabs.map(function (tab, index) {
        var selected = currentTab === index;
        return React__default.createElement("div", {
          key: tab.key,
          role: "tabpanel",
          "aria-labelledby": "tab-".concat(tab.key),
          id: tab.key,
          className: selected ? "" : "HiddenPanel"
        }, tab.content);
      });
      var composedClassName = composeClassName(["TabSection", className]);
      return React__default.createElement("div", {
        className: composedClassName
      }, React__default.createElement("ul", {
        role: "tablist",
        className: "TabBar"
      }, tabButtons), tabPanels);
    }
  }]);

  return TabSection;
}(React.PureComponent);

defineProperty(TabSection, "propTypes", {
  className: PropTypes.string,
  tabs: PropTypes.arrayOf(PropTypes.shape({
    key: PropTypes.string,
    text: PropTypes.string,
    content: PropTypes.array
  }))
});

defineProperty(TabSection, "defaultProps", {});



var index$3 = /*#__PURE__*/Object.freeze({
	Footer: Footer,
	LeadGenerator: LeadGenerator,
	NavigationBar: NavigationBar,
	NavigationBarDesktop: NavigationBarDesktop,
	NavigationBarMobile: NavigationBarMobile,
	NavigationSub: NavigationSub,
	StoriesLayout: StoriesLayout,
	TabSection: TabSection
});

exports.Atoms = index$1;
exports.Molecules = index$2;
exports.Organisms = index$3;
exports.Utilities = index;
exports.colors = colors_2;
exports.allowedLocales = config_1;
exports.Form = Form;
exports.asFormElement = asFormElement;
exports.Input = Input$1;
exports.InputHidden = InputHidden$1;
exports.InputText = InputText;
exports.InputEmail = InputEmail;
exports.InputDropdown = InputDropdown$1;
exports.BaseLink = BaseLink;
exports.BodyText = BodyText;
exports.Button = Button;
exports.Col = Col;
exports.Container = Container;
exports.DisplayText = DisplayText;
exports.Divider = Divider;
exports.Heading = Heading;
exports.Icon = Icon;
exports.Iframe = Iframe;
exports.Image = Image;
exports.ImageBackground = ImageBackground;
exports.Label = Label;
exports.ModalWrapper = ModalWrapper;
exports.VideoPlayer = VideoPlayer;
exports.Accordion = Accordion;
exports.AccordionItem = AccordionItem;
exports.Banner = Banner;
exports.BaseTile = BaseTile;
exports.BulletList = BulletList;
exports.BulletListItem = BulletListItem;
exports.ButtonBackToTop = ButtonBackToTop;
exports.ButtonCloseModal = ButtonCloseModal;
exports.ButtonGhost = ButtonGhost;
exports.ButtonIcon = ButtonIcon;
exports.ButtonLink = ButtonLink;
exports.ButtonVideo = ButtonVideo;
exports.ContentAligned = ContentAligned;
exports.ContentImage = ContentImage;
exports.DownloadableResources = DownloadableResources;
exports.ImageLink = ImageLink;
exports.InputTextArea = InputTextArea;
exports.LocaleSwitcherFirstTimeUser = LocaleSwitcherFirstTimeUser;
exports.GenericContent = GenericContent;
exports.MarkdownParser = MarkdownParser;
exports.KeyValuePair = KeyValuePair;
exports.LocaleSwitcher = LocaleSwitcher;
exports.MarketingTileA = MarketingTileA;
exports.MarketingTileB = MarketingTileB;
exports.MarketingTileC = MarketingTileC;
exports.ModalVideo = ModalVideo;
exports.NavigationColumn = NavigationColumn;
exports.NavigationItemMobile = NavigationItemMobile;
exports.Stories = Stories;
exports.TabSectionLink = TabSectionLink;
exports.TextWithBackground = TextWithBackground;
exports.VideoDisplay = VideoDisplay;
exports.Footer = Footer;
exports.LeadGenerator = LeadGenerator;
exports.NavigationBar = NavigationBar;
exports.NavigationBarDesktop = NavigationBarDesktop;
exports.NavigationBarMobile = NavigationBarMobile;
exports.NavigationSub = NavigationSub;
exports.StoriesLayout = StoriesLayout;
exports.TabSection = TabSection;
exports.browser = browser;
exports.composeClassName = composeClassName;
exports.StringUtils = StringUtils;
exports.camelize = camelize;
//# sourceMappingURL=index.js.map
