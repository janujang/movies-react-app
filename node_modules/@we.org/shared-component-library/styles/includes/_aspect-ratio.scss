@import "./variables";
@import "./media-queries";

$ratios: '1:1', '4:3', '3:4', '16:9';

 // This wont for anything in the smallest container, or % based widths
// we need to align on how it should work when the container is at 100% width.
// Otherwise, it can be used since even if columns are % based, anything above smallest container
// translates directly to a px value that is not going to change. 
@mixin set-aspect-height($width, $ratio: '1:1') {
    @if $ratio == '1:1' {
        height: $width;
    }
    @else if $ratio == '4:3' {
        height: $width * (3/4);
    }
    @else if $ratio == '3:4' {
        height: $width * (4/3);
    }
    @else if $ratio == '16:9' {
        height: $width * (9/16);
    }
    @else {
        @debug "Invalid ratio `#{$ratio}`"
    }
};
// This mixin is to be used for the aspect-height-column
@mixin _get-height($columns, $ratio-fraction: 1) {
   @include gt(md) {
        height: $columns * (map-get($max-container-sizes, md) - (12/$columns * map-get($gutters, md)))/12 * $ratio-fraction
    };
    @include gt(lg) {
        height: $columns * (map-get($max-container-sizes, lg) - (12/$columns * map-get($gutters, lg)))/12 * $ratio-fraction
    };
    @include gt(xl) {
        height: $columns * (map-get($max-container-sizes, xl) - (12/$columns * map-get($gutters, xl)))/12 * $ratio-fraction
    };
    
}

@mixin set-aspect-height-column($columns, $ratio) {
    @if $ratio == '1:1' {
        @include _get-height($columns);
    }
    @else if $ratio == '4:3' {
        @include _get-height($columns, (3/4));
    }
    @else if $ratio == '3:4' {
        @include _get-height($columns, (4/3));
    }
    @else if $ratio == '16:9' {
        @include _get-height($columns, (9/16));
    }
    @else {
        @debug "Invalid ratio `#{$ratio}`"
    }
};
