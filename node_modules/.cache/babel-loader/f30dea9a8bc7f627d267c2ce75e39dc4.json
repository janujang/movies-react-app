{"ast":null,"code":"var _jsxFileName = \"/Users/janujan/Documents/movies-react-app/src/components/PosterInfo/PosterInfo.js\";\nimport React, { Component } from 'react';\nimport classes from './PosterInfo.module.css';\nimport axios from 'axios';\nimport Toolbar from '../Navigation/Toolbar/Toolbar';\n\nclass PosterInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loadedMovie: null\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.match.params.id);\n\n    if (this.props.match.params.id) {\n      //new movie\n      if (!this.state.loadedMovie || this.state.loadedMovie && this.state.loadedMovie.id !== this.props.match.params.id) {\n        axios.get('https://api.themoviedb.org/3/movie/' + this.props.match.params.id + '?api_key=0233eeb82ef3714df67f7e2db8e6ea28').then(response => {\n          console.log(response.data);\n          this.setState({\n            loadedMovie: response.data\n          });\n        }).catch(error => {}); //go through promises and async\n        //     axios.get('1').then(get('2')).then(get('3')).catch(console.log(err))\n        //     axios.get('1', function() => { \n        //         axios.get('2', function() {\n        //             axios.get('3', function() {}, function(){fdsfdsfdsf}\n        //         }, function(fdsfdsfds))\n        //     }, function() => {fdsfdsf})\n        //     async function() {\n        //     try {\n        //         await axios.get(1)\n        //         await axios.get(2)\n        //         await axios.get(3)\n        //     } catch(error)\n      }\n    }\n  }\n\n  render() {\n    let content = null; // const [element1, element2] = [1,2]\n    // const {element1, element2} = {element1: 1, element2: 2}\n    // const foo = {element1: 1, element2: 2}\n    // const {element1, element2} = foo\n\n    if (this.props.match.params.id) {\n      content = null;\n    } //check due to asynchronous nature\n\n\n    const loadedMovie = this.state.loadedMovie;\n\n    if (loadedMovie) {\n      content = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.PosterInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.state.loadedMovie.title), React.createElement(\"div\", {\n        className: classes.Columns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: classes.img,\n        src: 'http://image.tmdb.org/t/p/w342/' + this.state.loadedMovie.poster_path,\n        alt: this.state.loadedMovie.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.TextContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.state.loadedMovie.release_date.substring(0, 4)), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.loadedMovie.runtime, \" mins\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.state.loadedMovie.vote_average + '/10'), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.loadedMovie.overview), React.createElement(\"button\", {\n        className: classes.Buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"MARK AS FAVOURITE\"), React.createElement(\"button\", {\n        className: classes.Buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"REVIEW\"), React.createElement(\"button\", {\n        className: classes.Buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"SHARE\")))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      title: \"Movie Detail\",\n      back: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), content); //return <h1>Hi</h1>;\n  }\n\n}\n\n;\nexport default PosterInfo;","map":{"version":3,"sources":["/Users/janujan/Documents/movies-react-app/src/components/PosterInfo/PosterInfo.js"],"names":["React","Component","classes","axios","Toolbar","PosterInfo","state","loadedMovie","componentDidMount","console","log","props","match","params","id","get","then","response","data","setState","catch","error","render","content","title","Columns","img","poster_path","TextContainer","release_date","substring","runtime","vote_average","overview","Buttons"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,+BAApB;;AAGA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC/BK,KAD+B,GACvB;AACJC,MAAAA,WAAW,EAAE;AADT,KADuB;AAAA;;AAI/BC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAApC;;AACA,QAAI,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA5B,EAA+B;AAC3B;AACA,UAAI,CAAC,KAAKR,KAAL,CAAWC,WAAZ,IAA4B,KAAKD,KAAL,CAAWC,WAAX,IAA0B,KAAKD,KAAL,CAAWC,WAAX,CAAuBO,EAAvB,KAA8B,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAhH,EAAqH;AACjHX,QAAAA,KAAK,CAACY,GAAN,CAAU,wCAAwC,KAAKJ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAhE,GAAqE,2CAA/E,EACCE,IADD,CACMC,QAAQ,IAAI;AACdR,UAAAA,OAAO,CAACC,GAAR,CAAYO,QAAQ,CAACC,IAArB;AACA,eAAKC,QAAL,CAAc;AAACZ,YAAAA,WAAW,EAAEU,QAAQ,CAACC;AAAvB,WAAd;AACH,SAJD,EAIGE,KAJH,CAISC,KAAK,IAAI,CAEjB,CAND,EADiH,CASjH;AAEJ;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACC;AAEJ;AACJ;;AACDC,EAAAA,MAAM,GAAG;AACL,QAAIC,OAAO,GAAG,IAAd,CADK,CAEL;AACA;AACA;AACA;;AAEA,QAAI,KAAKZ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA5B,EAA+B;AAC3BS,MAAAA,OAAO,GAAG,IAAV;AACH,KATI,CAUL;;;AAVK,UAWGhB,WAXH,GAWmB,KAAKD,KAXxB,CAWGC,WAXH;;AAYL,QAAIA,WAAJ,EAAiB;AACbgB,MAAAA,OAAO,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUA;AAAK,QAAA,SAAS,EAAErB,OAAO,CAACG,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKC,KAAL,CAAWC,WAAX,CAAuBiB,KAA5B,CADJ,EAII;AAAK,QAAA,SAAS,EAAEtB,OAAO,CAACuB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,SAAS,EAAEvB,OAAO,CAACwB,GADvB;AAEI,QAAA,GAAG,EAAE,oCAAoC,KAAKpB,KAAL,CAAWC,WAAX,CAAuBoB,WAFpE;AAGI,QAAA,GAAG,EAAE,KAAKrB,KAAL,CAAWC,WAAX,CAAuBiB,KAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAMI;AAAK,QAAA,SAAS,EAAEtB,OAAO,CAAC0B,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKtB,KAAL,CAAWC,WAAX,CAAuBsB,YAAvB,CAAoCC,SAApC,CAA8C,CAA9C,EAAgD,CAAhD,CAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKxB,KAAL,CAAWC,WAAX,CAAuBwB,OAA5B,UAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKzB,KAAL,CAAWC,WAAX,CAAuByB,YAAvB,GAAsC,KAA3C,CAJJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAK1B,KAAL,CAAWC,WAAX,CAAuB0B,QAA3B,CANJ,EAQI;AAAQ,QAAA,SAAS,EAAE/B,OAAO,CAACgC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BARJ,EASI;AAAQ,QAAA,SAAS,EAAEhC,OAAO,CAACgC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ,EAUI;AAAQ,QAAA,SAAS,EAAEhC,OAAO,CAACgC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVJ,CANJ,CAJJ,CAVA,CADJ;AAgIH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAC,cAAf;AAA8B,MAAA,IAAI,EAAE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKX,OAFL,CADJ,CA9IK,CAoJL;AACH;;AA1L8B;;AA2LlC;AAED,eAAelB,UAAf","sourcesContent":["import React, {Component} from 'react';\nimport classes from './PosterInfo.module.css'\nimport axios from 'axios';\nimport Toolbar from '../Navigation/Toolbar/Toolbar';\n\n\nclass PosterInfo extends Component {\n    state = {\n        loadedMovie: null\n    }\n    componentDidMount(){\n        console.log(this.props.match.params.id);\n        if (this.props.match.params.id){\n            //new movie\n            if (!this.state.loadedMovie || (this.state.loadedMovie && this.state.loadedMovie.id !== this.props.match.params.id)) {\n                axios.get('https://api.themoviedb.org/3/movie/' + this.props.match.params.id + '?api_key=0233eeb82ef3714df67f7e2db8e6ea28')\n                .then(response => {\n                    console.log(response.data)\n                    this.setState({loadedMovie: response.data});\n                }).catch(error => {\n\n                });\n\n                //go through promises and async\n\n            //     axios.get('1').then(get('2')).then(get('3')).catch(console.log(err))\n\n            //     axios.get('1', function() => { \n            //         axios.get('2', function() {\n            //             axios.get('3', function() {}, function(){fdsfdsfdsf}\n            //         }, function(fdsfdsfds))\n            //     }, function() => {fdsfdsf})\n\n            //     async function() {\n            //     try {\n            //         await axios.get(1)\n            //         await axios.get(2)\n            //         await axios.get(3)\n            //     } catch(error)\n            }\n           \n        }\n    }\n    render() {\n        let content = null;\n        // const [element1, element2] = [1,2]\n        // const {element1, element2} = {element1: 1, element2: 2}\n        // const foo = {element1: 1, element2: 2}\n        // const {element1, element2} = foo\n\n        if (this.props.match.params.id){\n            content = null;\n        }\n        //check due to asynchronous nature\n        const { loadedMovie } = this.state\n        if (loadedMovie) {\n            content = (\n                <div>\n                {/* <Atoms.Container>\n                        <Atoms.Col md={{span: 6}} > \n                            <div style={{backgroundColor: \"red\", height: \"50px\", marginTop: \"100px\"}}> 6 </div>\n                        </Atoms.Col>\n                        <Atoms.Col md={{span: 6}} > \n                            <div style={{backgroundColor: \"blue\", height: \"50px\", marginTop: \"100px\"}}> 6 </div>\n                        </Atoms.Col>\n                </Atoms.Container> */}\n                \n                <div className={classes.PosterInfo}>\n                    <h1>{this.state.loadedMovie.title}</h1>   \n\n            \n                    <div className={classes.Columns}>\n                        <img \n                            className={classes.img} \n                            src={'http://image.tmdb.org/t/p/w342/' + this.state.loadedMovie.poster_path} \n                            alt={this.state.loadedMovie.title}/>\n\n                        <div className={classes.TextContainer}>\n\n                            <h2>{this.state.loadedMovie.release_date.substring(0,4)}</h2> \n                            <h3>{this.state.loadedMovie.runtime} mins</h3> \n                            <h3>{this.state.loadedMovie.vote_average + '/10'}</h3>\n\n                            <p>{this.state.loadedMovie.overview}</p> \n\n                            <button className={classes.Buttons}>MARK AS FAVOURITE</button>\n                            <button className={classes.Buttons}>REVIEW</button>\n                            <button className={classes.Buttons}>SHARE</button>\n\n                            {/* <div style={{display: 'inline-block'}}>\n                                <div style={{width: \"20px\"}} >\n                                    <Atoms.Button className={classes.Buttons} size=\"M\" onClickHandler={() => alert('Marked as favourite')} >MARK AS FAVOURITE</Atoms.Button>\n                                </div>\n                                <div style={{width: '20px'}}  >\n                                    <Atoms.Button className={classes.Buttons} size=\"M\" onClickHandler={() => alert('Reviewed')} >REVIEW</Atoms.Button>\n                                </div>\n                                <div style={{width: '20px'}}  >\n                                    <Atoms.Button className={classes.Buttons} size=\"M\" onClickHandler={() => alert('Shared')} >SHARED</Atoms.Button>\n                                </div>\n                            </div> */}\n                        </div>\n                    </div>\n                    \n                    {/* <div className={classes.Trailer}>\n                        <hr/>\n                        <h2>Trailers:</h2> \n                        <ul>\n                            <li>Trailer 1</li>\n                            <Atoms.VideoPlayer title=\"Movie1\" videoId=\"123123\" />\n                        </ul>\n                        <hr/>\n\n\n                        \n                        <Organisms.TabSection\n                            tabs={[\n                                {\n                                    key: \"Reviews\",\n                                    text: \"Reviews\",\n                                    content: [\n                                        <Molecules.Accordion>\n                                            <Molecules.AccordionItem\n                                                title=\"Review 1\"\n                                                id={1}\n                                                name=\"accordion\">\n                                                Body text. Word limit: 250 words\n                                            </Molecules.AccordionItem>\n                                            <Molecules.AccordionItem\n                                                title=\"Review 2\"\n                                                id={1}\n                                                name=\"accordion\">\n                                                Body text. Word limit: 250 words\n                                            </Molecules.AccordionItem>\n                                            <Molecules.AccordionItem\n                                                title=\"Review 3\"\n                                                id={1}\n                                                name=\"accordion\">\n                                                Body text. Word limit: 250 words\n                                            </Molecules.AccordionItem>\n                                        </Molecules.Accordion>\n                                    ],\n                                },\n                                {\n                                    key: \"Leave a review\",\n                                    text: \"Leave a review\",\n                                    content: [\n                                        <div style={{ width: \"600px\", height: \"300px\" }}>\n                                            <Molecules.InputTextArea\n                                            name=\"text-area-input\"\n                                            title=\"This is a title\"\n                                            label=\"Labelled Text Area Input: Error\"\n                                            placeholder=\"Enter text here\"\n                                            />\n                                        </div>\n                                    ],\n                                },\n                                {\n                                    key: \"Leave a rating\",\n                                    text: \"Leave a rating\",\n                                    content: [\n                                        <Atoms.BodyText size=\"M\">Select the number of stars you would like</Atoms.BodyText>\n                                    ],\n                                }\n                            ]}\n                        />\n                        <InputDropdown\n                            options={[\n                                { value: 1, label: \"one\" },\n                                { value: 2, label: \"two\" },\n                                { value: 3, label: \"three\" },\n                            ]}\n                            name=\"foo\"\n                            value={2}\n                            onChangeHandler={() => alert(\"hi\")}/>\n\n                        \n                        \n                    </div> */}\n                    \n                    \n                </div>\n            </div>\n   \n            );\n        }\n        return (\n            <div>\n                <Toolbar title=\"Movie Detail\" back={true} />\n                {content}\n            </div>\n        );\n        //return <h1>Hi</h1>;\n    }\n};\n\nexport default PosterInfo;\n\n"]},"metadata":{},"sourceType":"module"}